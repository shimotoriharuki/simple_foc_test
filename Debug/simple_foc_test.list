
simple_foc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c40  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f04  08007f04  000091c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007f04  08007f04  000091c4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007f04  08007f04  000091c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007f04  08007f04  00008f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f0c  08007f0c  00008f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  08007f10  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091c4  2**0
                  CONTENTS
 10 .bss          0000052c  200001c4  200001c4  000091c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f0  200006f0  000091c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018d4e  00000000  00000000  000091f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c8b  00000000  00000000  00021f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00025bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c9b  00000000  00000000  00026c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000215b4  00000000  00000000  000278d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016488  00000000  00000000  00048e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae065  00000000  00000000  0005f30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010d374  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000495c  00000000  00000000  0010d3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00111d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c4 	.word	0x200001c4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007db0 	.word	0x08007db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001c8 	.word	0x200001c8
 80001c4:	08007db0 	.word	0x08007db0

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	ed87 0a01 	vstr	s0, [r7, #4]
 800079e:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a2:	eef0 7ae7 	vabs.f32	s15, s15
 80007a6:	eeb0 0a67 	vmov.f32	s0, s15
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80007be:	edd7 7a01 	vldr	s15, [r7, #4]
 80007c2:	eef0 7ae7 	vabs.f32	s15, s15
 80007c6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <_ZN9BLDCMotorC1Eifff>:
// BLDCMotor( int pp , float R)
// - pp            - pole pair number
// - R             - motor phase resistance
// - KV            - motor kv rating (rmp/v)
// - L             - motor phase inductance
BLDCMotor::BLDCMotor(int pp, float _R, float _KV, float _inductance)
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6178      	str	r0, [r7, #20]
 80007dc:	6139      	str	r1, [r7, #16]
 80007de:	ed87 0a03 	vstr	s0, [r7, #12]
 80007e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80007e6:	ed87 1a01 	vstr	s2, [r7, #4]
: FOCMotor(), absolute_zero_search_flag(false)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fad5 	bl	8002d9c <_ZN8FOCMotorC1Ev>
 80007f2:	4a14      	ldr	r2, [pc, #80]	@ (8000844 <_ZN9BLDCMotorC1Eifff+0x70>)
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170
{
  // save pole pairs number
  pole_pairs = pp;
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	64da      	str	r2, [r3, #76]	@ 0x4c
  // save phase resistance number
  phase_resistance = _R;
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	649a      	str	r2, [r3, #72]	@ 0x48
  // save back emf constant KV = 1/KV
  // 1/sqrt(2) - rms value
  KV_rating = NOT_SET;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	4a0e      	ldr	r2, [pc, #56]	@ (8000848 <_ZN9BLDCMotorC1Eifff+0x74>)
 8000810:	651a      	str	r2, [r3, #80]	@ 0x50
  if (_isset(_KV))
 8000812:	edd7 7a02 	vldr	s15, [r7, #8]
 8000816:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800084c <_ZN9BLDCMotorC1Eifff+0x78>
 800081a:	eef4 7a47 	vcmp.f32	s15, s14
 800081e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000822:	d002      	beq.n	800082a <_ZN9BLDCMotorC1Eifff+0x56>
    KV_rating = _KV;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	651a      	str	r2, [r3, #80]	@ 0x50
  // save phase inductance
  phase_inductance = _inductance;
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	655a      	str	r2, [r3, #84]	@ 0x54

  // torque control type is voltage by default
  torque_controller = TorqueControlType::voltage;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	08007dd0 	.word	0x08007dd0
 8000848:	c640e400 	.word	0xc640e400
 800084c:	c640e400 	.word	0xc640e400

08000850 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>:


/**
	Link the driver which controls the motor
*/
void BLDCMotor::linkDriver(BLDCDriver* _driver) {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  driver = _driver;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN9BLDCMotor4initEv>:

// init hardware pins
int BLDCMotor::init() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  if (!driver || !driver->initialized) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <_ZN9BLDCMotor4initEv+0x24>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000888:	7c1b      	ldrb	r3, [r3, #16]
 800088a:	f083 0301 	eor.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <_ZN9BLDCMotor4initEv+0x30>
    motor_status = FOCMotorStatus::motor_init_failed;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	220f      	movs	r2, #15
 8000898:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    //SIMPLEFOC_DEBUG("MOT: Init not possible, driver not initialized");
    return 0;
 800089c:	2300      	movs	r3, #0
 800089e:	e078      	b.n	8000992 <_ZN9BLDCMotor4initEv+0x122>
  }
  motor_status = FOCMotorStatus::motor_initializing;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2201      	movs	r2, #1
 80008a4:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  //SIMPLEFOC_DEBUG("MOT: Init");

  // sanity check for the voltage limit configuration
  if(voltage_limit > driver->voltage_limit) voltage_limit =  driver->voltage_limit;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80008b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80008b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c0:	dd05      	ble.n	80008ce <_ZN9BLDCMotor4initEv+0x5e>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80008c8:	68da      	ldr	r2, [r3, #12]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	659a      	str	r2, [r3, #88]	@ 0x58
  // constrain voltage for sensor alignment
  if(voltage_sensor_align > voltage_limit) voltage_sensor_align = voltage_limit;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80008da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008e2:	dd03      	ble.n	80008ec <_ZN9BLDCMotor4initEv+0x7c>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	641a      	str	r2, [r3, #64]	@ 0x40

  // update the controller limits
  if(current_sense){
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d008      	beq.n	8000908 <_ZN9BLDCMotor4initEv+0x98>
    // current control loop controls voltage
    PID_current_q.limit = voltage_limit;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	67da      	str	r2, [r3, #124]	@ 0x7c
    PID_current_d.limit = voltage_limit;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  }
  if(_isset(phase_resistance) || torque_controller != TorqueControlType::voltage){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800090e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800099c <_ZN9BLDCMotor4initEv+0x12c>
 8000912:	eef4 7a47 	vcmp.f32	s15, s14
 8000916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800091a:	d104      	bne.n	8000926 <_ZN9BLDCMotor4initEv+0xb6>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <_ZN9BLDCMotor4initEv+0xc2>
    // velocity control loop controls current
    PID_velocity.limit = current_limit;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8000930:	e004      	b.n	800093c <_ZN9BLDCMotor4initEv+0xcc>
  }else{
    // velocity control loop controls the voltage
    PID_velocity.limit = voltage_limit;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  }
  P_angle.limit = velocity_limit;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  // if using open loop control, set a CW as the default direction if not already set
  if ((controller==MotionControlType::angle_openloop
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800094c:	2b04      	cmp	r3, #4
 800094e:	d004      	beq.n	800095a <_ZN9BLDCMotor4initEv+0xea>
     ||controller==MotionControlType::velocity_openloop)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000956:	2b03      	cmp	r3, #3
 8000958:	d108      	bne.n	800096c <_ZN9BLDCMotor4initEv+0xfc>
     && (sensor_direction == Direction::UNKNOWN)) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <_ZN9BLDCMotor4initEv+0xfc>
      sensor_direction = Direction::CW;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2201      	movs	r2, #1
 8000968:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
  }

  HAL_Delay(500);
 800096c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000970:	f003 fcbc 	bl	80042ec <HAL_Delay>
  // enable motor
  //SIMPLEFOC_DEBUG("MOT: Enable driver.");
  enable();
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3308      	adds	r3, #8
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	4798      	blx	r3
  HAL_Delay(500);
 8000980:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000984:	f003 fcb2 	bl	80042ec <HAL_Delay>
  motor_status = FOCMotorStatus::motor_uncalibrated;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2202      	movs	r2, #2
 800098c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  return 1;
 8000990:	2301      	movs	r3, #1
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	c640e400 	.word	0xc640e400

080009a0 <_ZN9BLDCMotor7disableEv>:


// disable motor driver
void BLDCMotor::disable()
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  // disable the current sense
  if(current_sense) current_sense->disable();
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00a      	beq.n	80009c8 <_ZN9BLDCMotor7disableEv+0x28>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	3314      	adds	r3, #20
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4610      	mov	r0, r2
 80009c6:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3310      	adds	r3, #16
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8000a14 <_ZN9BLDCMotor7disableEv+0x74>
 80009de:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000a14 <_ZN9BLDCMotor7disableEv+0x74>
 80009e2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000a14 <_ZN9BLDCMotor7disableEv+0x74>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4798      	blx	r3
  // disable the driver
  driver->disable();
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009f0:	461a      	mov	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	3308      	adds	r3, #8
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4610      	mov	r0, r2
 8000a00:	4798      	blx	r3
  // motor status update
  enabled = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	00000000 	.word	0x00000000

08000a18 <_ZN9BLDCMotor6enableEv>:
// enable motor driver
void BLDCMotor::enable()
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  // enable the driver
  driver->enable();
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	3304      	adds	r3, #4
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4610      	mov	r0, r2
 8000a36:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3310      	adds	r3, #16
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000ab4 <_ZN9BLDCMotor6enableEv+0x9c>
 8000a4e:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000ab4 <_ZN9BLDCMotor6enableEv+0x9c>
 8000a52:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8000ab4 <_ZN9BLDCMotor6enableEv+0x9c>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4798      	blx	r3
  // enable the current sense
  if(current_sense) current_sense->enable();
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d00a      	beq.n	8000a7a <_ZN9BLDCMotor6enableEv+0x62>
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3310      	adds	r3, #16
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4610      	mov	r0, r2
 8000a78:	4798      	blx	r3
  // reset the pids
  PID_velocity.reset();
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	33cc      	adds	r3, #204	@ 0xcc
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fefc 	bl	800387c <_ZN13PIDController5resetEv>
  P_angle.reset();
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	33f0      	adds	r3, #240	@ 0xf0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f002 fef7 	bl	800387c <_ZN13PIDController5resetEv>
  PID_current_q.reset();
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	336c      	adds	r3, #108	@ 0x6c
 8000a92:	4618      	mov	r0, r3
 8000a94:	f002 fef2 	bl	800387c <_ZN13PIDController5resetEv>
  PID_current_d.reset();
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3390      	adds	r3, #144	@ 0x90
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 feed 	bl	800387c <_ZN13PIDController5resetEv>
  // motor status update
  enabled = 1;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	00000000 	.word	0x00000000

08000ab8 <_ZN9BLDCMotor7initFOCEv>:

/**
  FOC functions
*/
// FOC initialization function
int  BLDCMotor::initFOC() {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  int exit_flag = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]

  motor_status = FOCMotorStatus::motor_calibrating;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  // align motor if necessary
  // alignment necessary for encoders!
  // sensor and motor alignment - can be skipped
  // by setting motor.sensor_direction and motor.zero_electric_angle
  if(sensor){
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d03c      	beq.n	8000b50 <_ZN9BLDCMotor7initFOCEv+0x98>
    exit_flag *= alignSensor();
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 f88e 	bl	8000bf8 <_ZN9BLDCMotor11alignSensorEv>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	fb02 f303 	mul.w	r3, r2, r3
 8000ae4:	60fb      	str	r3, [r7, #12]
    // added the shaft_angle update
    sensor->update();
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	3314      	adds	r3, #20
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4610      	mov	r0, r2
 8000afa:	4798      	blx	r3
    shaft_angle = shaftAngle();
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fa59 	bl	8002fb6 <_ZN8FOCMotor10shaftAngleEv>
 8000b04:	eef0 7a40 	vmov.f32	s15, s0
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	edc3 7a03 	vstr	s15, [r3, #12]

    // aligning the current sensor - can be skipped
    // checks if driver phases are the same as current sense phases
    // and checks the direction of measuremnt.
    if(exit_flag){
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d02c      	beq.n	8000b6e <_ZN9BLDCMotor7initFOCEv+0xb6>
      if(current_sense){ 
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d027      	beq.n	8000b6e <_ZN9BLDCMotor7initFOCEv+0xb6>
        if (!current_sense->initialized) {
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b24:	7b1b      	ldrb	r3, [r3, #12]
 8000b26:	f083 0301 	eor.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <_ZN9BLDCMotor7initFOCEv+0x86>
          motor_status = FOCMotorStatus::motor_calib_failed;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	220e      	movs	r2, #14
 8000b34:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          //SIMPLEFOC_DEBUG("MOT: Init FOC error, current sense not initialized");
          exit_flag = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	e017      	b.n	8000b6e <_ZN9BLDCMotor7initFOCEv+0xb6>
        }else{
          exit_flag *= alignCurrentSense();
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f82c 	bl	8000b9c <_ZN9BLDCMotor17alignCurrentSenseEv>
 8000b44:	4602      	mov	r2, r0
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	fb02 f303 	mul.w	r3, r2, r3
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	e00e      	b.n	8000b6e <_ZN9BLDCMotor7initFOCEv+0xb6>
      //else { SIMPLEFOC_DEBUG("MOT: No current sense."); }
    }

  } else {
    //SIMPLEFOC_DEBUG("MOT: No sensor.");
    if ((controller == MotionControlType::angle_openloop || controller == MotionControlType::velocity_openloop)){
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d004      	beq.n	8000b64 <_ZN9BLDCMotor7initFOCEv+0xac>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b60:	2b03      	cmp	r3, #3
 8000b62:	d102      	bne.n	8000b6a <_ZN9BLDCMotor7initFOCEv+0xb2>
      exit_flag = 1;    
 8000b64:	2301      	movs	r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	e001      	b.n	8000b6e <_ZN9BLDCMotor7initFOCEv+0xb6>
      //SIMPLEFOC_DEBUG("MOT: Openloop only!");
    }else{
      exit_flag = 0; // no FOC without sensor
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if(exit_flag){
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d004      	beq.n	8000b7e <_ZN9BLDCMotor7initFOCEv+0xc6>
    //SIMPLEFOC_DEBUG("MOT: Ready.");
    motor_status = FOCMotorStatus::motor_ready;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2204      	movs	r2, #4
 8000b78:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8000b7c:	e009      	b.n	8000b92 <_ZN9BLDCMotor7initFOCEv+0xda>
  }else{
    //SIMPLEFOC_DEBUG("MOT: Init FOC failed.");
    motor_status = FOCMotorStatus::motor_calib_failed;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	220e      	movs	r2, #14
 8000b82:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    disable();
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	3304      	adds	r3, #4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	4798      	blx	r3
  }

  return exit_flag;
 8000b92:	68fb      	ldr	r3, [r7, #12]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_ZN9BLDCMotor17alignCurrentSenseEv>:

// Calibarthe the motor and current sense phases
int BLDCMotor::alignCurrentSense() {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; // success
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]

  //SIMPLEFOC_DEBUG("MOT: Align current sense.");

  // align current sense and the driver
  exit_flag = current_sense->driverAlign(voltage_sensor_align, modulation_centered);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 0154 	ldr.w	r0, [r3, #340]	@ 0x154
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	f992 2067 	ldrsb.w	r2, [r2, #103]	@ 0x67
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	bf14      	ite	ne
 8000bca:	2201      	movne	r2, #1
 8000bcc:	2200      	moveq	r2, #0
 8000bce:	b2d2      	uxtb	r2, r2
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd6:	4798      	blx	r3
 8000bd8:	60f8      	str	r0, [r7, #12]
  if(!exit_flag){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d101      	bne.n	8000be4 <_ZN9BLDCMotor17alignCurrentSenseEv+0x48>
    // error in current sense - phase either not measured or bad connection
    //SIMPLEFOC_DEBUG("MOT: Align error!");
    exit_flag = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  }else{
    // output the alignment status flag
    //SIMPLEFOC_DEBUG("MOT: Success: ", exit_flag);
  }

  return exit_flag > 0;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bfcc      	ite	gt
 8000bea:	2301      	movgt	r3, #1
 8000bec:	2300      	movle	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_ZN9BLDCMotor11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int BLDCMotor::alignSensor() {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	ed2d 8b02 	vpush	{d8}
 8000bfe:	b08c      	sub	sp, #48	@ 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; //success
 8000c04:	2301      	movs	r3, #1
 8000c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //SIMPLEFOC_DEBUG("MOT: Align sensor.");

  // check if sensor needs zero search
  if(sensor->needsSearch()){
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	3318      	adds	r3, #24
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4610      	mov	r0, r2
 8000c1c:	4798      	blx	r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <_ZN9BLDCMotor11alignSensorEv+0x3e>
	  exit_flag = absoluteZeroSearch();
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 f98a 	bl	8000f48 <_ZN9BLDCMotor18absoluteZeroSearchEv>
 8000c34:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }
  // stop init if not found index
  if(!exit_flag){
 8000c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <_ZN9BLDCMotor11alignSensorEv+0x48>
	  return exit_flag;
 8000c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c3e:	e170      	b.n	8000f22 <_ZN9BLDCMotor11alignSensorEv+0x32a>
  }

  // v2.3.3 fix for R_AVR_7_PCREL against symbol" bug for AVR boards
  // TODO figure out why this works
  float voltage_align = voltage_sensor_align;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	623b      	str	r3, [r7, #32]

  // if unknown natural direction
  if(sensor_direction==Direction::UNKNOWN){
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	f040 80fa 	bne.w	8000e46 <_ZN9BLDCMotor11alignSensorEv+0x24e>

    // find natural direction
    // move one electrical revolution forward
    for (int i = 0; i <=500; i++ ) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c56:	e02f      	b.n	8000cb8 <_ZN9BLDCMotor11alignSensorEv+0xc0>
      float angle = _3PI_2 + _2PI * i / 500.0f;
 8000c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c5a:	ee07 3a90 	vmov	s15, r3
 8000c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c62:	ed9f 7ab3 	vldr	s14, [pc, #716]	@ 8000f30 <_ZN9BLDCMotor11alignSensorEv+0x338>
 8000c66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c6a:	eddf 6ab2 	vldr	s13, [pc, #712]	@ 8000f34 <_ZN9BLDCMotor11alignSensorEv+0x33c>
 8000c6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c72:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8000f38 <_ZN9BLDCMotor11alignSensorEv+0x340>
 8000c76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c7a:	edc7 7a03 	vstr	s15, [r7, #12]
      setPhaseVoltage(voltage_align, 0,  angle);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3318      	adds	r3, #24
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	ed97 1a03 	vldr	s2, [r7, #12]
 8000c8a:	eddf 0aac 	vldr	s1, [pc, #688]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000c8e:	ed97 0a08 	vldr	s0, [r7, #32]
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	4798      	blx	r3
	    sensor->update();
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	3314      	adds	r3, #20
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4610      	mov	r0, r2
 8000caa:	4798      	blx	r3
      HAL_Delay(2);
 8000cac:	2002      	movs	r0, #2
 8000cae:	f003 fb1d 	bl	80042ec <HAL_Delay>
    for (int i = 0; i <=500; i++ ) {
 8000cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000cbe:	ddcb      	ble.n	8000c58 <_ZN9BLDCMotor11alignSensorEv+0x60>
    }
    // take and angle in the middle
    sensor->update();
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3314      	adds	r3, #20
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	4798      	blx	r3
    float mid_angle = sensor->getAngle();
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4798      	blx	r3
 8000cec:	ed87 0a07 	vstr	s0, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >=0; i-- ) {
 8000cf0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cf6:	e02f      	b.n	8000d58 <_ZN9BLDCMotor11alignSensorEv+0x160>
      float angle = _3PI_2 + _2PI * i / 500.0f ;
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8000f30 <_ZN9BLDCMotor11alignSensorEv+0x338>
 8000d06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d0a:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8000f34 <_ZN9BLDCMotor11alignSensorEv+0x33c>
 8000d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d12:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8000f38 <_ZN9BLDCMotor11alignSensorEv+0x340>
 8000d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d1a:	edc7 7a04 	vstr	s15, [r7, #16]
      setPhaseVoltage(voltage_align, 0,  angle);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3318      	adds	r3, #24
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	ed97 1a04 	vldr	s2, [r7, #16]
 8000d2a:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000d2e:	ed97 0a08 	vldr	s0, [r7, #32]
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	4798      	blx	r3
      sensor->update();
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3314      	adds	r3, #20
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4798      	blx	r3
      HAL_Delay(2);
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f003 facd 	bl	80042ec <HAL_Delay>
    for (int i = 500; i >=0; i-- ) {
 8000d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d54:	3b01      	subs	r3, #1
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dacc      	bge.n	8000cf8 <_ZN9BLDCMotor11alignSensorEv+0x100>
    }
    sensor->update();
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3314      	adds	r3, #20
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4610      	mov	r0, r2
 8000d72:	4798      	blx	r3
    float end_angle = sensor->getAngle();
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	3304      	adds	r3, #4
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4610      	mov	r0, r2
 8000d88:	4798      	blx	r3
 8000d8a:	ed87 0a06 	vstr	s0, [r7, #24]
    setPhaseVoltage(0, 0, 0);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	3318      	adds	r3, #24
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000d9a:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000d9e:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	4798      	blx	r3
    HAL_Delay(200);
 8000da6:	20c8      	movs	r0, #200	@ 0xc8
 8000da8:	f003 faa0 	bl	80042ec <HAL_Delay>
    // determine the direction the sensor moved
    float moved =  fabs(mid_angle - end_angle);
 8000dac:	ed97 7a07 	vldr	s14, [r7, #28]
 8000db0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000db8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbc:	f7ff fcfa 	bl	80007b4 <_ZSt4fabsf>
 8000dc0:	ed87 0a05 	vstr	s0, [r7, #20]
    if (moved<MIN_ANGLE_DETECT_MOVEMENT) { // minimum angle to detect movement
 8000dc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dc8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8000f40 <_ZN9BLDCMotor11alignSensorEv+0x348>
 8000dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd4:	d501      	bpl.n	8000dda <_ZN9BLDCMotor11alignSensorEv+0x1e2>
      //SIMPLEFOC_DEBUG("MOT: Failed to notice movement");
      return 0; // failed calibration
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e0a3      	b.n	8000f22 <_ZN9BLDCMotor11alignSensorEv+0x32a>
    } else if (mid_angle < end_angle) {
 8000dda:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dde:	edd7 7a06 	vldr	s15, [r7, #24]
 8000de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	d504      	bpl.n	8000df6 <_ZN9BLDCMotor11alignSensorEv+0x1fe>
      //SIMPLEFOC_DEBUG("MOT: sensor_direction==CCW");
      sensor_direction = Direction::CCW;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	22ff      	movs	r2, #255	@ 0xff
 8000df0:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 8000df4:	e003      	b.n	8000dfe <_ZN9BLDCMotor11alignSensorEv+0x206>
    } else{
      //SIMPLEFOC_DEBUG("MOT: sensor_direction==CW");
      sensor_direction = Direction::CW;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    }
    // check pole pair number
    pp_check_result = !(fabs(moved*pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	ee07 3a90 	vmov	s15, r3
 8000e06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e12:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8000f30 <_ZN9BLDCMotor11alignSensorEv+0x338>
 8000e16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e1e:	f7ff fcc9 	bl	80007b4 <_ZSt4fabsf>
 8000e22:	eef0 7a40 	vmov.f32	s15, s0
 8000e26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e32:	bfcc      	ite	gt
 8000e34:	2301      	movgt	r3, #1
 8000e36:	2300      	movle	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f083 0301 	eor.w	r3, r3, #1
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
  } else {
	 // SIMPLEFOC_DEBUG("MOT: Skip dir calib.");
  }

  // zero electric angle not known
  if(!_isset(zero_electric_angle)){
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8000e4c:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000f44 <_ZN9BLDCMotor11alignSensorEv+0x34c>
 8000e50:	eef4 7a47 	vcmp.f32	s15, s14
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	d162      	bne.n	8000f20 <_ZN9BLDCMotor11alignSensorEv+0x328>
    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setPhaseVoltage(voltage_align, 0,  _3PI_2);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3318      	adds	r3, #24
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8000f38 <_ZN9BLDCMotor11alignSensorEv+0x340>
 8000e66:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000e6a:	ed97 0a08 	vldr	s0, [r7, #32]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	4798      	blx	r3
    HAL_Delay(700);
 8000e72:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000e76:	f003 fa39 	bl	80042ec <HAL_Delay>
    // read the sensor
    sensor->update();
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	3314      	adds	r3, #20
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4798      	blx	r3
    // get the current zero electric angle
    zero_electric_angle = 0;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    zero_electric_angle = electricalAngle();
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 f8fb 	bl	8003098 <_ZN8FOCMotor15electricalAngleEv>
 8000ea2:	eef0 7a40 	vmov.f32	s15, s0
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    zero_electric_angle =  _normalizeAngle(_electricalAngle(sensor_direction*sensor->getAngle(), pole_pairs));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4798      	blx	r3
 8000ed0:	eef0 7a40 	vmov.f32	s15, s0
 8000ed4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	4618      	mov	r0, r3
 8000ede:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee2:	f002 fb5f 	bl	80035a4 <_Z16_electricalAnglefi>
 8000ee6:	eef0 7a40 	vmov.f32	s15, s0
 8000eea:	eeb0 0a67 	vmov.f32	s0, s15
 8000eee:	f002 fb35 	bl	800355c <_Z15_normalizeAnglef>
 8000ef2:	eef0 7a40 	vmov.f32	s15, s0
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    HAL_Delay(20);
 8000efc:	2014      	movs	r0, #20
 8000efe:	f003 f9f5 	bl	80042ec <HAL_Delay>
    //if(monitor_port){
    //  SIMPLEFOC_DEBUG("MOT: Zero elec. angle: ", zero_electric_angle);
    //}
    // stop everything
    setPhaseVoltage(0, 0, 0);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	3318      	adds	r3, #24
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000f0e:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000f12:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8000f3c <_ZN9BLDCMotor11alignSensorEv+0x344>
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	4798      	blx	r3
    HAL_Delay(200);
 8000f1a:	20c8      	movs	r0, #200	@ 0xc8
 8000f1c:	f003 f9e6 	bl	80042ec <HAL_Delay>
  } else {
	  //SIMPLEFOC_DEBUG("MOT: Skip offset calib.");
  }
  return exit_flag;
 8000f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3730      	adds	r7, #48	@ 0x30
 8000f26:	46bd      	mov	sp, r7
 8000f28:	ecbd 8b02 	vpop	{d8}
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40c90fdb 	.word	0x40c90fdb
 8000f34:	43fa0000 	.word	0x43fa0000
 8000f38:	4096cbe4 	.word	0x4096cbe4
 8000f3c:	00000000 	.word	0x00000000
 8000f40:	3d7ecfa9 	.word	0x3d7ecfa9
 8000f44:	c640e400 	.word	0xc640e400

08000f48 <_ZN9BLDCMotor18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int BLDCMotor::absoluteZeroSearch() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  // sensor precision: this is all ok, as the search happens near the 0-angle, where the precision
  //                    of float is sufficient.
  //SIMPLEFOC_DEBUG("MOT: Index search...");
  // search the absolute zero with small velocity
  float limit_vel = velocity_limit;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f54:	60fb      	str	r3, [r7, #12]
  float limit_volt = voltage_limit;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	60bb      	str	r3, [r7, #8]
  velocity_limit = velocity_index_search;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	661a      	str	r2, [r3, #96]	@ 0x60
  voltage_limit = voltage_sensor_align;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	659a      	str	r2, [r3, #88]	@ 0x58
  shaft_angle = 0;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  while(sensor->needsSearch() && shaft_angle < _2PI){
 8000f74:	e003      	b.n	8000f7e <_ZN9BLDCMotor18absoluteZeroSearchEv+0x36>
	  absolute_zero_search_flag = true;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2201      	movs	r2, #1
 8000f7a:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170
  while(sensor->needsSearch() && shaft_angle < _2PI){
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4610      	mov	r0, r2
 8000f92:	4798      	blx	r3
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x6a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fa0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001010 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xc8>
 8000fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	d501      	bpl.n	8000fb2 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x6a>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x6c>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1de      	bne.n	8000f76 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x2e>
  }
  absolute_zero_search_flag = false;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170
  // disable motor
  setPhaseVoltage(0, 0, 0);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3318      	adds	r3, #24
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8001014 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xcc>
 8000fcc:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8001014 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xcc>
 8000fd0:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8001014 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xcc>
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4798      	blx	r3
  // reinit the limits
  velocity_limit = limit_vel;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	661a      	str	r2, [r3, #96]	@ 0x60
  voltage_limit = limit_volt;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	659a      	str	r2, [r3, #88]	@ 0x58
  // check if the zero found
  //if(monitor_port){
  //  if(sensor->needsSearch()) { SIMPLEFOC_DEBUG("MOT: Error: Not found!"); }
  //  else { SIMPLEFOC_DEBUG("MOT: Success!"); }
 // }
  return !sensor->needsSearch();
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3318      	adds	r3, #24
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4798      	blx	r3
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40c90fdb 	.word	0x40c90fdb
 8001014:	00000000 	.word	0x00000000

08001018 <_ZN9BLDCMotor7loopFOCEv>:
	}
}

// Iterative function looping FOC algorithm, setting Uq on the Motor
// The faster it can be run the better
void BLDCMotor::loopFOC() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  // update sensor - do this even in open-loop mode, as user may be switching between modes and we could lose track
  //                 of full rotations otherwise.
  if (sensor) {
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00a      	beq.n	8001040 <_ZN9BLDCMotor7loopFOCEv+0x28>
	  sensor->update();
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3314      	adds	r3, #20
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4610      	mov	r0, r2
 800103e:	4798      	blx	r3
  }

  // if open-loop do nothing
  if( controller==MotionControlType::angle_openloop || controller==MotionControlType::velocity_openloop ){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001046:	2b04      	cmp	r3, #4
 8001048:	d028      	beq.n	800109c <_ZN9BLDCMotor7loopFOCEv+0x84>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001050:	2b03      	cmp	r3, #3
 8001052:	d023      	beq.n	800109c <_ZN9BLDCMotor7loopFOCEv+0x84>
	  return;
  }
  
  // if disabled do nothing
  if(!enabled){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f993 3064 	ldrsb.w	r3, [r3, #100]	@ 0x64
 800105a:	2b00      	cmp	r3, #0
 800105c:	d020      	beq.n	80010a0 <_ZN9BLDCMotor7loopFOCEv+0x88>
  }

  // Needs the update() to be called first
  // This function will not have numerical issues because it uses Sensor::getMechanicalAngle() 
  // which is in range 0-2PI
  electrical_angle = electricalAngle();
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f002 f819 	bl	8003098 <_ZN8FOCMotor15electricalAngleEv>
 8001066:	eef0 7a40 	vmov.f32	s15, s0
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	edc3 7a04 	vstr	s15, [r3, #16]

  }
  */

  // set the phase voltage - FOC heart function :)
  setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3318      	adds	r3, #24
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	edd2 6a04 	vldr	s13, [r2, #16]
 800108a:	eeb0 1a66 	vmov.f32	s2, s13
 800108e:	eef0 0a47 	vmov.f32	s1, s14
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	4798      	blx	r3
 800109a:	e002      	b.n	80010a2 <_ZN9BLDCMotor7loopFOCEv+0x8a>
	  return;
 800109c:	bf00      	nop
 800109e:	e000      	b.n	80010a2 <_ZN9BLDCMotor7loopFOCEv+0x8a>
	  return;
 80010a0:	bf00      	nop
}
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_ZN9BLDCMotor4moveEf>:
// Iterative function running outer loop of the FOC algorithm
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void BLDCMotor::move(float new_target) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	ed2d 8b02 	vpush	{d8}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	ed87 0a00 	vstr	s0, [r7]

  // set internal target variable
  if(_isset(new_target)) target = new_target;
 80010b8:	edd7 7a00 	vldr	s15, [r7]
 80010bc:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 80010c0:	eef4 7a47 	vcmp.f32	s15, s14
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	d002      	beq.n	80010d0 <_ZN9BLDCMotor4moveEf+0x28>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	605a      	str	r2, [r3, #4]
  
  // downsampling (optional)
  if(motion_cnt++ < motion_downsample) return;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80010d6:	1c59      	adds	r1, r3, #1
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	f8c2 1130 	str.w	r1, [r2, #304]	@ 0x130
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80010e4:	4293      	cmp	r3, r2
 80010e6:	bf34      	ite	cc
 80010e8:	2301      	movcc	r3, #1
 80010ea:	2300      	movcs	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	f040 8380 	bne.w	80017f4 <_ZN9BLDCMotor4moveEf+0x74c>
  motion_cnt = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
  // get shaft angle
  // TODO sensor precision: the shaft_angle actually stores the complete position, including full rotations, as a float
  //                        For this reason it is NOT precise when the angles become large.
  //                        Additionally, the way LPF works on angle is a precision issue, and the angle-LPF is a problem
  //                        when switching to a 2-component representation.
  if( controller!=MotionControlType::angle_openloop && controller!=MotionControlType::velocity_openloop ) 
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001102:	2b04      	cmp	r3, #4
 8001104:	d00d      	beq.n	8001122 <_ZN9BLDCMotor4moveEf+0x7a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800110c:	2b03      	cmp	r3, #3
 800110e:	d008      	beq.n	8001122 <_ZN9BLDCMotor4moveEf+0x7a>
    shaft_angle = shaftAngle(); // read value even if motor is disabled to keep the monitoring updated but not in openloop mode
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f001 ff4f 	bl	8002fb6 <_ZN8FOCMotor10shaftAngleEv>
 8001118:	eef0 7a40 	vmov.f32	s15, s0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	edc3 7a03 	vstr	s15, [r3, #12]
  // get angular velocity  TODO the velocity reading probably also shouldn't happen in open loop modes?
  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4618      	mov	r0, r3
 8001126:	f001 ff81 	bl	800302c <_ZN8FOCMotor13shaftVelocityEv>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edc3 7a05 	vstr	s15, [r3, #20]

  // if disabled do nothing
  if(!enabled) return;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f993 3064 	ldrsb.w	r3, [r3, #100]	@ 0x64
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 835c 	beq.w	80017f8 <_ZN9BLDCMotor4moveEf+0x750>
  
  // calculate the back-emf voltage if KV_rating available U_bemf = vel*(1/KV)
  if (_isset(KV_rating)) voltage_bemf = shaft_velocity/(KV_rating*_SQRT3)/_RPM_TO_RADS;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001146:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 800114a:	eef4 7a47 	vcmp.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d012      	beq.n	800117a <_ZN9BLDCMotor4moveEf+0xd2>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 6a05 	vldr	s13, [r3, #20]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001160:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 800136c <_ZN9BLDCMotor4moveEf+0x2c4>
 8001164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001168:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800116c:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001370 <_ZN9BLDCMotor4moveEf+0x2c8>
 8001170:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  // estimate the motor current if phase reistance available and current_sense not available
  if(!current_sense && _isset(phase_resistance)) current.q = (voltage.q - voltage_bemf)/phase_resistance;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001180:	2b00      	cmp	r3, #0
 8001182:	d119      	bne.n	80011b8 <_ZN9BLDCMotor4moveEf+0x110>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800118a:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 800118e:	eef4 7a47 	vcmp.f32	s15, s14
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	d00f      	beq.n	80011b8 <_ZN9BLDCMotor4moveEf+0x110>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80011a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80011ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

  // upgrade the current based voltage limit
  switch (controller) {
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80011be:	2b04      	cmp	r3, #4
 80011c0:	f200 831f 	bhi.w	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
 80011c4:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <_ZN9BLDCMotor4moveEf+0x124>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	080011e1 	.word	0x080011e1
 80011d0:	080015cd 	.word	0x080015cd
 80011d4:	08001379 	.word	0x08001379
 80011d8:	0800179d 	.word	0x0800179d
 80011dc:	080017c9 	.word	0x080017c9
    case MotionControlType::torque:
      if(torque_controller == TorqueControlType::voltage){ // if voltage torque control
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f040 80bb 	bne.w	8001362 <_ZN9BLDCMotor4moveEf+0x2ba>
        if(!_isset(phase_resistance))  voltage.q = target;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80011f2:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 80011f6:	eef4 7a47 	vcmp.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	d104      	bne.n	800120a <_ZN9BLDCMotor4moveEf+0x162>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
 8001208:	e00f      	b.n	800122a <_ZN9BLDCMotor4moveEf+0x182>
        else  voltage.q =  target*phase_resistance + voltage_bemf;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        voltage.q = _constrain(voltage.q, -voltage_limit, voltage_limit);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001236:	eef1 7a67 	vneg.f32	s15, s15
 800123a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800123e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001242:	d505      	bpl.n	8001250 <_ZN9BLDCMotor4moveEf+0x1a8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800124a:	eef1 7a67 	vneg.f32	s15, s15
 800124e:	e011      	b.n	8001274 <_ZN9BLDCMotor4moveEf+0x1cc>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800125c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001264:	dd03      	ble.n	800126e <_ZN9BLDCMotor4moveEf+0x1c6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800126c:	e002      	b.n	8001274 <_ZN9BLDCMotor4moveEf+0x1cc>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001280:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001284:	eef4 7a47 	vcmp.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d104      	bne.n	8001298 <_ZN9BLDCMotor4moveEf+0x1f0>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -target*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }else{
        current_sp = target; // if current/foc_current torque control
      }
      break;
 8001296:	e2b4      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
        else voltage.d = _constrain( -target*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	edd3 7a01 	vldr	s15, [r3, #4]
 800129e:	eeb1 7a67 	vneg.f32	s14, s15
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80012a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80012c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80012cc:	eef1 7a67 	vneg.f32	s15, s15
 80012d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d505      	bpl.n	80012e6 <_ZN9BLDCMotor4moveEf+0x23e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80012e0:	eef1 7a67 	vneg.f32	s15, s15
 80012e4:	e039      	b.n	800135a <_ZN9BLDCMotor4moveEf+0x2b2>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ec:	eeb1 7a67 	vneg.f32	s14, s15
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80012f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	ee07 3a90 	vmov	s15, r3
 8001302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001310:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800131a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	dd03      	ble.n	800132c <_ZN9BLDCMotor4moveEf+0x284>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800132a:	e016      	b.n	800135a <_ZN9BLDCMotor4moveEf+0x2b2>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001332:	eeb1 7a67 	vneg.f32	s14, s15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edd3 7a05 	vldr	s15, [r3, #20]
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 8001360:	e24f      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
        current_sp = target; // if current/foc_current torque control
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
      break;
 800136a:	e24a      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
 800136c:	3fddb3d7 	.word	0x3fddb3d7
 8001370:	3dd67750 	.word	0x3dd67750
 8001374:	c640e400 	.word	0xc640e400
    case MotionControlType::angle:
      // TODO sensor precision: this calculation is not numerically precise. The target value cannot express precise positions when
      //                        the angles are large. This results in not being able to command small changes at high position values.
      //                        to solve this, the delta-angle has to be calculated in a numerically precise way.
      // angle set point
      shaft_angle_sp = target;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	621a      	str	r2, [r3, #32]
      // calculate velocity set point
      shaft_velocity_sp = feed_forward_velocity + P_angle( shaft_angle_sp - shaft_angle );
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	ed93 8a02 	vldr	s16, [r3, #8]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	edd3 7a03 	vldr	s15, [r3, #12]
 8001398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	4610      	mov	r0, r2
 80013a2:	f002 f969 	bl	8003678 <_ZN13PIDControllerclEf>
 80013a6:	eef0 7a40 	vmov.f32	s15, s0
 80013aa:	ee78 7a27 	vadd.f32	s15, s16, s15
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edc3 7a07 	vstr	s15, [r3, #28]
      shaft_velocity_sp = _constrain(shaft_velocity_sp,-velocity_limit, velocity_limit);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	ed93 7a07 	vldr	s14, [r3, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80013c0:	eef1 7a67 	vneg.f32	s15, s15
 80013c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013cc:	d505      	bpl.n	80013da <_ZN9BLDCMotor4moveEf+0x332>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80013d4:	eef1 7a67 	vneg.f32	s15, s15
 80013d8:	e011      	b.n	80013fe <_ZN9BLDCMotor4moveEf+0x356>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80013e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	dd03      	ble.n	80013f8 <_ZN9BLDCMotor4moveEf+0x350>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80013f6:	e002      	b.n	80013fe <_ZN9BLDCMotor4moveEf+0x356>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	edc3 7a07 	vstr	s15, [r3, #28]
      // calculate the torque command - sensor precision: this calculation is ok, but based on bad value from previous calculation
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if voltage torque control
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	ed93 7a07 	vldr	s14, [r3, #28]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edd3 7a05 	vldr	s15, [r3, #20]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	4610      	mov	r0, r2
 8001420:	f002 f92a 	bl	8003678 <_ZN13PIDControllerclEf>
 8001424:	eef0 7a40 	vmov.f32	s15, s0
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edc3 7a06 	vstr	s15, [r3, #24]
      // if torque controlled through voltage
      if(torque_controller == TorqueControlType::voltage){
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001434:	2b00      	cmp	r3, #0
 8001436:	f040 81e1 	bne.w	80017fc <_ZN9BLDCMotor4moveEf+0x754>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001440:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001444:	eef4 7a47 	vcmp.f32	s15, s14
 8001448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144c:	d104      	bne.n	8001458 <_ZN9BLDCMotor4moveEf+0x3b0>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699a      	ldr	r2, [r3, #24]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	629a      	str	r2, [r3, #40]	@ 0x28
 8001456:	e045      	b.n	80014e4 <_ZN9BLDCMotor4moveEf+0x43c>
        else  voltage.q =  _constrain( current_sp*phase_resistance + voltage_bemf , -voltage_limit, voltage_limit);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	ed93 7a06 	vldr	s14, [r3, #24]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001464:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800146e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001478:	eef1 7a67 	vneg.f32	s15, s15
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d505      	bpl.n	8001492 <_ZN9BLDCMotor4moveEf+0x3ea>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800148c:	eef1 7a67 	vneg.f32	s15, s15
 8001490:	e025      	b.n	80014de <_ZN9BLDCMotor4moveEf+0x436>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	ed93 7a06 	vldr	s14, [r3, #24]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800149e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80014b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	dd03      	ble.n	80014c4 <_ZN9BLDCMotor4moveEf+0x41c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80014c2:	e00c      	b.n	80014de <_ZN9BLDCMotor4moveEf+0x436>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80014d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80014da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80014ea:	ed1f 7a5e 	vldr	s14, [pc, #-376]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 80014ee:	eef4 7a47 	vcmp.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d104      	bne.n	8001502 <_ZN9BLDCMotor4moveEf+0x45a>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }
      break;
 8001500:	e17c      	b.n	80017fc <_ZN9BLDCMotor4moveEf+0x754>
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 7a06 	vldr	s15, [r3, #24]
 8001508:	eeb1 7a67 	vneg.f32	s14, s15
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001522:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001536:	eef1 7a67 	vneg.f32	s15, s15
 800153a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d505      	bpl.n	8001550 <_ZN9BLDCMotor4moveEf+0x4a8>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800154a:	eef1 7a67 	vneg.f32	s15, s15
 800154e:	e039      	b.n	80015c4 <_ZN9BLDCMotor4moveEf+0x51c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edd3 7a06 	vldr	s15, [r3, #24]
 8001556:	eeb1 7a67 	vneg.f32	s14, s15
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001560:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001568:	ee07 3a90 	vmov	s15, r3
 800156c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800157a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158c:	dd03      	ble.n	8001596 <_ZN9BLDCMotor4moveEf+0x4ee>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001594:	e016      	b.n	80015c4 <_ZN9BLDCMotor4moveEf+0x51c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	edd3 7a06 	vldr	s15, [r3, #24]
 800159c:	eeb1 7a67 	vneg.f32	s14, s15
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80015a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80015c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 80015ca:	e117      	b.n	80017fc <_ZN9BLDCMotor4moveEf+0x754>
    case MotionControlType::velocity:
      // velocity set point - sensor precision: this calculation is numerically precise.
      shaft_velocity_sp = target;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	61da      	str	r2, [r3, #28]
      // calculate the torque command
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if current/foc_current torque control
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	4610      	mov	r0, r2
 80015f0:	f002 f842 	bl	8003678 <_ZN13PIDControllerclEf>
 80015f4:	eef0 7a40 	vmov.f32	s15, s0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edc3 7a06 	vstr	s15, [r3, #24]
      // if torque controlled through voltage control
      if(torque_controller == TorqueControlType::voltage){
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001604:	2b00      	cmp	r3, #0
 8001606:	f040 80fb 	bne.w	8001800 <_ZN9BLDCMotor4moveEf+0x758>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001610:	ed1f 7aa8 	vldr	s14, [pc, #-672]	@ 8001374 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001614:	eef4 7a47 	vcmp.f32	s15, s14
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	d104      	bne.n	8001628 <_ZN9BLDCMotor4moveEf+0x580>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
 8001626:	e045      	b.n	80016b4 <_ZN9BLDCMotor4moveEf+0x60c>
        else  voltage.q = _constrain( current_sp*phase_resistance + voltage_bemf , -voltage_limit, voltage_limit);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	ed93 7a06 	vldr	s14, [r3, #24]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800163e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001648:	eef1 7a67 	vneg.f32	s15, s15
 800164c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	d505      	bpl.n	8001662 <_ZN9BLDCMotor4moveEf+0x5ba>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800165c:	eef1 7a67 	vneg.f32	s15, s15
 8001660:	e025      	b.n	80016ae <_ZN9BLDCMotor4moveEf+0x606>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	ed93 7a06 	vldr	s14, [r3, #24]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800166e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	dd03      	ble.n	8001694 <_ZN9BLDCMotor4moveEf+0x5ec>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001692:	e00c      	b.n	80016ae <_ZN9BLDCMotor4moveEf+0x606>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	ed93 7a06 	vldr	s14, [r3, #24]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80016a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80016ba:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800180c <_ZN9BLDCMotor4moveEf+0x764>
 80016be:	eef4 7a47 	vcmp.f32	s15, s14
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d104      	bne.n	80016d2 <_ZN9BLDCMotor4moveEf+0x62a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }
      break;
 80016d0:	e096      	b.n	8001800 <_ZN9BLDCMotor4moveEf+0x758>
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80016d8:	eeb1 7a67 	vneg.f32	s14, s15
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	edd3 7a05 	vldr	s15, [r3, #20]
 80016e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80016fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001706:	eef1 7a67 	vneg.f32	s15, s15
 800170a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	d505      	bpl.n	8001720 <_ZN9BLDCMotor4moveEf+0x678>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800171a:	eef1 7a67 	vneg.f32	s15, s15
 800171e:	e039      	b.n	8001794 <_ZN9BLDCMotor4moveEf+0x6ec>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	edd3 7a06 	vldr	s15, [r3, #24]
 8001726:	eeb1 7a67 	vneg.f32	s14, s15
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001730:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800174a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	dd03      	ble.n	8001766 <_ZN9BLDCMotor4moveEf+0x6be>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001764:	e016      	b.n	8001794 <_ZN9BLDCMotor4moveEf+0x6ec>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edd3 7a06 	vldr	s15, [r3, #24]
 800176c:	eeb1 7a67 	vneg.f32	s14, s15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	edd3 7a05 	vldr	s15, [r3, #20]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 800179a:	e031      	b.n	8001800 <_ZN9BLDCMotor4moveEf+0x758>
    case MotionControlType::velocity_openloop:
      // velocity control in open loop - sensor precision: this calculation is numerically precise.
      shaft_velocity_sp = target;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	61da      	str	r2, [r3, #28]
      voltage.q = velocityOpenloop(shaft_velocity_sp); // returns the voltage that is set to the motor
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 fbda 	bl	8001f68 <_ZN9BLDCMotor16velocityOpenloopEf>
 80017b4:	eef0 7a40 	vmov.f32	s15, s0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
      voltage.d = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80017c6:	e01c      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
    case MotionControlType::angle_openloop:
      // angle control in open loop - 
      // TODO sensor precision: this calculation NOT numerically precise, and subject
      //                        to the same problems in small set-point changes at high angles 
      //                        as the closed loop version.
      shaft_angle_sp = target;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	621a      	str	r2, [r3, #32]
      voltage.q = angleOpenloop(shaft_angle_sp); // returns the voltage that is set to the motor
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	edd3 7a08 	vldr	s15, [r3, #32]
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fc98 	bl	8002110 <_ZN9BLDCMotor13angleOpenloopEf>
 80017e0:	eef0 7a40 	vmov.f32	s15, s0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
      voltage.d = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 80017f2:	e006      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
  if(motion_cnt++ < motion_downsample) return;
 80017f4:	bf00      	nop
 80017f6:	e004      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
  if(!enabled) return;
 80017f8:	bf00      	nop
 80017fa:	e002      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
      break;
 80017fc:	bf00      	nop
 80017fe:	e000      	b.n	8001802 <_ZN9BLDCMotor4moveEf+0x75a>
      break;
 8001800:	bf00      	nop
  }
}
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	ecbd 8b02 	vpop	{d8}
 800180a:	bd80      	pop	{r7, pc}
 800180c:	c640e400 	.word	0xc640e400

08001810 <_ZN9BLDCMotor15setPhaseVoltageEfff>:
// Function implementing Space Vector PWM and Sine PWM algorithms
//
// Function using sine approximation
// regular sin + cos ~300us    (no memory usage)
// approx  _sin + _cos ~110us  (400Byte ~ 20% of memory)
void BLDCMotor::setPhaseVoltage(float Uq, float Ud, float angle_el) {
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b08d      	sub	sp, #52	@ 0x34
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	ed87 0a02 	vstr	s0, [r7, #8]
 800181c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001820:	ed87 1a00 	vstr	s2, [r7]

  float center;
  int sector;
  float _ca,_sa;

  switch (foc_modulation)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800182a:	2b03      	cmp	r3, #3
 800182c:	f000 8111 	beq.w	8001a52 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x242>
 8001830:	2b03      	cmp	r3, #3
 8001832:	f300 837a 	bgt.w	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001836:	2b01      	cmp	r3, #1
 8001838:	dc03      	bgt.n	8001842 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x32>
 800183a:	2b00      	cmp	r3, #0
 800183c:	f280 827c 	bge.w	8001d38 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x528>
 8001840:	e373      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001842:	2b02      	cmp	r3, #2
 8001844:	f040 8371 	bne.w	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
  {
    case FOCModulationType::Trapezoid_120 :
      // see https://www.youtube.com/watch?v=InzXA7mWBWE Slide 5
      // determine the sector
      sector = 6 * (_normalizeAngle(angle_el + _PI_6 ) / _2PI); // adding PI/6 to align with other modes
 8001848:	edd7 7a00 	vldr	s15, [r7]
 800184c:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001b44 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x334>
 8001850:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001854:	eeb0 0a67 	vmov.f32	s0, s15
 8001858:	f001 fe80 	bl	800355c <_Z15_normalizeAnglef>
 800185c:	eeb0 7a40 	vmov.f32	s14, s0
 8001860:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8001b48 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x338>
 8001864:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001868:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800186c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001874:	ee17 3a90 	vmov	r3, s15
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
      // centering the voltages around either
      // modulation_centered == true > driver.voltage_limit/2
      // modulation_centered == false > or Adaptable centering, all phases drawn to 0 when Uq=0
      center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 8001880:	2b00      	cmp	r3, #0
 8001882:	d009      	beq.n	8001898 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x88>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800188a:	ed93 7a03 	vldr	s14, [r3, #12]
 800188e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	e001      	b.n	800189c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x8c>
 8001898:	edd7 7a02 	vldr	s15, [r7, #8]
 800189c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

      if(trap_120_map[sector][0]  == _HIGH_IMPEDANCE){
 80018a0:	49aa      	ldr	r1, [pc, #680]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80018a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d141      	bne.n	8001938 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x128>
        Ua= center;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        Ub = trap_120_map[sector][1] * Uq + center;
 80018bc:	49a3      	ldr	r1, [pc, #652]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80018be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_120_map[sector][2] * Uq + center;
 80018ec:	4997      	ldr	r1, [pc, #604]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80018ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	3308      	adds	r3, #8
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001906:	edd7 7a02 	vldr	s15, [r7, #8]
 800190a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800190e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_OFF, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // disable phase if possible
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3314      	adds	r3, #20
 800192c:	681c      	ldr	r4, [r3, #0]
 800192e:	2301      	movs	r3, #1
 8001930:	2201      	movs	r2, #1
 8001932:	2100      	movs	r1, #0
 8001934:	47a0      	blx	r4
        Ub = trap_120_map[sector][1] * Uq + center;
        Uc = center;
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF);// disable phase if possible
      }

    break;
 8001936:	e2f8      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
      }else if(trap_120_map[sector][1]  == _HIGH_IMPEDANCE){
 8001938:	4984      	ldr	r1, [pc, #528]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 800193a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	3304      	adds	r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d140      	bne.n	80019d0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x1c0>
        Ua = trap_120_map[sector][0] * Uq + center;
 800194e:	497f      	ldr	r1, [pc, #508]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	edd7 7a02 	vldr	s15, [r7, #8]
 800196a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = center;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001980:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        Uc = trap_120_map[sector][2] * Uq + center;
 8001984:	4971      	ldr	r1, [pc, #452]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	3308      	adds	r3, #8
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_OFF, PhaseState::PHASE_ON);// disable phase if possible
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3314      	adds	r3, #20
 80019c4:	681c      	ldr	r4, [r3, #0]
 80019c6:	2301      	movs	r3, #1
 80019c8:	2200      	movs	r2, #0
 80019ca:	2101      	movs	r1, #1
 80019cc:	47a0      	blx	r4
    break;
 80019ce:	e2ac      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
        Ua = trap_120_map[sector][0] * Uq + center;
 80019d0:	495e      	ldr	r1, [pc, #376]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80019d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019d4:	4613      	mov	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80019f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_120_map[sector][1] * Uq + center;
 80019fe:	4953      	ldr	r1, [pc, #332]	@ (8001b4c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	ee07 3a90 	vmov	s15, r3
 8001a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = center;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a32:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF);// disable phase if possible
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	3314      	adds	r3, #20
 8001a46:	681c      	ldr	r4, [r3, #0]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	47a0      	blx	r4
    break;
 8001a50:	e26b      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>

    case FOCModulationType::Trapezoid_150 :
      // see https://www.youtube.com/watch?v=InzXA7mWBWE Slide 8
      // determine the sector
      sector = 12 * (_normalizeAngle(angle_el + _PI_6 ) / _2PI); // adding PI/6 to align with other modes
 8001a52:	edd7 7a00 	vldr	s15, [r7]
 8001a56:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001b44 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x334>
 8001a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a62:	f001 fd7b 	bl	800355c <_Z15_normalizeAnglef>
 8001a66:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001b48 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x338>
 8001a6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a72:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7e:	ee17 3a90 	vmov	r3, s15
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
      // centering the voltages around either
      // modulation_centered == true > driver.voltage_limit/2
      // modulation_centered == false > or Adaptable centering, all phases drawn to 0 when Uq=0
      center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x292>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001a94:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a98:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa0:	e001      	b.n	8001aa6 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x296>
 8001aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aa6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

      if(trap_150_map[sector][0]  == _HIGH_IMPEDANCE){
 8001aaa:	4929      	ldr	r1, [pc, #164]	@ (8001b50 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001aac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d14a      	bne.n	8001b54 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x344>
        Ua= center;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ac2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001ac6:	4922      	ldr	r1, [pc, #136]	@ (8001b50 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001af6:	4916      	ldr	r1, [pc, #88]	@ (8001b50 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001afa:	4613      	mov	r3, r2
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	3308      	adds	r3, #8
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_OFF, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // disable phase if possible
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3314      	adds	r3, #20
 8001b36:	681c      	ldr	r4, [r3, #0]
 8001b38:	2301      	movs	r3, #1
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	47a0      	blx	r4
        Ub = trap_150_map[sector][1] * Uq + center;
        Uc = trap_150_map[sector][2] * Uq + center;
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // enable all phases
      }

    break;
 8001b40:	e1f3      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001b42:	bf00      	nop
 8001b44:	3f060a92 	.word	0x3f060a92
 8001b48:	40c90fdb 	.word	0x40c90fdb
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000048 	.word	0x20000048
      }else if(trap_150_map[sector][1]  == _HIGH_IMPEDANCE){
 8001b54:	4976      	ldr	r1, [pc, #472]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3304      	adds	r3, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d140      	bne.n	8001bec <_ZN9BLDCMotor15setPhaseVoltageEfff+0x3dc>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001b6a:	4971      	ldr	r1, [pc, #452]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b8a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = center;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b9c:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001ba0:	4963      	ldr	r1, [pc, #396]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	3308      	adds	r3, #8
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_OFF, PhaseState::PHASE_ON); // disable phase if possible
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3314      	adds	r3, #20
 8001be0:	681c      	ldr	r4, [r3, #0]
 8001be2:	2301      	movs	r3, #1
 8001be4:	2200      	movs	r2, #0
 8001be6:	2101      	movs	r1, #1
 8001be8:	47a0      	blx	r4
    break;
 8001bea:	e19e      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
      }else if(trap_150_map[sector][2]  == _HIGH_IMPEDANCE){
 8001bec:	4950      	ldr	r1, [pc, #320]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d140      	bne.n	8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x474>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001c02:	494b      	ldr	r1, [pc, #300]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001c04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001c30:	493f      	ldr	r1, [pc, #252]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3304      	adds	r3, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c52:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = center;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c64:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF); // disable phase if possible
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	3314      	adds	r3, #20
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2101      	movs	r1, #1
 8001c80:	47a0      	blx	r4
    break;
 8001c82:	e152      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001c84:	492a      	ldr	r1, [pc, #168]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001c86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c88:	4613      	mov	r3, r2
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	ee07 3a90 	vmov	s15, r3
 8001c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ca8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001cb2:	491f      	ldr	r1, [pc, #124]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	ee07 3a90 	vmov	s15, r3
 8001cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ccc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001ce2:	4913      	ldr	r1, [pc, #76]	@ (8001d30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001ce4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d04:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // enable all phases
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	3314      	adds	r3, #20
 8001d22:	681c      	ldr	r4, [r3, #0]
 8001d24:	2301      	movs	r3, #1
 8001d26:	2201      	movs	r2, #1
 8001d28:	2101      	movs	r1, #1
 8001d2a:	47a0      	blx	r4
    break;
 8001d2c:	e0fd      	b.n	8001f2a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001d2e:	bf00      	nop
 8001d30:	20000048 	.word	0x20000048
 8001d34:	3f5db3d7 	.word	0x3f5db3d7

    case FOCModulationType::SinePWM :
    case FOCModulationType::SpaceVectorPWM :
      // Sinusoidal PWM modulation
      // Inverse Park + Clarke transformation
      _sincos(angle_el, &_sa, &_ca);
 8001d38:	f107 0218 	add.w	r2, r7, #24
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	ed97 0a00 	vldr	s0, [r7]
 8001d48:	f001 fbea 	bl	8003520 <_Z7_sincosfPfS_>

      // Inverse park transform
      Ualpha =  _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 8001d4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d58:	edd7 6a05 	vldr	s13, [r7, #20]
 8001d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
      Ubeta =  _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 8001d6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d7a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

      // Clarke transform
      Ua = Ualpha;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
      Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001da0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001da4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001dae:	ed5f 6a1f 	vldr	s13, [pc, #-124]	@ 8001d34 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x524>
 8001db2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
      Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001dc6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001dca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001dd4:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8001d34 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x524>
 8001dd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168

      center = driver->voltage_limit/2;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001dec:	ed93 7a03 	vldr	s14, [r3, #12]
 8001df0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      if (foc_modulation == FOCModulationType::SpaceVectorPWM){
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d139      	bne.n	8001e7a <_ZN9BLDCMotor15setPhaseVoltageEfff+0x66a>
        // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
        // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
        // Midpoint Clamp
        float Umin = std::min(Ua, std::min(Ub, Uc));
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f000 faa2 	bl	8002364 <_ZSt3minIfERKT_S2_S2_>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4619      	mov	r1, r3
 8001e24:	4620      	mov	r0, r4
 8001e26:	f000 fa9d 	bl	8002364 <_ZSt3minIfERKT_S2_S2_>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
        float Umax = std::max(Ua, std::max(Ub, Uc));
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f000 faa6 	bl	8002396 <_ZSt3maxIfERKT_S2_S2_>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4620      	mov	r0, r4
 8001e50:	f000 faa1 	bl	8002396 <_ZSt3maxIfERKT_S2_S2_>
 8001e54:	4603      	mov	r3, r0
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	623b      	str	r3, [r7, #32]
        center -= (Umax+Umin) / 2;
 8001e5a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001e5e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e66:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001e72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e76:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      } 

      if (!modulation_centered) {
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d133      	bne.n	8001eec <_ZN9BLDCMotor15setPhaseVoltageEfff+0x6dc>
        float Umin = std::min(Ua, std::min(Ub, Uc));
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f000 fa63 	bl	8002364 <_ZSt3minIfERKT_S2_S2_>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f000 fa5e 	bl	8002364 <_ZSt3minIfERKT_S2_S2_>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61fb      	str	r3, [r7, #28]
        Ua -= Umin;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8001eb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub -= Umin;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001ec8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc -= Umin;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8001edc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        Ua += center;
        Ub += center;
        Uc += center;
      }

      break;
 8001eea:	e01d      	b.n	8001f28 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x718>
        Ua += center;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8001ef2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub += center;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001f06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc += center;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8001f1a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
      break;
 8001f28:	bf00      	nop

  }

  // set the voltages in driver
  driver->setPwm(Ua, Ub, Uc);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f8d3 115c 	ldr.w	r1, [r3, #348]	@ 0x15c
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	3310      	adds	r3, #16
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	edd2 7a58 	vldr	s15, [r2, #352]	@ 0x160
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	ed92 7a59 	vldr	s14, [r2, #356]	@ 0x164
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	edd2 6a5a 	vldr	s13, [r2, #360]	@ 0x168
 8001f4e:	eeb0 1a66 	vmov.f32	s2, s13
 8001f52:	eef0 0a47 	vmov.f32	s1, s14
 8001f56:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5a:	4608      	mov	r0, r1
 8001f5c:	4798      	blx	r3
}
 8001f5e:	bf00      	nop
 8001f60:	3734      	adds	r7, #52	@ 0x34
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop

08001f68 <_ZN9BLDCMotor16velocityOpenloopEf>:


// Function (iterative) generating open loop movement for target velocity
// - target_velocity - rad/s
// it uses voltage_limit variable
float BLDCMotor::velocityOpenloop(float target_velocity){
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	ed2d 8b02 	vpush	{d8}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	ed87 0a00 	vstr	s0, [r7]
  // get current timestamp
  //unsigned long now_us = _micros();
  // calculate the sample time from last call
  //float Ts = (now_us - open_loop_timestamp) * 1e-6f;
  float Ts = 1e-3f;
 8001f78:	4b62      	ldr	r3, [pc, #392]	@ (8002104 <_ZN9BLDCMotor16velocityOpenloopEf+0x19c>)
 8001f7a:	60fb      	str	r3, [r7, #12]
  // quick fix for strange cases (micros overflow + timestamp not defined)
  if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8001f7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f88:	d908      	bls.n	8001f9c <_ZN9BLDCMotor16velocityOpenloopEf+0x34>
 8001f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	dd01      	ble.n	8001fa0 <_ZN9BLDCMotor16velocityOpenloopEf+0x38>
 8001f9c:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <_ZN9BLDCMotor16velocityOpenloopEf+0x19c>)
 8001f9e:	60fb      	str	r3, [r7, #12]

  // calculate the necessary angle to achieve target velocity
  shaft_angle = _normalizeAngle(shaft_angle + target_velocity*Ts);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ed93 7a03 	vldr	s14, [r3, #12]
 8001fa6:	edd7 6a00 	vldr	s13, [r7]
 8001faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fba:	f001 facf 	bl	800355c <_Z15_normalizeAnglef>
 8001fbe:	eef0 7a40 	vmov.f32	s15, s0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	edc3 7a03 	vstr	s15, [r3, #12]
  // for display purposes
  shaft_velocity = target_velocity;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	615a      	str	r2, [r3, #20]

  // use voltage limit or current limit
  float Uq = voltage_limit;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd2:	60bb      	str	r3, [r7, #8]
  if(_isset(phase_resistance)){
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001fda:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002108 <_ZN9BLDCMotor16velocityOpenloopEf+0x1a0>
 8001fde:	eef4 7a47 	vcmp.f32	s15, s14
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d06b      	beq.n	80020c0 <_ZN9BLDCMotor16velocityOpenloopEf+0x158>
    Uq = _constrain(current_limit*phase_resistance + fabs(voltage_bemf),-voltage_limit, voltage_limit);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001ff4:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8002002:	f7fe fbd7 	bl	80007b4 <_ZSt4fabsf>
 8002006:	eef0 7a40 	vmov.f32	s15, s0
 800200a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002014:	eef1 7a67 	vneg.f32	s15, s15
 8002018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	d505      	bpl.n	800202e <_ZN9BLDCMotor16velocityOpenloopEf+0xc6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002028:	eef1 7a67 	vneg.f32	s15, s15
 800202c:	e031      	b.n	8002092 <_ZN9BLDCMotor16velocityOpenloopEf+0x12a>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800203a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002044:	eeb0 0a67 	vmov.f32	s0, s15
 8002048:	f7fe fbb4 	bl	80007b4 <_ZSt4fabsf>
 800204c:	eef0 7a40 	vmov.f32	s15, s0
 8002050:	ee38 7a27 	vadd.f32	s14, s16, s15
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800205a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800205e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002062:	dd03      	ble.n	800206c <_ZN9BLDCMotor16velocityOpenloopEf+0x104>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800206a:	e012      	b.n	8002092 <_ZN9BLDCMotor16velocityOpenloopEf+0x12a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002078:	ee27 8a27 	vmul.f32	s16, s14, s15
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	f7fe fb95 	bl	80007b4 <_ZSt4fabsf>
 800208a:	eef0 7a40 	vmov.f32	s15, s0
 800208e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002092:	edc7 7a02 	vstr	s15, [r7, #8]
    // recalculate the current  
    current.q = (Uq - fabs(voltage_bemf))/phase_resistance;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800209c:	eeb0 0a67 	vmov.f32	s0, s15
 80020a0:	f7fe fb88 	bl	80007b4 <_ZSt4fabsf>
 80020a4:	eeb0 7a40 	vmov.f32	s14, s0
 80020a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020ac:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80020b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  }
  // set the maximal allowed voltage (voltage_limit) with the necessary angle
  setPhaseVoltage(Uq,  0, _electricalAngle(shaft_angle, pole_pairs));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	3318      	adds	r3, #24
 80020c6:	681c      	ldr	r4, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d2:	4618      	mov	r0, r3
 80020d4:	eeb0 0a67 	vmov.f32	s0, s15
 80020d8:	f001 fa64 	bl	80035a4 <_Z16_electricalAnglefi>
 80020dc:	eef0 7a40 	vmov.f32	s15, s0
 80020e0:	eeb0 1a67 	vmov.f32	s2, s15
 80020e4:	eddf 0a09 	vldr	s1, [pc, #36]	@ 800210c <_ZN9BLDCMotor16velocityOpenloopEf+0x1a4>
 80020e8:	ed97 0a02 	vldr	s0, [r7, #8]
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	47a0      	blx	r4

  // save timestamp for next call
  //open_loop_timestamp = now_us;

  return Uq;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	ee07 3a90 	vmov	s15, r3
}
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	ecbd 8b02 	vpop	{d8}
 8002102:	bd90      	pop	{r4, r7, pc}
 8002104:	3a83126f 	.word	0x3a83126f
 8002108:	c640e400 	.word	0xc640e400
 800210c:	00000000 	.word	0x00000000

08002110 <_ZN9BLDCMotor13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float BLDCMotor::angleOpenloop(float target_angle){
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	ed2d 8b02 	vpush	{d8}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	ed87 0a00 	vstr	s0, [r7]
  // get current timestamp
  //unsigned long now_us = _micros();
  // calculate the sample time from last call
  //float Ts = (now_us - open_loop_timestamp) * 1e-6f;
  float Ts = 1e-3f;
 8002120:	4b8d      	ldr	r3, [pc, #564]	@ (8002358 <_ZN9BLDCMotor13angleOpenloopEf+0x248>)
 8002122:	60fb      	str	r3, [r7, #12]
  // quick fix for strange cases (micros overflow + timestamp not defined)
  if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002124:	edd7 7a03 	vldr	s15, [r7, #12]
 8002128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800212c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002130:	d908      	bls.n	8002144 <_ZN9BLDCMotor13angleOpenloopEf+0x34>
 8002132:	edd7 7a03 	vldr	s15, [r7, #12]
 8002136:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800213a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	dd01      	ble.n	8002148 <_ZN9BLDCMotor13angleOpenloopEf+0x38>
 8002144:	4b84      	ldr	r3, [pc, #528]	@ (8002358 <_ZN9BLDCMotor13angleOpenloopEf+0x248>)
 8002146:	60fb      	str	r3, [r7, #12]
  // calculate the necessary angle to move from current position towards target angle
  // with maximal velocity (velocity_limit)
  // TODO sensor precision: this calculation is not numerically precise. The angle can grow to the point
  //                        where small position changes are no longer captured by the precision of floats
  //                        when the total position is large.
  if(abs( target_angle - shaft_angle ) > abs(velocity_limit*Ts)){
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	edd3 7a03 	vldr	s15, [r3, #12]
 800214e:	ed97 7a00 	vldr	s14, [r7]
 8002152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	f7fe fb1b 	bl	8000794 <_ZSt3absf>
 800215e:	eeb0 8a40 	vmov.f32	s16, s0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8002168:	edd7 7a03 	vldr	s15, [r7, #12]
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	f7fe fb0e 	bl	8000794 <_ZSt3absf>
 8002178:	eef0 7a40 	vmov.f32	s15, s0
 800217c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	bfcc      	ite	gt
 8002186:	2301      	movgt	r3, #1
 8002188:	2300      	movle	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d03b      	beq.n	8002208 <_ZN9BLDCMotor13angleOpenloopEf+0xf8>
    shaft_angle += _sign(target_angle - shaft_angle) * abs( velocity_limit )*Ts;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	edd3 7a03 	vldr	s15, [r3, #12]
 8002196:	ed97 7a00 	vldr	s14, [r7]
 800219a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a6:	d502      	bpl.n	80021ae <_ZN9BLDCMotor13angleOpenloopEf+0x9e>
 80021a8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80021ac:	e010      	b.n	80021d0 <_ZN9BLDCMotor13angleOpenloopEf+0xc0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80021b4:	ed97 7a00 	vldr	s14, [r7]
 80021b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	dd02      	ble.n	80021cc <_ZN9BLDCMotor13angleOpenloopEf+0xbc>
 80021c6:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 80021ca:	e001      	b.n	80021d0 <_ZN9BLDCMotor13angleOpenloopEf+0xc0>
 80021cc:	ed9f 8a63 	vldr	s16, [pc, #396]	@ 800235c <_ZN9BLDCMotor13angleOpenloopEf+0x24c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	f7fe fadb 	bl	8000794 <_ZSt3absf>
 80021de:	eef0 7a40 	vmov.f32	s15, s0
 80021e2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80021f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	edc3 7a03 	vstr	s15, [r3, #12]
    shaft_velocity = velocity_limit;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	615a      	str	r2, [r3, #20]
 8002206:	e006      	b.n	8002216 <_ZN9BLDCMotor13angleOpenloopEf+0x106>
  }else{
    shaft_angle = target_angle;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	60da      	str	r2, [r3, #12]
    shaft_velocity = 0;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	615a      	str	r2, [r3, #20]
  }

  // use voltage limit or current limit
  float Uq = voltage_limit;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221a:	60bb      	str	r3, [r7, #8]
  if(_isset(phase_resistance)){
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002222:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002360 <_ZN9BLDCMotor13angleOpenloopEf+0x250>
 8002226:	eef4 7a47 	vcmp.f32	s15, s14
 800222a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222e:	d06b      	beq.n	8002308 <_ZN9BLDCMotor13angleOpenloopEf+0x1f8>
    Uq = _constrain(current_limit*phase_resistance + fabs(voltage_bemf),-voltage_limit, voltage_limit);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800223c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	f7fe fab3 	bl	80007b4 <_ZSt4fabsf>
 800224e:	eef0 7a40 	vmov.f32	s15, s0
 8002252:	ee38 7a27 	vadd.f32	s14, s16, s15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800225c:	eef1 7a67 	vneg.f32	s15, s15
 8002260:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002268:	d505      	bpl.n	8002276 <_ZN9BLDCMotor13angleOpenloopEf+0x166>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002270:	eef1 7a67 	vneg.f32	s15, s15
 8002274:	e031      	b.n	80022da <_ZN9BLDCMotor13angleOpenloopEf+0x1ca>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002282:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800228c:	eeb0 0a67 	vmov.f32	s0, s15
 8002290:	f7fe fa90 	bl	80007b4 <_ZSt4fabsf>
 8002294:	eef0 7a40 	vmov.f32	s15, s0
 8002298:	ee38 7a27 	vadd.f32	s14, s16, s15
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80022a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	dd03      	ble.n	80022b4 <_ZN9BLDCMotor13angleOpenloopEf+0x1a4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80022b2:	e012      	b.n	80022da <_ZN9BLDCMotor13angleOpenloopEf+0x1ca>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80022c0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022ca:	eeb0 0a67 	vmov.f32	s0, s15
 80022ce:	f7fe fa71 	bl	80007b4 <_ZSt4fabsf>
 80022d2:	eef0 7a40 	vmov.f32	s15, s0
 80022d6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80022da:	edc7 7a02 	vstr	s15, [r7, #8]
    // recalculate the current  
    current.q = (Uq - fabs(voltage_bemf))/phase_resistance;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80022e4:	eeb0 0a67 	vmov.f32	s0, s15
 80022e8:	f7fe fa64 	bl	80007b4 <_ZSt4fabsf>
 80022ec:	eeb0 7a40 	vmov.f32	s14, s0
 80022f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80022fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  }
  // set the maximal allowed voltage (voltage_limit) with the necessary angle
  // sensor precision: this calculation is OK due to the normalisation
  setPhaseVoltage(Uq,  0, _electricalAngle(_normalizeAngle(shaft_angle), pole_pairs));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3318      	adds	r3, #24
 800230e:	681c      	ldr	r4, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	edd3 7a03 	vldr	s15, [r3, #12]
 8002316:	eeb0 0a67 	vmov.f32	s0, s15
 800231a:	f001 f91f 	bl	800355c <_Z15_normalizeAnglef>
 800231e:	eef0 7a40 	vmov.f32	s15, s0
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	4618      	mov	r0, r3
 8002328:	eeb0 0a67 	vmov.f32	s0, s15
 800232c:	f001 f93a 	bl	80035a4 <_Z16_electricalAnglefi>
 8002330:	eef0 7a40 	vmov.f32	s15, s0
 8002334:	eeb0 1a67 	vmov.f32	s2, s15
 8002338:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800235c <_ZN9BLDCMotor13angleOpenloopEf+0x24c>
 800233c:	ed97 0a02 	vldr	s0, [r7, #8]
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	47a0      	blx	r4

  // save timestamp for next call
  //open_loop_timestamp = now_us;

  return Uq;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	ee07 3a90 	vmov	s15, r3
}
 800234a:	eeb0 0a67 	vmov.f32	s0, s15
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	ecbd 8b02 	vpop	{d8}
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	3a83126f 	.word	0x3a83126f
 800235c:	00000000 	.word	0x00000000
 8002360:	c640e400 	.word	0xc640e400

08002364 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	edd3 7a00 	vldr	s15, [r3]
 800237a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002382:	d501      	bpl.n	8002388 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	e000      	b.n	800238a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002388:	687b      	ldr	r3, [r7, #4]
    }
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	ed93 7a00 	vldr	s14, [r3]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	edd3 7a00 	vldr	s15, [r3]
 80023ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b4:	d501      	bpl.n	80023ba <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	e000      	b.n	80023bc <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80023ba:	687b      	ldr	r3, [r7, #4]
    }
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <cppInit>:
 */
void doMotor(char *cmd) {
	//command.motor(&motor, cmd);
}

void cppInit() {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 80023cc:	4824      	ldr	r0, [pc, #144]	@ (8002460 <cppInit+0x98>)
 80023ce:	f003 fde9 	bl	8005fa4 <HAL_TIM_Base_Start_IT>
	// on pins 12,11,10,9,8
	// pin 12 is used as ground
	//pinMode(12,OUTPUT);
	//pinMode(12,LOW);

	encoder.init();
 80023d2:	4824      	ldr	r0, [pc, #144]	@ (8002464 <cppInit+0x9c>)
 80023d4:	f001 fece 	bl	8004174 <_ZN7Encoder4initEv>
	//encoder.enableInterrupts(doA, doB);

	// link the motor to the sensor
	motor.linkSensor(&encoder);
 80023d8:	4922      	ldr	r1, [pc, #136]	@ (8002464 <cppInit+0x9c>)
 80023da:	4823      	ldr	r0, [pc, #140]	@ (8002468 <cppInit+0xa0>)
 80023dc:	f000 fddc 	bl	8002f98 <_ZN8FOCMotor10linkSensorEP6Sensor>

	// driver config
	// power supply voltage [V]
	driver.voltage_power_supply = 8;
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <cppInit+0xa4>)
 80023e2:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80023e6:	609a      	str	r2, [r3, #8]
	driver.init();
 80023e8:	4820      	ldr	r0, [pc, #128]	@ (800246c <cppInit+0xa4>)
 80023ea:	f001 fb1f 	bl	8003a2c <_ZN14BLDCDriver3PWM4initEv>
	// link the motor and the driver
	motor.linkDriver(&driver);
 80023ee:	491f      	ldr	r1, [pc, #124]	@ (800246c <cppInit+0xa4>)
 80023f0:	481d      	ldr	r0, [pc, #116]	@ (8002468 <cppInit+0xa0>)
 80023f2:	f7fe fa2d 	bl	8000850 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>

	// aligning voltage [V]
	motor.voltage_sensor_align = 1;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <cppInit+0xa0>)
 80023f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40

	// set motion control loop to be used
	//motor.controller = MotionControlType::angle_openloop;
	//motor.controller = MotionControlType::velocity_openloop;
	//motor.controller = MotionControlType::velocity;
	motor.controller = MotionControlType::angle;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <cppInit+0xa0>)
 8002400:	2202      	movs	r2, #2
 8002402:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	// contoller configuration
	// default parameters in defaults.h

	// velocity PI controller parameters
	motor.PID_velocity.P = 0.005f;
 8002406:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <cppInit+0xa0>)
 8002408:	4a19      	ldr	r2, [pc, #100]	@ (8002470 <cppInit+0xa8>)
 800240a:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	motor.PID_velocity.I = 1.0f;
 800240e:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <cppInit+0xa0>)
 8002410:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002414:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor.PID_velocity.D = 0;
 8002418:	4b13      	ldr	r3, [pc, #76]	@ (8002468 <cppInit+0xa0>)
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	// default voltage_power_supply
	motor.voltage_limit = 8;
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <cppInit+0xa0>)
 8002424:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8002428:	659a      	str	r2, [r3, #88]	@ 0x58
	// jerk control using voltage voltage ramp
	// default value is 300 volts per sec  ~ 0.3V per millisecond
	motor.PID_velocity.output_ramp = 300;
 800242a:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <cppInit+0xa0>)
 800242c:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <cppInit+0xac>)
 800242e:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

	// velocity low pass filtering time constant
	motor.LPF_velocity.Tf = 0.01f;
 8002432:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <cppInit+0xa0>)
 8002434:	4a10      	ldr	r2, [pc, #64]	@ (8002478 <cppInit+0xb0>)
 8002436:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	// angle P controller
	motor.P_angle.P = 30;
 800243a:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <cppInit+0xa0>)
 800243c:	4a0f      	ldr	r2, [pc, #60]	@ (800247c <cppInit+0xb4>)
 800243e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	//  maximal velocity of the position control
	motor.velocity_limit = 50;
 8002442:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <cppInit+0xa0>)
 8002444:	4a0e      	ldr	r2, [pc, #56]	@ (8002480 <cppInit+0xb8>)
 8002446:	661a      	str	r2, [r3, #96]	@ 0x60

	// initialize motor
	motor.init();
 8002448:	4807      	ldr	r0, [pc, #28]	@ (8002468 <cppInit+0xa0>)
 800244a:	f7fe fa11 	bl	8000870 <_ZN9BLDCMotor4initEv>
	// align encoder and start FOC
	motor.initFOC();
 800244e:	4806      	ldr	r0, [pc, #24]	@ (8002468 <cppInit+0xa0>)
 8002450:	f7fe fb32 	bl	8000ab8 <_ZN9BLDCMotor7initFOCEv>

	HAL_Delay(1000);
 8002454:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002458:	f001 ff48 	bl	80042ec <HAL_Delay>
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200004c0 	.word	0x200004c0
 8002464:	200003b8 	.word	0x200003b8
 8002468:	200001e0 	.word	0x200001e0
 800246c:	20000354 	.word	0x20000354
 8002470:	3ba3d70a 	.word	0x3ba3d70a
 8002474:	43960000 	.word	0x43960000
 8002478:	3c23d70a 	.word	0x3c23d70a
 800247c:	41f00000 	.word	0x41f00000
 8002480:	42480000 	.word	0x42480000

08002484 <cppLoop>:

void cppLoop() {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
	// the faster you run this function the better
	// Arduino UNO loop  ~1kHz
	// Bluepill loop ~10kHz
	//motor.loopFOC();

	motor_processing_flag = true;
 800248a:	4b17      	ldr	r3, [pc, #92]	@ (80024e8 <cppLoop+0x64>)
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < 10; i++){
 8002490:	2300      	movs	r3, #0
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	e020      	b.n	80024d8 <cppLoop+0x54>
		target_angle = 6.28;
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <cppLoop+0x68>)
 8002498:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <cppLoop+0x6c>)
 800249a:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 800249c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024a0:	f001 ff24 	bl	80042ec <HAL_Delay>
		target_angle = 0;
 80024a4:	4b11      	ldr	r3, [pc, #68]	@ (80024ec <cppLoop+0x68>)
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80024ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024b0:	f001 ff1c 	bl	80042ec <HAL_Delay>
		target_angle = -6.28;
 80024b4:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <cppLoop+0x68>)
 80024b6:	4a0f      	ldr	r2, [pc, #60]	@ (80024f4 <cppLoop+0x70>)
 80024b8:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80024ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024be:	f001 ff15 	bl	80042ec <HAL_Delay>
		target_angle = 0;
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <cppLoop+0x68>)
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
		HAL_Delay(1000);
 80024ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80024ce:	f001 ff0d 	bl	80042ec <HAL_Delay>
	for(uint8_t i = 0; i < 10; i++){
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	3301      	adds	r3, #1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	2b09      	cmp	r3, #9
 80024dc:	d9db      	bls.n	8002496 <cppLoop+0x12>
	}

	motor.disable();
 80024de:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <cppLoop+0x74>)
 80024e0:	f7fe fa5e 	bl	80009a0 <_ZN9BLDCMotor7disableEv>
	while(1){}
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <cppLoop+0x60>
 80024e8:	20000420 	.word	0x20000420
 80024ec:	2000041c 	.word	0x2000041c
 80024f0:	40c8f5c3 	.word	0x40c8f5c3
 80024f4:	c0c8f5c3 	.word	0xc0c8f5c3
 80024f8:	200001e0 	.word	0x200001e0

080024fc <cppTimerInterrupt1ms>:
	// motor.monitor();

	// user communication
}

void cppTimerInterrupt1ms() {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0

	//motor.absoluteZeroSearchInterruptHandler();

	if(motor_processing_flag == true){
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <cppTimerInterrupt1ms+0x30>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10e      	bne.n	8002526 <cppTimerInterrupt1ms+0x2a>
		motor.loopFOC();
 8002508:	4809      	ldr	r0, [pc, #36]	@ (8002530 <cppTimerInterrupt1ms+0x34>)
 800250a:	f7fe fd85 	bl	8001018 <_ZN9BLDCMotor7loopFOCEv>
		motor.move(target_angle);
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <cppTimerInterrupt1ms+0x38>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	eeb0 0a67 	vmov.f32	s0, s15
 8002518:	4805      	ldr	r0, [pc, #20]	@ (8002530 <cppTimerInterrupt1ms+0x34>)
 800251a:	f7fe fdc5 	bl	80010a8 <_ZN9BLDCMotor4moveEf>

		mon_angle = target_angle;
 800251e:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <cppTimerInterrupt1ms+0x38>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a05      	ldr	r2, [pc, #20]	@ (8002538 <cppTimerInterrupt1ms+0x3c>)
 8002524:	6013      	str	r3, [r2, #0]

	}

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000420 	.word	0x20000420
 8002530:	200001e0 	.word	0x200001e0
 8002534:	2000041c 	.word	0x2000041c
 8002538:	20000424 	.word	0x20000424

0800253c <_Z41__static_initialization_and_destruction_0v>:
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af04      	add	r7, sp, #16
BLDCMotor motor(8);
 8002542:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8002588 <_Z41__static_initialization_and_destruction_0v+0x4c>
 8002546:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002588 <_Z41__static_initialization_and_destruction_0v+0x4c>
 800254a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8002588 <_Z41__static_initialization_and_destruction_0v+0x4c>
 800254e:	2108      	movs	r1, #8
 8002550:	480e      	ldr	r0, [pc, #56]	@ (800258c <_Z41__static_initialization_and_destruction_0v+0x50>)
 8002552:	f7fe f93f 	bl	80007d4 <_ZN9BLDCMotorC1Eifff>
BLDCDriver3PWM driver(9, 10, 11, p_enable_1); // mini v1.1
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <_Z41__static_initialization_and_destruction_0v+0x54>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	9202      	str	r2, [sp, #8]
 800255e:	2200      	movs	r2, #0
 8002560:	9201      	str	r2, [sp, #4]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	230b      	movs	r3, #11
 8002566:	220a      	movs	r2, #10
 8002568:	2109      	movs	r1, #9
 800256a:	480a      	ldr	r0, [pc, #40]	@ (8002594 <_Z41__static_initialization_and_destruction_0v+0x58>)
 800256c:	f001 f9d4 	bl	8003918 <_ZN14BLDCDriver3PWMC1EiiiP7GPIOPinS1_S1_>
Encoder encoder(2, 3, 75);
 8002570:	2300      	movs	r3, #0
 8002572:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8002598 <_Z41__static_initialization_and_destruction_0v+0x5c>
 8002576:	2203      	movs	r2, #3
 8002578:	2102      	movs	r1, #2
 800257a:	4808      	ldr	r0, [pc, #32]	@ (800259c <_Z41__static_initialization_and_destruction_0v+0x60>)
 800257c:	f001 fca0 	bl	8003ec0 <_ZN7EncoderC1Eiifi>
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	c640e400 	.word	0xc640e400
 800258c:	200001e0 	.word	0x200001e0
 8002590:	200000e0 	.word	0x200000e0
 8002594:	20000354 	.word	0x20000354
 8002598:	42960000 	.word	0x42960000
 800259c:	200003b8 	.word	0x200003b8

080025a0 <_GLOBAL__sub_I_motor>:
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	f7ff ffca 	bl	800253c <_Z41__static_initialization_and_destruction_0v>
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	cppTimerInterrupt1ms();
 80025b4:	f7ff ffa2 	bl	80024fc <cppTimerInterrupt1ms>

	mon_cnt++;
 80025b8:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a07      	ldr	r2, [pc, #28]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025c0:	6013      	str	r3, [r2, #0]
	if(mon_cnt > 100000) mon_cnt = 0;
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a06      	ldr	r2, [pc, #24]	@ (80025e0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d902      	bls.n	80025d2 <HAL_TIM_PeriodElapsedCallback+0x26>
 80025cc:	4b03      	ldr	r3, [pc, #12]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000594 	.word	0x20000594
 80025e0:	000186a0 	.word	0x000186a0

080025e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e8:	f001 fe1a 	bl	8004220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ec:	f000 f80f 	bl	800260e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025f0:	f000 f9c2 	bl	8002978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80025f4:	f000 f990 	bl	8002918 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80025f8:	f000 f904 	bl	8002804 <MX_TIM2_Init>
  MX_TIM1_Init();
 80025fc:	f000 f85c 	bl	80026b8 <MX_TIM1_Init>
  MX_TIM6_Init();
 8002600:	f000 f954 	bl	80028ac <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  cppInit();
 8002604:	f7ff fee0 	bl	80023c8 <cppInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cppLoop();
 8002608:	f7ff ff3c 	bl	8002484 <cppLoop>
 800260c:	e7fc      	b.n	8002608 <main+0x24>

0800260e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b096      	sub	sp, #88	@ 0x58
 8002612:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002614:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002618:	2228      	movs	r2, #40	@ 0x28
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f005 fb3f 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002622:	f107 031c 	add.w	r3, r7, #28
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002642:	2302      	movs	r3, #2
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002646:	2301      	movs	r3, #1
 8002648:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800264a:	2310      	movs	r3, #16
 800264c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800264e:	2300      	movs	r3, #0
 8002650:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002652:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002656:	4618      	mov	r0, r3
 8002658:	f002 f908 	bl	800486c <HAL_RCC_OscConfig>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002662:	f000 f9c9 	bl	80029f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002666:	230f      	movs	r3, #15
 8002668:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002672:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002676:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800267c:	f107 031c 	add.w	r3, r7, #28
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f003 f900 	bl	8005888 <HAL_RCC_ClockConfig>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800268e:	f000 f9b3 	bl	80029f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002696:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8002698:	2300      	movs	r3, #0
 800269a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 fb04 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80026aa:	f000 f9a5 	bl	80029f8 <Error_Handler>
  }
}
 80026ae:	bf00      	nop
 80026b0:	3758      	adds	r7, #88	@ 0x58
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b096      	sub	sp, #88	@ 0x58
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]
 80026da:	615a      	str	r2, [r3, #20]
 80026dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	222c      	movs	r2, #44	@ 0x2c
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 fadb 	bl	8007ca0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026ea:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <MX_TIM1_Init+0x144>)
 80026ec:	4a44      	ldr	r2, [pc, #272]	@ (8002800 <MX_TIM1_Init+0x148>)
 80026ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026f0:	4b42      	ldr	r3, [pc, #264]	@ (80027fc <MX_TIM1_Init+0x144>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f6:	4b41      	ldr	r3, [pc, #260]	@ (80027fc <MX_TIM1_Init+0x144>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 79;
 80026fc:	4b3f      	ldr	r3, [pc, #252]	@ (80027fc <MX_TIM1_Init+0x144>)
 80026fe:	224f      	movs	r2, #79	@ 0x4f
 8002700:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002702:	4b3e      	ldr	r3, [pc, #248]	@ (80027fc <MX_TIM1_Init+0x144>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002708:	4b3c      	ldr	r3, [pc, #240]	@ (80027fc <MX_TIM1_Init+0x144>)
 800270a:	2200      	movs	r2, #0
 800270c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b3b      	ldr	r3, [pc, #236]	@ (80027fc <MX_TIM1_Init+0x144>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002714:	4839      	ldr	r0, [pc, #228]	@ (80027fc <MX_TIM1_Init+0x144>)
 8002716:	f003 fca1 	bl	800605c <HAL_TIM_PWM_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002720:	f000 f96a 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002730:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002734:	4619      	mov	r1, r3
 8002736:	4831      	ldr	r0, [pc, #196]	@ (80027fc <MX_TIM1_Init+0x144>)
 8002738:	f004 fc96 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8002742:	f000 f959 	bl	80029f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002746:	2360      	movs	r3, #96	@ 0x60
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800274e:	2300      	movs	r3, #0
 8002750:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002752:	2300      	movs	r3, #0
 8002754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002762:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002766:	2200      	movs	r2, #0
 8002768:	4619      	mov	r1, r3
 800276a:	4824      	ldr	r0, [pc, #144]	@ (80027fc <MX_TIM1_Init+0x144>)
 800276c:	f003 fff0 	bl	8006750 <HAL_TIM_PWM_ConfigChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8002776:	f000 f93f 	bl	80029f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800277a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800277e:	2204      	movs	r2, #4
 8002780:	4619      	mov	r1, r3
 8002782:	481e      	ldr	r0, [pc, #120]	@ (80027fc <MX_TIM1_Init+0x144>)
 8002784:	f003 ffe4 	bl	8006750 <HAL_TIM_PWM_ConfigChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 800278e:	f000 f933 	bl	80029f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002792:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002796:	2208      	movs	r2, #8
 8002798:	4619      	mov	r1, r3
 800279a:	4818      	ldr	r0, [pc, #96]	@ (80027fc <MX_TIM1_Init+0x144>)
 800279c:	f003 ffd8 	bl	8006750 <HAL_TIM_PWM_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80027a6:	f000 f927 	bl	80029f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4807      	ldr	r0, [pc, #28]	@ (80027fc <MX_TIM1_Init+0x144>)
 80027e0:	f004 fcb0 	bl	8007144 <HAL_TIMEx_ConfigBreakDeadTime>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 80027ea:	f000 f905 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027ee:	4803      	ldr	r0, [pc, #12]	@ (80027fc <MX_TIM1_Init+0x144>)
 80027f0:	f000 f9b2 	bl	8002b58 <HAL_TIM_MspPostInit>

}
 80027f4:	bf00      	nop
 80027f6:	3758      	adds	r7, #88	@ 0x58
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000428 	.word	0x20000428
 8002800:	40012c00 	.word	0x40012c00

08002804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	@ 0x30
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800280a:	f107 030c 	add.w	r3, r7, #12
 800280e:	2224      	movs	r2, #36	@ 0x24
 8002810:	2100      	movs	r1, #0
 8002812:	4618      	mov	r0, r3
 8002814:	f005 fa44 	bl	8007ca0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002818:	463b      	mov	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]
 8002820:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002822:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002824:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800282a:	4b1f      	ldr	r3, [pc, #124]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002836:	4b1c      	ldr	r3, [pc, #112]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800283c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283e:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800284a:	2303      	movs	r3, #3
 800284c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002852:	2301      	movs	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002862:	2301      	movs	r3, #1
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	4619      	mov	r1, r3
 8002874:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002876:	f003 fd35 	bl	80062e4 <HAL_TIM_Encoder_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002880:	f000 f8ba 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002884:	2300      	movs	r3, #0
 8002886:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	4619      	mov	r1, r3
 8002890:	4805      	ldr	r0, [pc, #20]	@ (80028a8 <MX_TIM2_Init+0xa4>)
 8002892:	f004 fbe9 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800289c:	f000 f8ac 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	3730      	adds	r7, #48	@ 0x30
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000474 	.word	0x20000474

080028ac <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	1d3b      	adds	r3, r7, #4
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028bc:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028be:	4a15      	ldr	r2, [pc, #84]	@ (8002914 <MX_TIM6_Init+0x68>)
 80028c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80028c2:	4b13      	ldr	r3, [pc, #76]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80028ce:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028d4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028d8:	2200      	movs	r2, #0
 80028da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028dc:	480c      	ldr	r0, [pc, #48]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028de:	f003 fb09 	bl	8005ef4 <HAL_TIM_Base_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028e8:	f000 f886 	bl	80029f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4805      	ldr	r0, [pc, #20]	@ (8002910 <MX_TIM6_Init+0x64>)
 80028fa:	f004 fbb5 	bl	8007068 <HAL_TIMEx_MasterConfigSynchronization>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002904:	f000 f878 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200004c0 	.word	0x200004c0
 8002914:	40001000 	.word	0x40001000

08002918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800291c:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 800291e:	4a15      	ldr	r2, [pc, #84]	@ (8002974 <MX_USART2_UART_Init+0x5c>)
 8002920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002922:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 8002924:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002948:	4b09      	ldr	r3, [pc, #36]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_USART2_UART_Init+0x58>)
 800295c:	f004 fc88 	bl	8007270 <HAL_UART_Init>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002966:	f000 f847 	bl	80029f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	2000050c 	.word	0x2000050c
 8002974:	40004400 	.word	0x40004400

08002978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297e:	f107 030c 	add.w	r3, r7, #12
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	60da      	str	r2, [r3, #12]
 800298c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800298e:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <MX_GPIO_Init+0x7c>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <MX_GPIO_Init+0x7c>)
 8002994:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002998:	6153      	str	r3, [r2, #20]
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <MX_GPIO_Init+0x7c>)
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <MX_GPIO_Init+0x7c>)
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	4a12      	ldr	r2, [pc, #72]	@ (80029f4 <MX_GPIO_Init+0x7c>)
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b0:	6153      	str	r3, [r2, #20]
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <MX_GPIO_Init+0x7c>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80029c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029c8:	f001 ff38 	bl	800483c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d2:	2301      	movs	r3, #1
 80029d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 030c 	add.w	r3, r7, #12
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e8:	f001 fdb6 	bl	8004558 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80029ec:	bf00      	nop
 80029ee:	3720      	adds	r7, #32
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40021000 	.word	0x40021000

080029f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029fc:	b672      	cpsid	i
}
 80029fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <Error_Handler+0x8>

08002a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <HAL_MspInit+0x44>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <HAL_MspInit+0x44>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6193      	str	r3, [r2, #24]
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_MspInit+0x44>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <HAL_MspInit+0x44>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <HAL_MspInit+0x44>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_MspInit+0x44>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <HAL_TIM_PWM_MspInit+0x38>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10b      	bne.n	8002a76 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	4a09      	ldr	r2, [pc, #36]	@ (8002a88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a68:	6193      	str	r3, [r2, #24]
 8002a6a:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40012c00 	.word	0x40012c00
 8002a88:	40021000 	.word	0x40021000

08002a8c <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	@ 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aac:	d128      	bne.n	8002b00 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aae:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a15      	ldr	r2, [pc, #84]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	61d3      	str	r3, [r2, #28]
 8002aba:	4b13      	ldr	r3, [pc, #76]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b10      	ldr	r3, [pc, #64]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad0:	6153      	str	r3, [r2, #20]
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aee:	2301      	movs	r3, #1
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 0314 	add.w	r3, r7, #20
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afc:	f001 fd2c 	bl	8004558 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	@ 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40021000 	.word	0x40021000

08002b0c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_TIM_Base_MspInit+0x44>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d113      	bne.n	8002b46 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <HAL_TIM_Base_MspInit+0x48>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <HAL_TIM_Base_MspInit+0x48>)
 8002b24:	f043 0310 	orr.w	r3, r3, #16
 8002b28:	61d3      	str	r3, [r2, #28]
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <HAL_TIM_Base_MspInit+0x48>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2036      	movs	r0, #54	@ 0x36
 8002b3c:	f001 fcd5 	bl	80044ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8002b40:	2036      	movs	r0, #54	@ 0x36
 8002b42:	f001 fcee 	bl	8004522 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40001000 	.word	0x40001000
 8002b54:	40021000 	.word	0x40021000

08002b58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b60:	f107 030c 	add.w	r3, r7, #12
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <HAL_TIM_MspPostInit+0x68>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d11d      	bne.n	8002bb6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7a:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	4a11      	ldr	r2, [pc, #68]	@ (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b84:	6153      	str	r3, [r2, #20]
 8002b86:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <HAL_TIM_MspPostInit+0x6c>)
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b92:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002b96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002ba4:	2306      	movs	r3, #6
 8002ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f107 030c 	add.w	r3, r7, #12
 8002bac:	4619      	mov	r1, r3
 8002bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb2:	f001 fcd1 	bl	8004558 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002bb6:	bf00      	nop
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40021000 	.word	0x40021000

08002bc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a18      	ldr	r2, [pc, #96]	@ (8002c48 <HAL_UART_MspInit+0x80>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d129      	bne.n	8002c3e <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bea:	4b18      	ldr	r3, [pc, #96]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a17      	ldr	r2, [pc, #92]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b15      	ldr	r3, [pc, #84]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	4b12      	ldr	r3, [pc, #72]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	4a11      	ldr	r2, [pc, #68]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	6153      	str	r3, [r2, #20]
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <HAL_UART_MspInit+0x84>)
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002c1a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c3a:	f001 fc8d 	bl	8004558 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c3e:	bf00      	nop
 8002c40:	3728      	adds	r7, #40	@ 0x28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40004400 	.word	0x40004400
 8002c4c:	40021000 	.word	0x40021000

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c54:	bf00      	nop
 8002c56:	e7fd      	b.n	8002c54 <NMI_Handler+0x4>

08002c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <HardFault_Handler+0x4>

08002c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <MemManage_Handler+0x4>

08002c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <BusFault_Handler+0x4>

08002c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <UsageFault_Handler+0x4>

08002c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca6:	f001 fb01 	bl	80042ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <TIM6_DAC1_IRQHandler+0x10>)
 8002cb6:	f003 fc49 	bl	800654c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200004c0 	.word	0x200004c0

08002cc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return 1;
 8002cc8:	2301      	movs	r3, #1
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_kill>:

int _kill(int pid, int sig)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cde:	f005 f83b 	bl	8007d58 <__errno>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2216      	movs	r2, #22
 8002ce6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_exit>:

void _exit (int status)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ffe7 	bl	8002cd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d06:	bf00      	nop
 8002d08:	e7fd      	b.n	8002d06 <_exit+0x12>
	...

08002d0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d14:	4a14      	ldr	r2, [pc, #80]	@ (8002d68 <_sbrk+0x5c>)
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <_sbrk+0x60>)
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d28:	4b11      	ldr	r3, [pc, #68]	@ (8002d70 <_sbrk+0x64>)
 8002d2a:	4a12      	ldr	r2, [pc, #72]	@ (8002d74 <_sbrk+0x68>)
 8002d2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <_sbrk+0x64>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d207      	bcs.n	8002d4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d3c:	f005 f80c 	bl	8007d58 <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	220c      	movs	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d4a:	e009      	b.n	8002d60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d4c:	4b08      	ldr	r3, [pc, #32]	@ (8002d70 <_sbrk+0x64>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <_sbrk+0x64>)
 8002d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20003000 	.word	0x20003000
 8002d6c:	00000400 	.word	0x00000400
 8002d70:	20000598 	.word	0x20000598
 8002d74:	200006f0 	.word	0x200006f0

08002d78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <SystemInit+0x20>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	4a05      	ldr	r2, [pc, #20]	@ (8002d98 <SystemInit+0x20>)
 8002d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <_ZN8FOCMotorC1Ev>:
//#include "../../communication/SimpleFOCDebug.h"

/**
 * Default constructor - setting all variabels to default values
 */
FOCMotor::FOCMotor()
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	4a74      	ldr	r2, [pc, #464]	@ (8002f78 <_ZN8FOCMotorC1Ev+0x1dc>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	336c      	adds	r3, #108	@ 0x6c
 8002dce:	eeb2 2a00 	vmov.f32	s4, #32	@ 0x41000000  8.0
 8002dd2:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002dd6:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002dda:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8002f80 <_ZN8FOCMotorC1Ev+0x1e4>
 8002dde:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc18 	bl	8003618 <_ZN13PIDControllerC1Efffff>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3390      	adds	r3, #144	@ 0x90
 8002dec:	eeb2 2a00 	vmov.f32	s4, #32	@ 0x41000000  8.0
 8002df0:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002df4:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002df8:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8002f80 <_ZN8FOCMotorC1Ev+0x1e4>
 8002dfc:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fc09 	bl	8003618 <_ZN13PIDControllerC1Efffff>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	33b4      	adds	r3, #180	@ 0xb4
 8002e0a:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8002f84 <_ZN8FOCMotorC1Ev+0x1e8>
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fbde 	bl	80035d0 <_ZN13LowPassFilterC1Ef>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	33c0      	adds	r3, #192	@ 0xc0
 8002e18:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8002f84 <_ZN8FOCMotorC1Ev+0x1e8>
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fbd7 	bl	80035d0 <_ZN13LowPassFilterC1Ef>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	33cc      	adds	r3, #204	@ 0xcc
 8002e26:	eeb2 2a00 	vmov.f32	s4, #32	@ 0x41000000  8.0
 8002e2a:	eddf 1a57 	vldr	s3, [pc, #348]	@ 8002f88 <_ZN8FOCMotorC1Ev+0x1ec>
 8002e2e:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002e32:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002e36:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fbec 	bl	8003618 <_ZN13PIDControllerC1Efffff>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	33f0      	adds	r3, #240	@ 0xf0
 8002e44:	eeb3 2a04 	vmov.f32	s4, #52	@ 0x41a00000  20.0
 8002e48:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002e4c:	ed9f 1a4b 	vldr	s2, [pc, #300]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002e50:	eddf 0a4a 	vldr	s1, [pc, #296]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002e54:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fbdd 	bl	8003618 <_ZN13PIDControllerC1Efffff>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8002e64:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8002f84 <_ZN8FOCMotorC1Ev+0x1e8>
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fbb1 	bl	80035d0 <_ZN13LowPassFilterC1Ef>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8002e74:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8002f7c <_ZN8FOCMotorC1Ev+0x1e0>
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fba9 	bl	80035d0 <_ZN13LowPassFilterC1Ef>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a3e      	ldr	r2, [pc, #248]	@ (8002f8c <_ZN8FOCMotorC1Ev+0x1f0>)
 8002e92:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2264      	movs	r2, #100	@ 0x64
 8002eaa:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2209      	movs	r2, #9
 8002ec2:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2204      	movs	r2, #4
 8002eca:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2263      	movs	r2, #99	@ 0x63
 8002ed2:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
  // maximum angular velocity to be used for positioning 
  velocity_limit = DEF_VEL_LIM;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f90 <_ZN8FOCMotorC1Ev+0x1f4>)
 8002ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  // maximum voltage to be set to the motor
  voltage_limit = DEF_POWER_SUPPLY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8002eea:	659a      	str	r2, [r3, #88]	@ 0x58
  // not set on the begining
  current_limit = DEF_CURRENT_LIM;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

  // index search velocity
  velocity_index_search = DEF_INDEX_SEARCH_TARGET_VELOCITY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002efa:	645a      	str	r2, [r3, #68]	@ 0x44
  // sensor and motor align voltage
  voltage_sensor_align = DEF_VOLTAGE_SENSOR_ALIGN;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a25      	ldr	r2, [pc, #148]	@ (8002f94 <_ZN8FOCMotorC1Ev+0x1f8>)
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40

  // default modulation is SinePWM
  foc_modulation = FOCModulationType::SinePWM;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

  // default target value
  target = 0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	605a      	str	r2, [r3, #4]
  voltage.d = 0;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24
  voltage.q = 0;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	629a      	str	r2, [r3, #40]	@ 0x28
  // current target values
  current_sp = 0;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	619a      	str	r2, [r3, #24]
  current.q = 0;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
  current.d = 0;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	62da      	str	r2, [r3, #44]	@ 0x2c

  // voltage bemf 
  voltage_bemf = 0;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	635a      	str	r2, [r3, #52]	@ 0x34

  // Initialize phase voltages U alpha and U beta used for inverse Park and Clarke transform
  Ualpha = 0;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	639a      	str	r2, [r3, #56]	@ 0x38
  Ubeta = 0;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  //monitor_port 
  //monitor_port = nullptr;
  //sensor 
  sensor_offset = 0.0f;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  sensor = nullptr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
  //current sensor 
  current_sense = nullptr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
}
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	08007e10 	.word	0x08007e10
 8002f7c:	00000000 	.word	0x00000000
 8002f80:	43960000 	.word	0x43960000
 8002f84:	3ba3d70a 	.word	0x3ba3d70a
 8002f88:	447a0000 	.word	0x447a0000
 8002f8c:	c640e400 	.word	0xc640e400
 8002f90:	41a00000 	.word	0x41a00000
 8002f94:	40400000 	.word	0x40400000

08002f98 <_ZN8FOCMotor10linkSensorEP6Sensor>:


/**
	Sensor linking method
*/
void FOCMotor::linkSensor(Sensor* _sensor) {
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  sensor = _sensor;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <_ZN8FOCMotor10shaftAngleEv>:
void FOCMotor::linkCurrentSense(CurrentSense* _current_sense) {
  current_sense = _current_sense;
}

// shaft angle calculation
float FOCMotor::shaftAngle() {
 8002fb6:	b590      	push	{r4, r7, lr}
 8002fb8:	ed2d 8b02 	vpush	{d8}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_angle;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <_ZN8FOCMotor10shaftAngleEv+0x1e>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd2:	e024      	b.n	800301e <_ZN8FOCMotor10shaftAngleEv+0x68>
  return sensor_direction*LPF_angle(sensor->getAngle()) - sensor_offset;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4798      	blx	r3
 8002ffe:	eef0 7a40 	vmov.f32	s15, s0
 8003002:	eeb0 0a67 	vmov.f32	s0, s15
 8003006:	4620      	mov	r0, r4
 8003008:	f000 faf6 	bl	80035f8 <_ZN13LowPassFilterclEf>
 800300c:	eef0 7a40 	vmov.f32	s15, s0
 8003010:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 800301a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800301e:	eeb0 0a67 	vmov.f32	s0, s15
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	ecbd 8b02 	vpop	{d8}
 800302a:	bd90      	pop	{r4, r7, pc}

0800302c <_ZN8FOCMotor13shaftVelocityEv>:
// shaft velocity calculation
float FOCMotor::shaftVelocity() {
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	ed2d 8b02 	vpush	{d8}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_velocity;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <_ZN8FOCMotor13shaftVelocityEv+0x1e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	edd3 7a05 	vldr	s15, [r3, #20]
 8003048:	e01f      	b.n	800308a <_ZN8FOCMotor13shaftVelocityEv+0x5e>
  return sensor_direction*LPF_velocity(sensor->getVelocity());
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8003050:	ee07 3a90 	vmov	s15, r3
 8003054:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f503 748a 	add.w	r4, r3, #276	@ 0x114
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4610      	mov	r0, r2
 8003072:	4798      	blx	r3
 8003074:	eef0 7a40 	vmov.f32	s15, s0
 8003078:	eeb0 0a67 	vmov.f32	s0, s15
 800307c:	4620      	mov	r0, r4
 800307e:	f000 fabb 	bl	80035f8 <_ZN13LowPassFilterclEf>
 8003082:	eef0 7a40 	vmov.f32	s15, s0
 8003086:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	ecbd 8b02 	vpop	{d8}
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <_ZN8FOCMotor15electricalAngleEv>:

float FOCMotor::electricalAngle(){
 8003098:	b580      	push	{r7, lr}
 800309a:	ed2d 8b02 	vpush	{d8}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return electrical_angle;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d103      	bne.n	80030b6 <_ZN8FOCMotor15electricalAngleEv+0x1e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80030b4:	e025      	b.n	8003102 <_ZN8FOCMotor15electricalAngleEv+0x6a>
  return  _normalizeAngle( (float)(sensor_direction * pole_pairs) * sensor->getMechanicalAngle()  - zero_electric_angle );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 80030bc:	461a      	mov	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4610      	mov	r0, r2
 80030e0:	4798      	blx	r3
 80030e2:	eef0 7a40 	vmov.f32	s15, s0
 80030e6:	ee28 7a27 	vmul.f32	s14, s16, s15
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 80030f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f4:	eeb0 0a67 	vmov.f32	s0, s15
 80030f8:	f000 fa30 	bl	800355c <_Z15_normalizeAnglef>
 80030fc:	eef0 7a40 	vmov.f32	s15, s0
 8003100:	bf00      	nop
}
 8003102:	eeb0 0a67 	vmov.f32	s0, s15
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	ecbd 8b02 	vpop	{d8}
 800310e:	bd80      	pop	{r7, pc}

08003110 <_ZN6Sensor6updateEv>:
#include "main.h"
//#include "../time_utils.h"



void Sensor::update() {
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	331c      	adds	r3, #28
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
 8003124:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 8003128:	edd7 7a03 	vldr	s15, [r7, #12]
 800312c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	d42e      	bmi.n	8003194 <_ZN6Sensor6updateEv+0x84>
        return; // TODO signal error, e.g. via a flag and counter
    //angle_prev_ts = _micros();
    float d_angle = val - angle_prev;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	edd3 7a03 	vldr	s15, [r3, #12]
 800313c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003144:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1;
 8003148:	ed97 0a02 	vldr	s0, [r7, #8]
 800314c:	f7fd fb22 	bl	8000794 <_ZSt3absf>
 8003150:	eef0 7a40 	vmov.f32	s15, s0
 8003154:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800319c <_ZN6Sensor6updateEv+0x8c>
 8003158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003160:	bfcc      	ite	gt
 8003162:	2301      	movgt	r3, #1
 8003164:	2300      	movle	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00f      	beq.n	800318c <_ZN6Sensor6updateEv+0x7c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	edd7 7a02 	vldr	s15, [r7, #8]
 8003174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	dd02      	ble.n	8003184 <_ZN6Sensor6updateEv+0x74>
 800317e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003182:	e000      	b.n	8003186 <_ZN6Sensor6updateEv+0x76>
 8003184:	2201      	movs	r2, #1
 8003186:	441a      	add	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	61da      	str	r2, [r3, #28]
    angle_prev = val;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e000      	b.n	8003196 <_ZN6Sensor6updateEv+0x86>
        return; // TODO signal error, e.g. via a flag and counter
 8003194:	bf00      	nop
}
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40a0d97c 	.word	0x40a0d97c

080031a0 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
    // calculate sample time
    //float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
    float Ts = 1e-3f;
 80031a8:	4b2c      	ldr	r3, [pc, #176]	@ (800325c <_ZN6Sensor11getVelocityEv+0xbc>)
 80031aa:	60fb      	str	r3, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b8:	d50e      	bpl.n	80031d8 <_ZN6Sensor11getVelocityEv+0x38>
        vel_angle_prev = angle_prev;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	619a      	str	r2, [r3, #24]
        return velocity;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	e038      	b.n	800324a <_ZN6Sensor11getVelocityEv+0xaa>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	edd3 7a01 	vldr	s15, [r3, #4]
 80031de:	ed97 7a03 	vldr	s14, [r7, #12]
 80031e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	d502      	bpl.n	80031f2 <_ZN6Sensor11getVelocityEv+0x52>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	e02b      	b.n	800324a <_ZN6Sensor11getVelocityEv+0xaa>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003204:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003260 <_ZN6Sensor11getVelocityEv+0xc0>
 8003208:	ee27 7a87 	vmul.f32	s14, s15, s14
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	edd3 6a03 	vldr	s13, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	edd3 7a05 	vldr	s15, [r3, #20]
 8003218:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800321c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003220:	ed97 7a03 	vldr	s14, [r7, #12]
 8003224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	619a      	str	r2, [r3, #24]
    return velocity;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
}
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	3a83126f 	.word	0x3a83126f
 8003260:	40c90fdb 	.word	0x40c90fdb

08003264 <_ZN6Sensor4initEv>:



void Sensor::init() {
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	331c      	adds	r3, #28
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	4798      	blx	r3
    //delayMicroseconds(1);
    HAL_Delay(1);
 8003278:	2001      	movs	r0, #1
 800327a:	f001 f837 	bl	80042ec <HAL_Delay>
    vel_angle_prev = getSensorAngle(); // call again
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	331c      	adds	r3, #28
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	eef0 7a40 	vmov.f32	s15, s0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	edc3 7a05 	vstr	s15, [r3, #20]
    //vel_angle_prev_ts = _micros();
    //delay(1);
    getSensorAngle(); // call once
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	331c      	adds	r3, #28
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	4798      	blx	r3
    //delayMicroseconds(1);
    HAL_Delay(1);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f001 f823 	bl	80042ec <HAL_Delay>
    angle_prev = getSensorAngle(); // call again
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	331c      	adds	r3, #28
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
 80032b2:	eef0 7a40 	vmov.f32	s15, s0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	edc3 7a03 	vstr	s15, [r3, #12]
    //angle_prev_ts = _micros();
}
 80032bc:	bf00      	nop
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
    return angle_prev;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	ee07 3a90 	vmov	s15, r3
}
 80032d4:	eeb0 0a67 	vmov.f32	s0, s15
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	ee07 3a90 	vmov	s15, r3
 80032f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032f8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003318 <_ZN6Sensor8getAngleEv+0x34>
 80032fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	edd3 7a03 	vldr	s15, [r3, #12]
 8003306:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800330a:	eeb0 0a67 	vmov.f32	s0, s15
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40c90fdb 	.word	0x40c90fdb
 800331c:	00000000 	.word	0x00000000

08003320 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd f9c7 	bl	80006c0 <__aeabi_i2d>
 8003332:	a30f      	add	r3, pc, #60	@ (adr r3, 8003370 <_ZN6Sensor15getPreciseAngleEv+0x50>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fc ff46 	bl	80001c8 <__aeabi_dmul>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4614      	mov	r4, r2
 8003342:	461d      	mov	r5, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f9cb 	bl	80006e4 <__aeabi_f2d>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4620      	mov	r0, r4
 8003354:	4629      	mov	r1, r5
 8003356:	f7fd f867 	bl	8000428 <__adddf3>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003362:	eeb0 0a47 	vmov.f32	s0, s14
 8003366:	eef0 0a67 	vmov.f32	s1, s15
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bdb0      	pop	{r4, r5, r7, pc}
 8003370:	60000000 	.word	0x60000000
 8003374:	401921fb 	.word	0x401921fb

08003378 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <_ZSt4fmodff>:
  using ::fmod;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80033b0:	edc7 0a00 	vstr	s1, [r7]
 80033b4:	edd7 0a00 	vldr	s1, [r7]
 80033b8:	ed97 0a01 	vldr	s0, [r7, #4]
 80033bc:	f004 fb10 	bl	80079e0 <fmodf>
 80033c0:	eef0 7a40 	vmov.f32	s15, s0
 80033c4:	eeb0 0a67 	vmov.f32	s0, s15
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <_Z4_sinf>:
#include <algorithm>

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  int32_t t1, t2;
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 80033da:	edd7 7a01 	vldr	s15, [r7, #4]
 80033de:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80034b4 <_Z4_sinf+0xe4>
 80033e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033ea:	ee17 3a90 	vmov	r3, s15
 80033ee:	60fb      	str	r3, [r7, #12]
  int frac = i & 0xff;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0a1b      	lsrs	r3, r3, #8
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b3f      	cmp	r3, #63	@ 0x3f
 8003402:	d80b      	bhi.n	800341c <_Z4_sinf+0x4c>
    t1 = (int32_t)sine_array[i]; t2 = (int32_t)sine_array[i+1];
 8003404:	4a2c      	ldr	r2, [pc, #176]	@ (80034b8 <_Z4_sinf+0xe8>)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	3301      	adds	r3, #1
 8003412:	4a29      	ldr	r2, [pc, #164]	@ (80034b8 <_Z4_sinf+0xe8>)
 8003414:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003418:	613b      	str	r3, [r7, #16]
 800341a:	e033      	b.n	8003484 <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003420:	d80e      	bhi.n	8003440 <_Z4_sinf+0x70>
    t1 = (int32_t)sine_array[128 - i]; t2 = (int32_t)sine_array[127 - i];
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8003428:	4a23      	ldr	r2, [pc, #140]	@ (80034b8 <_Z4_sinf+0xe8>)
 800342a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8003436:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <_Z4_sinf+0xe8>)
 8003438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	e021      	b.n	8003484 <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2bbf      	cmp	r3, #191	@ 0xbf
 8003444:	d80e      	bhi.n	8003464 <_Z4_sinf+0x94>
    t1 = -(int32_t)sine_array[-128 + i]; t2 = -(int32_t)sine_array[-127 + i];
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b80      	subs	r3, #128	@ 0x80
 800344a:	4a1b      	ldr	r2, [pc, #108]	@ (80034b8 <_Z4_sinf+0xe8>)
 800344c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003450:	425b      	negs	r3, r3
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3b7f      	subs	r3, #127	@ 0x7f
 8003458:	4a17      	ldr	r2, [pc, #92]	@ (80034b8 <_Z4_sinf+0xe8>)
 800345a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800345e:	425b      	negs	r3, r3
 8003460:	613b      	str	r3, [r7, #16]
 8003462:	e00f      	b.n	8003484 <_Z4_sinf+0xb4>
  }
  else {
    t1 = -(int32_t)sine_array[256 - i]; t2 = -(int32_t)sine_array[255 - i];
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800346a:	4a13      	ldr	r2, [pc, #76]	@ (80034b8 <_Z4_sinf+0xe8>)
 800346c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003470:	425b      	negs	r3, r3
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800347a:	4a0f      	ldr	r2, [pc, #60]	@ (80034b8 <_Z4_sinf+0xe8>)
 800347c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003480:	425b      	negs	r3, r3
 8003482:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	fb02 f303 	mul.w	r3, r2, r3
 8003490:	121a      	asrs	r2, r3, #8
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	4413      	add	r3, r2
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800349e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80034bc <_Z4_sinf+0xec>
 80034a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80034a6:	eeb0 0a67 	vmov.f32	s0, s15
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	4622f983 	.word	0x4622f983
 80034b8:	200000e8 	.word	0x200000e8
 80034bc:	38000000 	.word	0x38000000

080034c0 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 80034ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80034ce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003518 <_Z4_cosf+0x58>
 80034d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034d6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80034da:	edd7 7a03 	vldr	s15, [r7, #12]
 80034de:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800351c <_Z4_cosf+0x5c>
 80034e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ea:	dd06      	ble.n	80034fa <_Z4_cosf+0x3a>
 80034ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80034f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800351c <_Z4_cosf+0x5c>
 80034f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034f8:	e001      	b.n	80034fe <_Z4_cosf+0x3e>
 80034fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80034fe:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 8003502:	ed97 0a03 	vldr	s0, [r7, #12]
 8003506:	f7ff ff63 	bl	80033d0 <_Z4_sinf>
 800350a:	eef0 7a40 	vmov.f32	s15, s0
}
 800350e:	eeb0 0a67 	vmov.f32	s0, s15
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	3fc90fdb 	.word	0x3fc90fdb
 800351c:	40c90fdb 	.word	0x40c90fdb

08003520 <_Z7_sincosfPfS_>:


__attribute__((weak)) void _sincos(float a, float* s, float* c){
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	ed87 0a03 	vstr	s0, [r7, #12]
 800352a:	60b8      	str	r0, [r7, #8]
 800352c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 800352e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003532:	f7ff ff4d 	bl	80033d0 <_Z4_sinf>
 8003536:	eef0 7a40 	vmov.f32	s15, s0
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 8003540:	ed97 0a03 	vldr	s0, [r7, #12]
 8003544:	f7ff ffbc 	bl	80034c0 <_Z4_cosf>
 8003548:	eef0 7a40 	vmov.f32	s15, s0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	edc3 7a00 	vstr	s15, [r3]
}
 8003552:	bf00      	nop
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8003566:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 80035a0 <_Z15_normalizeAnglef+0x44>
 800356a:	ed97 0a01 	vldr	s0, [r7, #4]
 800356e:	f7ff ff1a 	bl	80033a6 <_ZSt4fmodff>
 8003572:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8003576:	edd7 7a03 	vldr	s15, [r7, #12]
 800357a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	db02      	blt.n	800358a <_Z15_normalizeAnglef+0x2e>
 8003584:	edd7 7a03 	vldr	s15, [r7, #12]
 8003588:	e005      	b.n	8003596 <_Z15_normalizeAnglef+0x3a>
 800358a:	edd7 7a03 	vldr	s15, [r7, #12]
 800358e:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 80035a0 <_Z15_normalizeAnglef+0x44>
 8003592:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8003596:	eeb0 0a67 	vmov.f32	s0, s15
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40c90fdb 	.word	0x40c90fdb

080035a4 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80035ae:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	ee07 3a90 	vmov	s15, r3
 80035b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80035be:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80035c2:	eeb0 0a67 	vmov.f32	s0, s15
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <_ZN13LowPassFilterC1Ef>:
#include "lowpass_filter.h"

LowPassFilter::LowPassFilter(float time_constant)
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
{
    //timestamp_prev = _micros();
}
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	ed87 0a00 	vstr	s0, [r7]
    float y = alpha*y_prev + (1.0f - alpha)*x;
    y_prev = y;
    timestamp_prev = timestamp;
    return y;
    */
	return x;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	ee07 3a90 	vmov	s15, r3
}
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_ZN13PIDControllerC1Efffff>:
#include "pid.h"

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	6178      	str	r0, [r7, #20]
 8003620:	ed87 0a04 	vstr	s0, [r7, #16]
 8003624:	edc7 0a03 	vstr	s1, [r7, #12]
 8003628:	ed87 1a02 	vstr	s2, [r7, #8]
 800362c:	edc7 1a01 	vstr	s3, [r7, #4]
 8003630:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	601a      	str	r2, [r3, #0]
    , I(I)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	605a      	str	r2, [r3, #4]
    , D(D)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	61da      	str	r2, [r3, #28]
{
    //timestamp_prev = _micros();
}
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <_ZN13PIDControllerclEf>:

// PID controller function
float PIDController::operator() (float error){
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	@ 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    //unsigned long timestamp_now = _micros();
    //float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
    float Ts = 1e-3f;
 8003684:	4b7c      	ldr	r3, [pc, #496]	@ (8003878 <_ZN13PIDControllerclEf+0x200>)
 8003686:	61fb      	str	r3, [r7, #28]
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8003688:	edd7 7a07 	vldr	s15, [r7, #28]
 800368c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d908      	bls.n	80036a8 <_ZN13PIDControllerclEf+0x30>
 8003696:	edd7 7a07 	vldr	s15, [r7, #28]
 800369a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800369e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	dd01      	ble.n	80036ac <_ZN13PIDControllerclEf+0x34>
 80036a8:	4b73      	ldr	r3, [pc, #460]	@ (8003878 <_ZN13PIDControllerclEf+0x200>)
 80036aa:	61fb      	str	r3, [r7, #28]

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	ed97 7a00 	vldr	s14, [r7]
 80036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ba:	edc7 7a05 	vstr	s15, [r7, #20]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	ed93 7a07 	vldr	s14, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	edd3 6a01 	vldr	s13, [r3, #4]
 80036ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80036ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80036d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	ed93 6a05 	vldr	s12, [r3, #20]
 80036e0:	edd7 7a00 	vldr	s15, [r7]
 80036e4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80036e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f0:	edc7 7a04 	vstr	s15, [r7, #16]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	edd3 7a04 	vldr	s15, [r3, #16]
 80036fa:	eef1 7a67 	vneg.f32	s15, s15
 80036fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d505      	bpl.n	8003718 <_ZN13PIDControllerclEf+0xa0>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003712:	eef1 7a67 	vneg.f32	s15, s15
 8003716:	e00f      	b.n	8003738 <_ZN13PIDControllerclEf+0xc0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	edd3 7a04 	vldr	s15, [r3, #16]
 800371e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	dd03      	ble.n	8003734 <_ZN13PIDControllerclEf+0xbc>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003732:	e001      	b.n	8003738 <_ZN13PIDControllerclEf+0xc0>
 8003734:	edd7 7a04 	vldr	s15, [r7, #16]
 8003738:	edc7 7a04 	vstr	s15, [r7, #16]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	edd3 7a05 	vldr	s15, [r3, #20]
 8003748:	edd7 6a00 	vldr	s13, [r7]
 800374c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003750:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003754:	ed97 7a07 	vldr	s14, [r7, #28]
 8003758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375c:	edc7 7a03 	vstr	s15, [r7, #12]

    // sum all the components
    float output = proportional + integral + derivative;
 8003760:	ed97 7a05 	vldr	s14, [r7, #20]
 8003764:	edd7 7a04 	vldr	s15, [r7, #16]
 8003768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	edc7 7a06 	vstr	s15, [r7, #24]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	edd3 7a04 	vldr	s15, [r3, #16]
 800377e:	eef1 7a67 	vneg.f32	s15, s15
 8003782:	ed97 7a06 	vldr	s14, [r7, #24]
 8003786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	d505      	bpl.n	800379c <_ZN13PIDControllerclEf+0x124>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	edd3 7a04 	vldr	s15, [r3, #16]
 8003796:	eef1 7a67 	vneg.f32	s15, s15
 800379a:	e00f      	b.n	80037bc <_ZN13PIDControllerclEf+0x144>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	edd3 7a04 	vldr	s15, [r3, #16]
 80037a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80037a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	dd03      	ble.n	80037b8 <_ZN13PIDControllerclEf+0x140>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80037b6:	e001      	b.n	80037bc <_ZN13PIDControllerclEf+0x144>
 80037b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80037bc:	edc7 7a06 	vstr	s15, [r7, #24]

    // if output ramp defined
    if(output_ramp > 0){
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80037c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ce:	dd3f      	ble.n	8003850 <_ZN13PIDControllerclEf+0x1d8>
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80037d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80037da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80037de:	ed97 7a07 	vldr	s14, [r7, #28]
 80037e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037e6:	edc7 7a02 	vstr	s15, [r7, #8]
        if (output_rate > output_ramp)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80037f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80037f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	dd0e      	ble.n	800381c <_ZN13PIDControllerclEf+0x1a4>
            output = output_prev + output_ramp*Ts;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	ed93 7a06 	vldr	s14, [r3, #24]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	edd3 6a03 	vldr	s13, [r3, #12]
 800380a:	edd7 7a07 	vldr	s15, [r7, #28]
 800380e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003816:	edc7 7a06 	vstr	s15, [r7, #24]
 800381a:	e019      	b.n	8003850 <_ZN13PIDControllerclEf+0x1d8>
        else if (output_rate < -output_ramp)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003822:	eef1 7a67 	vneg.f32	s15, s15
 8003826:	ed97 7a02 	vldr	s14, [r7, #8]
 800382a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003832:	d50d      	bpl.n	8003850 <_ZN13PIDControllerclEf+0x1d8>
            output = output_prev - output_ramp*Ts;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	ed93 7a06 	vldr	s14, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003840:	edd7 7a07 	vldr	s15, [r7, #28]
 8003844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800384c:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    // saving for the next pass
    integral_prev = integral;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	619a      	str	r2, [r3, #24]
    error_prev = error;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	615a      	str	r2, [r3, #20]
    //timestamp_prev = timestamp_now;
    return output;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	ee07 3a90 	vmov	s15, r3
}
 8003868:	eeb0 0a67 	vmov.f32	s0, s15
 800386c:	3724      	adds	r7, #36	@ 0x24
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	3a83126f 	.word	0x3a83126f

0800387c <_ZN13PIDController5resetEv>:

void PIDController::reset(){
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
    integral_prev = 0.0f;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	61da      	str	r2, [r3, #28]
    output_prev = 0.0f;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
    error_prev = 0.0f;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	615a      	str	r2, [r3, #20]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_ZN10BLDCDriver4typeEv>:
         * @param sa - phase C state : active / disabled ( high impedance )
        */
        virtual void setPhaseState(PhaseState sa, PhaseState sb, PhaseState sc) = 0;

        /** driver type getter function */
        virtual DriverType type() override { return DriverType::BLDC; };
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	2301      	movs	r3, #1
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
	...

080038c0 <_ZN9FOCDriverC1Ev>:
};

/**
 * FOC driver class
 */
class FOCDriver{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	4a09      	ldr	r2, [pc, #36]	@ (80038f0 <_ZN9FOCDriverC1Ev+0x30>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	741a      	strb	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	615a      	str	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	761a      	strb	r2, [r3, #24]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	08007ea0 	.word	0x08007ea0

080038f4 <_ZN10BLDCDriverC1Ev>:
class BLDCDriver: public FOCDriver{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ffde 	bl	80038c0 <_ZN9FOCDriverC1Ev>
 8003904:	4a03      	ldr	r2, [pc, #12]	@ (8003914 <_ZN10BLDCDriverC1Ev+0x20>)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	08007e80 	.word	0x08007e80

08003918 <_ZN14BLDCDriver3PWMC1EiiiP7GPIOPinS1_S1_>:
#include "BLDCDriver3PWM.h"
#include "main.h"

BLDCDriver3PWM::BLDCDriver3PWM(int phA, int phB, int phC, GPIOPin *en1, GPIOPin *en2, GPIOPin *en3){
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
 8003924:	603b      	str	r3, [r7, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ffe3 	bl	80038f4 <_ZN10BLDCDriverC1Ev>
 800392e:	4a0d      	ldr	r2, [pc, #52]	@ (8003964 <_ZN14BLDCDriver3PWMC1EiiiP7GPIOPinS1_S1_+0x4c>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]
  // Pin initialization

	en1_ = en1;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	659a      	str	r2, [r3, #88]	@ 0x58
	en2_ = en2;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	65da      	str	r2, [r3, #92]	@ 0x5c
	en3_ = en3;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a3a      	ldr	r2, [r7, #32]
 8003944:	661a      	str	r2, [r3, #96]	@ 0x60
	enableA_pin = en1;
	enableB_pin = en2;
	enableC_pin = en3;
	 */
	// default power-supply value
	voltage_power_supply = DEF_POWER_SUPPLY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 800394c:	609a      	str	r2, [r3, #8]
	voltage_limit = NOT_SET;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a05      	ldr	r2, [pc, #20]	@ (8003968 <_ZN14BLDCDriver3PWMC1EiiiP7GPIOPinS1_S1_+0x50>)
 8003952:	60da      	str	r2, [r3, #12]
	pwm_frequency = NOT_SET;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a05      	ldr	r2, [pc, #20]	@ (800396c <_ZN14BLDCDriver3PWMC1EiiiP7GPIOPinS1_S1_+0x54>)
 8003958:	605a      	str	r2, [r3, #4]

}
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	08007e60 	.word	0x08007e60
 8003968:	c640e400 	.word	0xc640e400
 800396c:	ffffcfc7 	.word	0xffffcfc7

08003970 <_ZN14BLDCDriver3PWM6enableEv>:

// enable motor driver
void  BLDCDriver3PWM::enable(){
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

    // enable_pin the driver - if enable_pin pin available
    if ( en1_ != NULL ) HAL_GPIO_WritePin(en1_->port, en1_->channel, GPIO_PIN_SET);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <_ZN14BLDCDriver3PWM6enableEv+0x24>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	889b      	ldrh	r3, [r3, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	4619      	mov	r1, r3
 8003990:	f000 ff54 	bl	800483c <HAL_GPIO_WritePin>
    if ( en2_ != NULL ) HAL_GPIO_WritePin(en2_->port, en2_->channel, GPIO_PIN_SET);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <_ZN14BLDCDriver3PWM6enableEv+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a6:	889b      	ldrh	r3, [r3, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	4619      	mov	r1, r3
 80039ac:	f000 ff46 	bl	800483c <HAL_GPIO_WritePin>
    if ( en3_ != NULL ) HAL_GPIO_WritePin(en3_->port, en3_->channel, GPIO_PIN_SET);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <_ZN14BLDCDriver3PWM6enableEv+0x5c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039bc:	6818      	ldr	r0, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	889b      	ldrh	r3, [r3, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	4619      	mov	r1, r3
 80039c8:	f000 ff38 	bl	800483c <HAL_GPIO_WritePin>
    // set zero to PWM
    setPwm(0,0,0);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3310      	adds	r3, #16
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	ed9f 1a05 	vldr	s2, [pc, #20]	@ 80039ec <_ZN14BLDCDriver3PWM6enableEv+0x7c>
 80039d8:	eddf 0a04 	vldr	s1, [pc, #16]	@ 80039ec <_ZN14BLDCDriver3PWM6enableEv+0x7c>
 80039dc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80039ec <_ZN14BLDCDriver3PWM6enableEv+0x7c>
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	00000000 	.word	0x00000000

080039f0 <_ZN14BLDCDriver3PWM7disableEv>:

// disable motor driver
void BLDCDriver3PWM::disable()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  // set zero to PWM
  setPwm(0, 0, 0);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	3310      	adds	r3, #16
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8003a28 <_ZN14BLDCDriver3PWM7disableEv+0x38>
 8003a04:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8003a28 <_ZN14BLDCDriver3PWM7disableEv+0x38>
 8003a08:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003a28 <_ZN14BLDCDriver3PWM7disableEv+0x38>
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
  // disable the driver - if enable_pin pin available
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a1a:	f000 ff0f 	bl	800483c <HAL_GPIO_WritePin>
  if ( _isset(enableA_pin) ) digitalWrite(enableA_pin, !enable_active_high);
  if ( _isset(enableB_pin) ) digitalWrite(enableB_pin, !enable_active_high);
  if ( _isset(enableC_pin) ) digitalWrite(enableC_pin, !enable_active_high);
  */

}
 8003a1e:	bf00      	nop
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	00000000 	.word	0x00000000

08003a2c <_ZN14BLDCDriver3PWM4initEv>:

// init hardware pins
int BLDCDriver3PWM::init() {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  // PWM pins
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003a34:	2100      	movs	r1, #0
 8003a36:	4827      	ldr	r0, [pc, #156]	@ (8003ad4 <_ZN14BLDCDriver3PWM4initEv+0xa8>)
 8003a38:	f002 fb68 	bl	800610c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	4825      	ldr	r0, [pc, #148]	@ (8003ad4 <_ZN14BLDCDriver3PWM4initEv+0xa8>)
 8003a40:	f002 fb64 	bl	800610c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a44:	2108      	movs	r1, #8
 8003a46:	4823      	ldr	r0, [pc, #140]	@ (8003ad4 <_ZN14BLDCDriver3PWM4initEv+0xa8>)
 8003a48:	f002 fb60 	bl	800610c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a56:	f000 fef1 	bl	800483c <HAL_GPIO_WritePin>

	if(!_isset(voltage_limit) || voltage_limit > voltage_power_supply){
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a60:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003ad8 <_ZN14BLDCDriver3PWM4initEv+0xac>
 8003a64:	eef4 7a47 	vcmp.f32	s15, s14
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	d00a      	beq.n	8003a84 <_ZN14BLDCDriver3PWM4initEv+0x58>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a82:	dd03      	ble.n	8003a8c <_ZN14BLDCDriver3PWM4initEv+0x60>
		voltage_limit =  voltage_power_supply;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60da      	str	r2, [r3, #12]
	}

	params = _configure3PWM(pwm_frequency, pwmA, pwmB, pwmC);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6858      	ldr	r0, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9c:	f000 f920 	bl	8003ce0 <_Z14_configure3PWMliii>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	615a      	str	r2, [r3, #20]
	initialized = (params!=SIMPLEFOC_DRIVER_INIT_FAILED);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	741a      	strb	r2, [r3, #16]
	return params!=SIMPLEFOC_DRIVER_INIT_FAILED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac2:	bf14      	ite	ne
 8003ac4:	2301      	movne	r3, #1
 8003ac6:	2300      	moveq	r3, #0
 8003ac8:	b2db      	uxtb	r3, r3
  // hardware specific function - depending on driver and mcu
  params = _configure3PWM(pwm_frequency, pwmA, pwmB, pwmC);
  initialized = (params!=SIMPLEFOC_DRIVER_INIT_FAILED);
  return params!=SIMPLEFOC_DRIVER_INIT_FAILED;
  */
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000428 	.word	0x20000428
 8003ad8:	c640e400 	.word	0xc640e400

08003adc <_ZN14BLDCDriver3PWM13setPhaseStateE10PhaseStateS0_S0_>:



// Set voltage to the pwm pin
void BLDCDriver3PWM::setPhaseState(PhaseState sa, PhaseState sb, PhaseState sc) {
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4603      	mov	r3, r0
 8003aec:	70fb      	strb	r3, [r7, #3]
 8003aee:	460b      	mov	r3, r1
 8003af0:	70bb      	strb	r3, [r7, #2]
 8003af2:	4613      	mov	r3, r2
 8003af4:	707b      	strb	r3, [r7, #1]
    digitalWrite(enableA_pin, sa == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
    digitalWrite(enableB_pin, sb == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
    digitalWrite(enableC_pin, sc == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
  }
  */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <_ZN14BLDCDriver3PWM6setPwmEfff>:

// Set voltage to the pwm pin
void BLDCDriver3PWM::setPwm(float Ua, float Ub, float Uc) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b10:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b14:	ed87 1a00 	vstr	s2, [r7]

  // limit the voltage in driver
  Ua = _constrain(Ua, 0.0f, voltage_limit);
 8003b18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	d502      	bpl.n	8003b2c <_ZN14BLDCDriver3PWM6setPwmEfff+0x28>
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e00d      	b.n	8003b48 <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3e:	dd02      	ble.n	8003b46 <_ZN14BLDCDriver3PWM6setPwmEfff+0x42>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	e000      	b.n	8003b48 <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	60bb      	str	r3, [r7, #8]
  Ub = _constrain(Ub, 0.0f, voltage_limit);
 8003b4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b56:	d502      	bpl.n	8003b5e <_ZN14BLDCDriver3PWM6setPwmEfff+0x5a>
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e00d      	b.n	8003b7a <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b64:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	dd02      	ble.n	8003b78 <_ZN14BLDCDriver3PWM6setPwmEfff+0x74>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	e000      	b.n	8003b7a <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	607b      	str	r3, [r7, #4]
  Uc = _constrain(Uc, 0.0f, voltage_limit);
 8003b7c:	edd7 7a00 	vldr	s15, [r7]
 8003b80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b88:	d502      	bpl.n	8003b90 <_ZN14BLDCDriver3PWM6setPwmEfff+0x8c>
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e00d      	b.n	8003bac <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b96:	ed97 7a00 	vldr	s14, [r7]
 8003b9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	dd02      	ble.n	8003baa <_ZN14BLDCDriver3PWM6setPwmEfff+0xa6>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	e000      	b.n	8003bac <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	603b      	str	r3, [r7, #0]
  // calculate duty cycle
  // limited in [0,1]
  dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bb4:	edd7 6a02 	vldr	s13, [r7, #8]
 8003bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc4:	d502      	bpl.n	8003bcc <_ZN14BLDCDriver3PWM6setPwmEfff+0xc8>
 8003bc6:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003cdc <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8003bca:	e017      	b.n	8003bfc <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bd2:	edd7 6a02 	vldr	s13, [r7, #8]
 8003bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be6:	dd02      	ble.n	8003bee <_ZN14BLDCDriver3PWM6setPwmEfff+0xea>
 8003be8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003bec:	e006      	b.n	8003bfc <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	ed93 7a02 	vldr	s14, [r3, #8]
 8003bf4:	edd7 6a02 	vldr	s13, [r7, #8]
 8003bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	edc3 7a07 	vstr	s15, [r3, #28]
  dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c08:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c18:	d502      	bpl.n	8003c20 <_ZN14BLDCDriver3PWM6setPwmEfff+0x11c>
 8003c1a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8003cdc <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8003c1e:	e017      	b.n	8003c50 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c26:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c3a:	dd02      	ble.n	8003c42 <_ZN14BLDCDriver3PWM6setPwmEfff+0x13e>
 8003c3c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003c40:	e006      	b.n	8003c50 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c48:	edd7 6a01 	vldr	s13, [r7, #4]
 8003c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	edc3 7a08 	vstr	s15, [r3, #32]
  dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c5c:	edd7 6a00 	vldr	s13, [r7]
 8003c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6c:	d502      	bpl.n	8003c74 <_ZN14BLDCDriver3PWM6setPwmEfff+0x170>
 8003c6e:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003cdc <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8003c72:	e017      	b.n	8003ca4 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c7a:	edd7 6a00 	vldr	s13, [r7]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c8e:	dd02      	ble.n	8003c96 <_ZN14BLDCDriver3PWM6setPwmEfff+0x192>
 8003c90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003c94:	e006      	b.n	8003ca4 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c9c:	edd7 6a00 	vldr	s13, [r7]
 8003ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

  // hardware specific writing
  // hardware specific function - depending on driver and mcu
  _writeDutyCycle3PWM(dc_a, dc_b, dc_c, params);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	edd3 7a07 	vldr	s15, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	ed93 7a08 	vldr	s14, [r3, #32]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	eeb0 1a66 	vmov.f32	s2, s13
 8003cc6:	eef0 0a47 	vmov.f32	s1, s14
 8003cca:	eeb0 0a67 	vmov.f32	s0, s15
 8003cce:	f000 f827 	bl	8003d20 <_Z19_writeDutyCycle3PWMfffPv>
}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	00000000 	.word	0x00000000

08003ce0 <_Z14_configure3PWMliii>:

// function setting the high pwm frequency to the supplied pins
// - BLDC motor - 3PWM setting
// - hardware speciffic
// in generic case dont do anything
__attribute__((weak)) void* _configure3PWM(long pwm_frequency,const int pinA, const int pinB, const int pinC) {
 8003ce0:	b590      	push	{r4, r7, lr}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  GenericDriverParams* params = new GenericDriverParams {
    .pins = { pinA, pinB, pinC },
    .pwm_frequency = pwm_frequency
  };
 8003cee:	2020      	movs	r0, #32
 8003cf0:	f003 fe5d 	bl	80079ae <_Znwj>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2100      	movs	r1, #0
 8003d00:	f003 ffce 	bl	8007ca0 <memset>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6063      	str	r3, [r4, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	60a3      	str	r3, [r4, #8]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	61a3      	str	r3, [r4, #24]
 8003d14:	617c      	str	r4, [r7, #20]
  return params;
 8003d16:	697b      	ldr	r3, [r7, #20]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}

08003d20 <_Z19_writeDutyCycle3PWMfffPv>:
}

// function setting the pwm duty cycle to the hardware
// - BLDC motor - 3PWM setting
// - hardware speciffic
__attribute__((weak)) void _writeDutyCycle3PWM(float dc_a,  float dc_b, float dc_c, void* params){
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d2a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d2e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003d32:	6038      	str	r0, [r7, #0]
	// Convert to 0~COUNTER_PERIOD
	uint16_t converted_cnt_a = (int)_round(dc_a * COUNTER_PERIOD);
 8003d34:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d38:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	db0f      	blt.n	8003d6a <_Z19_writeDutyCycle3PWMfffPv+0x4a>
 8003d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d4e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d62:	ee17 3a90 	vmov	r3, s15
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	e00e      	b.n	8003d88 <_Z19_writeDutyCycle3PWMfffPv+0x68>
 8003d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d6e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d82:	ee17 3a90 	vmov	r3, s15
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	82fb      	strh	r3, [r7, #22]
	uint16_t converted_cnt_b = (int)_round(dc_b * COUNTER_PERIOD);
 8003d8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d8e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9e:	db0f      	blt.n	8003dc0 <_Z19_writeDutyCycle3PWMfffPv+0xa0>
 8003da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003da4:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003db8:	ee17 3a90 	vmov	r3, s15
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	e00e      	b.n	8003dde <_Z19_writeDutyCycle3PWMfffPv+0xbe>
 8003dc0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003dc4:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003dc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dcc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003dd8:	ee17 3a90 	vmov	r3, s15
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	82bb      	strh	r3, [r7, #20]
	uint16_t converted_cnt_c = (int)_round(dc_c * COUNTER_PERIOD);
 8003de0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003de4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df4:	db0f      	blt.n	8003e16 <_Z19_writeDutyCycle3PWMfffPv+0xf6>
 8003df6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dfa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e02:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e0e:	ee17 3a90 	vmov	r3, s15
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	e00e      	b.n	8003e34 <_Z19_writeDutyCycle3PWMfffPv+0x114>
 8003e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e1a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003e5c <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e2e:	ee17 3a90 	vmov	r3, s15
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	827b      	strh	r3, [r7, #18]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, converted_cnt_a);
 8003e36:	4b0a      	ldr	r3, [pc, #40]	@ (8003e60 <_Z19_writeDutyCycle3PWMfffPv+0x140>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	8afa      	ldrh	r2, [r7, #22]
 8003e3c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, converted_cnt_b);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	@ (8003e60 <_Z19_writeDutyCycle3PWMfffPv+0x140>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	8aba      	ldrh	r2, [r7, #20]
 8003e44:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, converted_cnt_c);
 8003e46:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <_Z19_writeDutyCycle3PWMfffPv+0x140>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	8a7a      	ldrh	r2, [r7, #18]
 8003e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  // transform duty cycle from [0,1] to [0,255]
  //analogWrite(((GenericDriverParams*)params)->pins[0], 255.0f*dc_a);
  //analogWrite(((GenericDriverParams*)params)->pins[1], 255.0f*dc_b);
  //analogWrite(((GenericDriverParams*)params)->pins[2], 255.0f*dc_c);
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	429e0000 	.word	0x429e0000
 8003e60:	20000428 	.word	0x20000428

08003e64 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <_ZN6SensorC1Ev+0x54>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a11      	ldr	r2, [pc, #68]	@ (8003ebc <_ZN6SensorC1Ev+0x58>)
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	615a      	str	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	619a      	str	r2, [r3, #24]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	61da      	str	r2, [r3, #28]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	621a      	str	r2, [r3, #32]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	08007e34 	.word	0x08007e34
 8003ebc:	38d1b717 	.word	0x38d1b717

08003ec0 <_ZN7EncoderC1Eiifi>:
  - index pin     - (optional input)
*/

uint32_t mon_encoder_cnt;

Encoder::Encoder(int _encA, int _encB , float _ppr, int _index){
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6178      	str	r0, [r7, #20]
 8003ec8:	6139      	str	r1, [r7, #16]
 8003eca:	60fa      	str	r2, [r7, #12]
 8003ecc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ffc5 	bl	8003e64 <_ZN6SensorC1Ev>
 8003eda:	4a1d      	ldr	r2, [pc, #116]	@ (8003f50 <_ZN7EncoderC1Eiifi+0x90>)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  // Encoder measurement structure init
  // hardware pins
  pinA = _encA;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24
  pinB = _encB;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	629a      	str	r2, [r3, #40]	@ 0x28
  // counter setup
  pulse_counter = 0;
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
  pulse_timestamp = 0;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	63da      	str	r2, [r3, #60]	@ 0x3c

  cpr = _ppr;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	635a      	str	r2, [r3, #52]	@ 0x34
  A_active = 0;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  B_active = 0;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
  I_active = 0;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	649a      	str	r2, [r3, #72]	@ 0x48
  // index pin
  index_pin = _index; // its 0 if not used
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // velocity calculation variables
  prev_Th = 0;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f04f 0200 	mov.w	r2, #0
 8003f24:	651a      	str	r2, [r3, #80]	@ 0x50
  pulse_per_second = 0;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f04f 0200 	mov.w	r2, #0
 8003f2c:	655a      	str	r2, [r3, #84]	@ 0x54
  prev_pulse_counter = 0;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	659a      	str	r2, [r3, #88]	@ 0x58
  //prev_timestamp_us = _micros();

  // extern pullup as default
  pullup = Pullup::USE_EXTERN;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  // enable quadrature encoder by default
  quadrature = Quadrature::ON;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	08007eb8 	.word	0x08007eb8

08003f54 <_ZN7Encoder6updateEv>:
  */
}


// Sensor update function. Safely copy volatile interrupt variables into Sensor base class state variables.
void Encoder::update() {
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
	pulse_counter = TIM2->CNT;
 8003f5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	639a      	str	r2, [r3, #56]	@ 0x38
	mon_encoder_cnt = pulse_counter;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd8 <_ZN7Encoder6updateEv+0x84>)
 8003f70:	601a      	str	r2, [r3, #0]

  long copy_pulse_counter = pulse_counter;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f76:	60fb      	str	r3, [r7, #12]

  // TODO: numerical precision issue here if the pulse_counter overflows the angle will be lost
  full_rotations = copy_pulse_counter / (int)cpr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f82:	ee17 2a90 	vmov	r2, s15
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	fb93 f2f2 	sdiv	r2, r3, r2
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	61da      	str	r2, [r3, #28]
  angle_prev = _2PI * ((copy_pulse_counter) % ((int)cpr)) / ((float)cpr);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f9a:	ee17 1a90 	vmov	r1, s15
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	fb93 f2f1 	sdiv	r2, r3, r1
 8003fa4:	fb01 f202 	mul.w	r2, r1, r2
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003fdc <_ZN7Encoder6updateEv+0x88>
 8003fb6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	edc3 7a03 	vstr	s15, [r3, #12]
  interrupts();
  // TODO: numerical precision issue here if the pulse_counter overflows the angle will be lost
  full_rotations = copy_pulse_counter / (int)cpr;
  angle_prev = _2PI * ((copy_pulse_counter) % ((int)cpr)) / ((float)cpr);
  */
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	2000059c 	.word	0x2000059c
 8003fdc:	40c90fdb 	.word	0x40c90fdb

08003fe0 <_ZN7Encoder14getSensorAngleEv>:

/*
	Shaft angle calculation
*/
float Encoder::getSensorAngle(){
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return _2PI * (pulse_counter) / ((float)cpr);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ff4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004018 <_ZN7Encoder14getSensorAngleEv+0x38>
 8003ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004002:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004006:	eef0 7a66 	vmov.f32	s15, s13
}
 800400a:	eeb0 0a67 	vmov.f32	s0, s15
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40c90fdb 	.word	0x40c90fdb

0800401c <_ZN7Encoder11getVelocityEv>:

/*
  Shaft velocity calculation
  function using mixed time and frequency measurement technique
*/
float Encoder::getVelocity(){
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	@ 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  // Copy volatile variables in minimal-duration blocking section to ensure no interrupts are missed
  //noInterrupts();
  long copy_pulse_counter = pulse_counter;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	61bb      	str	r3, [r7, #24]
  //interrupts();
  // timestamp
  //long timestamp_us = _micros();
  // sampling time calculation
  //float Ts = (timestamp_us - prev_timestamp_us) * 1e-6f;
  float Ts = 1e-3f;
 800402a:	4b39      	ldr	r3, [pc, #228]	@ (8004110 <_ZN7Encoder11getVelocityEv+0xf4>)
 800402c:	61fb      	str	r3, [r7, #28]
  // quick fix for strange cases (micros overflow)
  if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 800402e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	d908      	bls.n	800404e <_ZN7Encoder11getVelocityEv+0x32>
 800403c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004040:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	dd01      	ble.n	8004052 <_ZN7Encoder11getVelocityEv+0x36>
 800404e:	4b30      	ldr	r3, [pc, #192]	@ (8004110 <_ZN7Encoder11getVelocityEv+0xf4>)
 8004050:	61fb      	str	r3, [r7, #28]

  // time from last impulse
  //float Th = (timestamp_us - copy_pulse_timestamp) * 1e-6f;
  float Th = 1e-3f;
 8004052:	4b2f      	ldr	r3, [pc, #188]	@ (8004110 <_ZN7Encoder11getVelocityEv+0xf4>)
 8004054:	617b      	str	r3, [r7, #20]
  long dN = copy_pulse_counter - prev_pulse_counter;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	613b      	str	r3, [r7, #16]
  // dN - impulses received
  // Ts - sampling time - time in between function calls
  // Th - time from last impulse
  // Th_1 - time form last impulse of the previous call
  // only increment if some impulses received
  float dt = Ts + prev_Th - Th;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8004066:	edd7 7a07 	vldr	s15, [r7, #28]
 800406a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800406e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004076:	edc7 7a03 	vstr	s15, [r7, #12]
  pulse_per_second = (dN != 0 && dt > Ts/2) ? dN / dt : pulse_per_second;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d016      	beq.n	80040ae <_ZN7Encoder11getVelocityEv+0x92>
 8004080:	ed97 7a07 	vldr	s14, [r7, #28]
 8004084:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800408c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004098:	dd09      	ble.n	80040ae <_ZN7Encoder11getVelocityEv+0x92>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80040a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80040a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ac:	e002      	b.n	80040b4 <_ZN7Encoder11getVelocityEv+0x98>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  // if more than 0.05f passed in between impulses
  if ( Th > 0.1f) pulse_per_second = 0;
 80040ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80040be:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004114 <_ZN7Encoder11getVelocityEv+0xf8>
 80040c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	dd03      	ble.n	80040d4 <_ZN7Encoder11getVelocityEv+0xb8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54

  // velocity calculation
  float velocity = pulse_per_second / ((float)cpr) * (_2PI);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80040e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004118 <_ZN7Encoder11getVelocityEv+0xfc>
 80040e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040ec:	edc7 7a02 	vstr	s15, [r7, #8]

  // save variables for next pass
  //prev_timestamp_us = timestamp_us;
  // save velocity calculation variables
  prev_Th = Th;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	651a      	str	r2, [r3, #80]	@ 0x50
  prev_pulse_counter = copy_pulse_counter;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	659a      	str	r2, [r3, #88]	@ 0x58
  return velocity;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	ee07 3a90 	vmov	s15, r3
}
 8004102:	eeb0 0a67 	vmov.f32	s0, s15
 8004106:	3724      	adds	r7, #36	@ 0x24
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	3a83126f 	.word	0x3a83126f
 8004114:	3dcccccd 	.word	0x3dcccccd
 8004118:	40c90fdb 	.word	0x40c90fdb

0800411c <_ZN7Encoder11needsSearchEv>:

// getter for index pin
// return -1 if no index
int Encoder::needsSearch(){
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return hasIndex() && !index_found;
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f813 	bl	8004150 <_ZN7Encoder8hasIndexEv>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <_ZN7Encoder11needsSearchEv+0x2a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f083 0301 	eor.w	r3, r3, #1
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <_ZN7Encoder11needsSearchEv+0x2a>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <_ZN7Encoder11needsSearchEv+0x2c>
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <_ZN7Encoder8hasIndexEv>:

// private function used to determine if encoder has index
int Encoder::hasIndex(){
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  return index_pin != 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
}
 8004166:	4618      	mov	r0, r3
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <_ZN7Encoder4initEv>:


// encoder initialisation of the hardware pins
// and calculation variables
void Encoder::init(){
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 800417c:	213c      	movs	r1, #60	@ 0x3c
 800417e:	4812      	ldr	r0, [pc, #72]	@ (80041c8 <_ZN7Encoder4initEv+0x54>)
 8004180:	f002 f956 	bl	8006430 <HAL_TIM_Encoder_Start>

	pulse_counter = 0;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	639a      	str	r2, [r3, #56]	@ 0x38
	//pulse_timestamp = _micros();
	// velocity calculation variables
	prev_Th = 0;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	651a      	str	r2, [r3, #80]	@ 0x50
	pulse_per_second = 0;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	655a      	str	r2, [r3, #84]	@ 0x54
	prev_pulse_counter = 0;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	659a      	str	r2, [r3, #88]	@ 0x58
	//prev_timestamp_us = _micros();

	// initial cpr = PPR
	// change it if the mode is quadrature
	if(quadrature == Quadrature::ON) cpr = 4*cpr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <_ZN7Encoder4initEv+0x4a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80041b0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80041b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  if(quadrature == Quadrature::ON) cpr = 4*cpr;

  // we don't call Sensor::init() here because init is handled in Encoder class.

   */
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000474 	.word	0x20000474

080041cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80041cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004204 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80041d0:	f7fe fdd2 	bl	8002d78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80041d4:	480c      	ldr	r0, [pc, #48]	@ (8004208 <LoopForever+0x6>)
  ldr r1, =_edata
 80041d6:	490d      	ldr	r1, [pc, #52]	@ (800420c <LoopForever+0xa>)
  ldr r2, =_sidata
 80041d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004210 <LoopForever+0xe>)
  movs r3, #0
 80041da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041dc:	e002      	b.n	80041e4 <LoopCopyDataInit>

080041de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041e2:	3304      	adds	r3, #4

080041e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041e8:	d3f9      	bcc.n	80041de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <LoopForever+0x12>)
  ldr r4, =_ebss
 80041ec:	4c0a      	ldr	r4, [pc, #40]	@ (8004218 <LoopForever+0x16>)
  movs r3, #0
 80041ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041f0:	e001      	b.n	80041f6 <LoopFillZerobss>

080041f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041f4:	3204      	adds	r2, #4

080041f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80041f8:	d3fb      	bcc.n	80041f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80041fa:	f003 fdb3 	bl	8007d64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80041fe:	f7fe f9f1 	bl	80025e4 <main>

08004202 <LoopForever>:

LoopForever:
    b LoopForever
 8004202:	e7fe      	b.n	8004202 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004204:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8004208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800420c:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 8004210:	08007f10 	.word	0x08007f10
  ldr r2, =_sbss
 8004214:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 8004218:	200006f0 	.word	0x200006f0

0800421c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800421c:	e7fe      	b.n	800421c <ADC1_2_IRQHandler>
	...

08004220 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004224:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <HAL_Init+0x28>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a07      	ldr	r2, [pc, #28]	@ (8004248 <HAL_Init+0x28>)
 800422a:	f043 0310 	orr.w	r3, r3, #16
 800422e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004230:	2003      	movs	r0, #3
 8004232:	f000 f94f 	bl	80044d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004236:	2000      	movs	r0, #0
 8004238:	f000 f808 	bl	800424c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800423c:	f7fe fbe2 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	40022000 	.word	0x40022000

0800424c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004254:	4b12      	ldr	r3, [pc, #72]	@ (80042a0 <HAL_InitTick+0x54>)
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	4b12      	ldr	r3, [pc, #72]	@ (80042a4 <HAL_InitTick+0x58>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	4619      	mov	r1, r3
 800425e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004262:	fbb3 f3f1 	udiv	r3, r3, r1
 8004266:	fbb2 f3f3 	udiv	r3, r2, r3
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f967 	bl	800453e <HAL_SYSTICK_Config>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e00e      	b.n	8004298 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d80a      	bhi.n	8004296 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004280:	2200      	movs	r2, #0
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004288:	f000 f92f 	bl	80044ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800428c:	4a06      	ldr	r2, [pc, #24]	@ (80042a8 <HAL_InitTick+0x5c>)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200000e4 	.word	0x200000e4
 80042a4:	20000170 	.word	0x20000170
 80042a8:	2000016c 	.word	0x2000016c

080042ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <HAL_IncTick+0x20>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	4b06      	ldr	r3, [pc, #24]	@ (80042d0 <HAL_IncTick+0x24>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4a04      	ldr	r2, [pc, #16]	@ (80042d0 <HAL_IncTick+0x24>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000170 	.word	0x20000170
 80042d0:	200005a0 	.word	0x200005a0

080042d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80042d8:	4b03      	ldr	r3, [pc, #12]	@ (80042e8 <HAL_GetTick+0x14>)
 80042da:	681b      	ldr	r3, [r3, #0]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	200005a0 	.word	0x200005a0

080042ec <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff ffee 	bl	80042d4 <HAL_GetTick>
 80042f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004304:	d005      	beq.n	8004312 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004306:	4b0a      	ldr	r3, [pc, #40]	@ (8004330 <HAL_Delay+0x44>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004312:	bf00      	nop
 8004314:	f7ff ffde 	bl	80042d4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	429a      	cmp	r2, r3
 8004322:	d8f7      	bhi.n	8004314 <HAL_Delay+0x28>
  {
  }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000170 	.word	0x20000170

08004334 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004350:	4013      	ands	r3, r2
 8004352:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800435c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004360:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004366:	4a04      	ldr	r2, [pc, #16]	@ (8004378 <__NVIC_SetPriorityGrouping+0x44>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	60d3      	str	r3, [r2, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	e000ed00 	.word	0xe000ed00

0800437c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800437c:	b480      	push	{r7}
 800437e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004380:	4b04      	ldr	r3, [pc, #16]	@ (8004394 <__NVIC_GetPriorityGrouping+0x18>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	0a1b      	lsrs	r3, r3, #8
 8004386:	f003 0307 	and.w	r3, r3, #7
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	e000ed00 	.word	0xe000ed00

08004398 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	db0b      	blt.n	80043c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	f003 021f 	and.w	r2, r3, #31
 80043b0:	4907      	ldr	r1, [pc, #28]	@ (80043d0 <__NVIC_EnableIRQ+0x38>)
 80043b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2001      	movs	r0, #1
 80043ba:	fa00 f202 	lsl.w	r2, r0, r2
 80043be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e100 	.word	0xe000e100

080043d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	6039      	str	r1, [r7, #0]
 80043de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	db0a      	blt.n	80043fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	490c      	ldr	r1, [pc, #48]	@ (8004420 <__NVIC_SetPriority+0x4c>)
 80043ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	440b      	add	r3, r1
 80043f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043fc:	e00a      	b.n	8004414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4908      	ldr	r1, [pc, #32]	@ (8004424 <__NVIC_SetPriority+0x50>)
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	3b04      	subs	r3, #4
 800440c:	0112      	lsls	r2, r2, #4
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	440b      	add	r3, r1
 8004412:	761a      	strb	r2, [r3, #24]
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	e000e100 	.word	0xe000e100
 8004424:	e000ed00 	.word	0xe000ed00

08004428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004428:	b480      	push	{r7}
 800442a:	b089      	sub	sp, #36	@ 0x24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f1c3 0307 	rsb	r3, r3, #7
 8004442:	2b04      	cmp	r3, #4
 8004444:	bf28      	it	cs
 8004446:	2304      	movcs	r3, #4
 8004448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3304      	adds	r3, #4
 800444e:	2b06      	cmp	r3, #6
 8004450:	d902      	bls.n	8004458 <NVIC_EncodePriority+0x30>
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3b03      	subs	r3, #3
 8004456:	e000      	b.n	800445a <NVIC_EncodePriority+0x32>
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800445c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	401a      	ands	r2, r3
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004470:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	fa01 f303 	lsl.w	r3, r1, r3
 800447a:	43d9      	mvns	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004480:	4313      	orrs	r3, r2
         );
}
 8004482:	4618      	mov	r0, r3
 8004484:	3724      	adds	r7, #36	@ 0x24
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3b01      	subs	r3, #1
 800449c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044a0:	d301      	bcc.n	80044a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044a6:	4a0a      	ldr	r2, [pc, #40]	@ (80044d0 <SysTick_Config+0x40>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044ae:	210f      	movs	r1, #15
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044b4:	f7ff ff8e 	bl	80043d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044b8:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <SysTick_Config+0x40>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044be:	4b04      	ldr	r3, [pc, #16]	@ (80044d0 <SysTick_Config+0x40>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010

080044d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff29 	bl	8004334 <__NVIC_SetPriorityGrouping>
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b086      	sub	sp, #24
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	4603      	mov	r3, r0
 80044f2:	60b9      	str	r1, [r7, #8]
 80044f4:	607a      	str	r2, [r7, #4]
 80044f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044fc:	f7ff ff3e 	bl	800437c <__NVIC_GetPriorityGrouping>
 8004500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	68b9      	ldr	r1, [r7, #8]
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7ff ff8e 	bl	8004428 <NVIC_EncodePriority>
 800450c:	4602      	mov	r2, r0
 800450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004512:	4611      	mov	r1, r2
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff ff5d 	bl	80043d4 <__NVIC_SetPriority>
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b082      	sub	sp, #8
 8004526:	af00      	add	r7, sp, #0
 8004528:	4603      	mov	r3, r0
 800452a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800452c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff31 	bl	8004398 <__NVIC_EnableIRQ>
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff ffa2 	bl	8004490 <SysTick_Config>
 800454c:	4603      	mov	r3, r0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004566:	e14e      	b.n	8004806 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	fa01 f303 	lsl.w	r3, r1, r3
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8140 	beq.w	8004800 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0303 	and.w	r3, r3, #3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d005      	beq.n	8004598 <HAL_GPIO_Init+0x40>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0303 	and.w	r3, r3, #3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d130      	bne.n	80045fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	2203      	movs	r2, #3
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	43db      	mvns	r3, r3
 80045aa:	693a      	ldr	r2, [r7, #16]
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ce:	2201      	movs	r2, #1
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43db      	mvns	r3, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0201 	and.w	r2, r3, #1
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b03      	cmp	r3, #3
 8004604:	d017      	beq.n	8004636 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	2203      	movs	r2, #3
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4013      	ands	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d123      	bne.n	800468a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	08da      	lsrs	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3208      	adds	r2, #8
 800464a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800464e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	220f      	movs	r2, #15
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43db      	mvns	r3, r3
 8004660:	693a      	ldr	r2, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	08da      	lsrs	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3208      	adds	r2, #8
 8004684:	6939      	ldr	r1, [r7, #16]
 8004686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	2203      	movs	r2, #3
 8004696:	fa02 f303 	lsl.w	r3, r2, r3
 800469a:	43db      	mvns	r3, r3
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4013      	ands	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0203 	and.w	r2, r3, #3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 809a 	beq.w	8004800 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046cc:	4b55      	ldr	r3, [pc, #340]	@ (8004824 <HAL_GPIO_Init+0x2cc>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a54      	ldr	r2, [pc, #336]	@ (8004824 <HAL_GPIO_Init+0x2cc>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b52      	ldr	r3, [pc, #328]	@ (8004824 <HAL_GPIO_Init+0x2cc>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046e4:	4a50      	ldr	r2, [pc, #320]	@ (8004828 <HAL_GPIO_Init+0x2d0>)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4013      	ands	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800470e:	d013      	beq.n	8004738 <HAL_GPIO_Init+0x1e0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a46      	ldr	r2, [pc, #280]	@ (800482c <HAL_GPIO_Init+0x2d4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_GPIO_Init+0x1dc>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a45      	ldr	r2, [pc, #276]	@ (8004830 <HAL_GPIO_Init+0x2d8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x1d8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a44      	ldr	r2, [pc, #272]	@ (8004834 <HAL_GPIO_Init+0x2dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_GPIO_Init+0x1d4>
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 800472c:	2305      	movs	r3, #5
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1e2>
 8004738:	2300      	movs	r3, #0
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800474a:	4937      	ldr	r1, [pc, #220]	@ (8004828 <HAL_GPIO_Init+0x2d0>)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004758:	4b37      	ldr	r3, [pc, #220]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800477c:	4a2e      	ldr	r2, [pc, #184]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004782:	4b2d      	ldr	r3, [pc, #180]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	43db      	mvns	r3, r3
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4013      	ands	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80047a6:	4a24      	ldr	r2, [pc, #144]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80047ac:	4b22      	ldr	r3, [pc, #136]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4013      	ands	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80047d0:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047d6:	4b18      	ldr	r3, [pc, #96]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43db      	mvns	r3, r3
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4013      	ands	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004838 <HAL_GPIO_Init+0x2e0>)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	3301      	adds	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	f47f aea9 	bne.w	8004568 <HAL_GPIO_Init+0x10>
  }
}
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40021000 	.word	0x40021000
 8004828:	40010000 	.word	0x40010000
 800482c:	48000400 	.word	0x48000400
 8004830:	48000800 	.word	0x48000800
 8004834:	48000c00 	.word	0x48000c00
 8004838:	40010400 	.word	0x40010400

0800483c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	807b      	strh	r3, [r7, #2]
 8004848:	4613      	mov	r3, r2
 800484a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800484c:	787b      	ldrb	r3, [r7, #1]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004852:	887a      	ldrh	r2, [r7, #2]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004858:	e002      	b.n	8004860 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800485a:	887a      	ldrh	r2, [r7, #2]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004872:	af00      	add	r7, sp, #0
 8004874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004878:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800487c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800487e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004882:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d102      	bne.n	8004892 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f000 bff4 	b.w	800587a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004896:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 816d 	beq.w	8004b82 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80048a8:	4bb4      	ldr	r3, [pc, #720]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d00c      	beq.n	80048ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048b4:	4bb1      	ldr	r3, [pc, #708]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d157      	bne.n	8004970 <HAL_RCC_OscConfig+0x104>
 80048c0:	4bae      	ldr	r3, [pc, #696]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048cc:	d150      	bne.n	8004970 <HAL_RCC_OscConfig+0x104>
 80048ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048d2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048e2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80048ee:	d802      	bhi.n	80048f6 <HAL_RCC_OscConfig+0x8a>
 80048f0:	4ba2      	ldr	r3, [pc, #648]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	e015      	b.n	8004922 <HAL_RCC_OscConfig+0xb6>
 80048f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048fa:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800490a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800490e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004912:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004916:	fa93 f3a3 	rbit	r3, r3
 800491a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800491e:	4b97      	ldr	r3, [pc, #604]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004926:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800492a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800492e:	fa92 f2a2 	rbit	r2, r2
 8004932:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004936:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800493a:	fab2 f282 	clz	r2, r2
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	f002 021f 	and.w	r2, r2, #31
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8114 	beq.w	8004b80 <HAL_RCC_OscConfig+0x314>
 8004958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800495c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f040 810b 	bne.w	8004b80 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f000 bf85 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004974:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004980:	d106      	bne.n	8004990 <HAL_RCC_OscConfig+0x124>
 8004982:	4b7e      	ldr	r3, [pc, #504]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7d      	ldr	r2, [pc, #500]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	e036      	b.n	80049fe <HAL_RCC_OscConfig+0x192>
 8004990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10c      	bne.n	80049ba <HAL_RCC_OscConfig+0x14e>
 80049a0:	4b76      	ldr	r3, [pc, #472]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a75      	ldr	r2, [pc, #468]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049aa:	6013      	str	r3, [r2, #0]
 80049ac:	4b73      	ldr	r3, [pc, #460]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a72      	ldr	r2, [pc, #456]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e021      	b.n	80049fe <HAL_RCC_OscConfig+0x192>
 80049ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ca:	d10c      	bne.n	80049e6 <HAL_RCC_OscConfig+0x17a>
 80049cc:	4b6b      	ldr	r3, [pc, #428]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a6a      	ldr	r2, [pc, #424]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a67      	ldr	r2, [pc, #412]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e00b      	b.n	80049fe <HAL_RCC_OscConfig+0x192>
 80049e6:	4b65      	ldr	r3, [pc, #404]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a64      	ldr	r2, [pc, #400]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	4b62      	ldr	r3, [pc, #392]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a61      	ldr	r2, [pc, #388]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 80049f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049fe:	4b5f      	ldr	r3, [pc, #380]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a02:	f023 020f 	bic.w	r2, r3, #15
 8004a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	495a      	ldr	r1, [pc, #360]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d054      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7ff fc54 	bl	80042d4 <HAL_GetTick>
 8004a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a32:	f7ff fc4f 	bl	80042d4 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	@ 0x64
 8004a40:	d902      	bls.n	8004a48 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	f000 bf19 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
 8004a48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a4c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a50:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004a54:	fa93 f3a3 	rbit	r3, r3
 8004a58:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004a5c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a60:	fab3 f383 	clz	r3, r3
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a68:	d802      	bhi.n	8004a70 <HAL_RCC_OscConfig+0x204>
 8004a6a:	4b44      	ldr	r3, [pc, #272]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	e015      	b.n	8004a9c <HAL_RCC_OscConfig+0x230>
 8004a70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a74:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004a84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004a88:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004a8c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004a98:	4b38      	ldr	r3, [pc, #224]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004aa0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004aa4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004aa8:	fa92 f2a2 	rbit	r2, r2
 8004aac:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004ab0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004ab4:	fab2 f282 	clz	r2, r2
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	f042 0220 	orr.w	r2, r2, #32
 8004abe:	b2d2      	uxtb	r2, r2
 8004ac0:	f002 021f 	and.w	r2, r2, #31
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0b0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1c6>
 8004ad0:	e057      	b.n	8004b82 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7ff fbff 	bl	80042d4 <HAL_GetTick>
 8004ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004adc:	f7ff fbfa 	bl	80042d4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b64      	cmp	r3, #100	@ 0x64
 8004aea:	d902      	bls.n	8004af2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	f000 bec4 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
 8004af2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004af6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004b06:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	fab3 f383 	clz	r3, r3
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b12:	d802      	bhi.n	8004b1a <HAL_RCC_OscConfig+0x2ae>
 8004b14:	4b19      	ldr	r3, [pc, #100]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	e015      	b.n	8004b46 <HAL_RCC_OscConfig+0x2da>
 8004b1a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b1e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b22:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004b26:	fa93 f3a3 	rbit	r3, r3
 8004b2a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004b2e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004b32:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004b36:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004b42:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <HAL_RCC_OscConfig+0x310>)
 8004b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b46:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004b4a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004b4e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004b52:	fa92 f2a2 	rbit	r2, r2
 8004b56:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004b5a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004b5e:	fab2 f282 	clz	r2, r2
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	f042 0220 	orr.w	r2, r2, #32
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	f002 021f 	and.w	r2, r2, #31
 8004b6e:	2101      	movs	r1, #1
 8004b70:	fa01 f202 	lsl.w	r2, r1, r2
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1b0      	bne.n	8004adc <HAL_RCC_OscConfig+0x270>
 8004b7a:	e002      	b.n	8004b82 <HAL_RCC_OscConfig+0x316>
 8004b7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 816c 	beq.w	8004e70 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b98:	4bcc      	ldr	r3, [pc, #816]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00b      	beq.n	8004bbc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ba4:	4bc9      	ldr	r3, [pc, #804]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 030c 	and.w	r3, r3, #12
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d16d      	bne.n	8004c8c <HAL_RCC_OscConfig+0x420>
 8004bb0:	4bc6      	ldr	r3, [pc, #792]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d167      	bne.n	8004c8c <HAL_RCC_OscConfig+0x420>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004bc6:	fa93 f3a3 	rbit	r3, r3
 8004bca:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004bce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8004bda:	d802      	bhi.n	8004be2 <HAL_RCC_OscConfig+0x376>
 8004bdc:	4bbb      	ldr	r3, [pc, #748]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	e013      	b.n	8004c0a <HAL_RCC_OscConfig+0x39e>
 8004be2:	2302      	movs	r3, #2
 8004be4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004bf4:	2302      	movs	r3, #2
 8004bf6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004bfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004bfe:	fa93 f3a3 	rbit	r3, r3
 8004c02:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004c06:	4bb1      	ldr	r3, [pc, #708]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004c10:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004c14:	fa92 f2a2 	rbit	r2, r2
 8004c18:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004c1c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004c20:	fab2 f282 	clz	r2, r2
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	f042 0220 	orr.w	r2, r2, #32
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f002 021f 	and.w	r2, r2, #31
 8004c30:	2101      	movs	r1, #1
 8004c32:	fa01 f202 	lsl.w	r2, r1, r2
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <HAL_RCC_OscConfig+0x3e6>
 8004c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d002      	beq.n	8004c52 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f000 be14 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b9e      	ldr	r3, [pc, #632]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	21f8      	movs	r1, #248	@ 0xf8
 8004c68:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004c70:	fa91 f1a1 	rbit	r1, r1
 8004c74:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004c78:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004c7c:	fab1 f181 	clz	r1, r1
 8004c80:	b2c9      	uxtb	r1, r1
 8004c82:	408b      	lsls	r3, r1
 8004c84:	4991      	ldr	r1, [pc, #580]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	e0f1      	b.n	8004e70 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8083 	beq.w	8004da4 <HAL_RCC_OscConfig+0x538>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ca4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004ca8:	fa93 f3a3 	rbit	r3, r3
 8004cac:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004cb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb4:	fab3 f383 	clz	r3, r3
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004cbe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cca:	f7ff fb03 	bl	80042d4 <HAL_GetTick>
 8004cce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd2:	e00a      	b.n	8004cea <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd4:	f7ff fafe 	bl	80042d4 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d902      	bls.n	8004cea <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	f000 bdc8 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
 8004cea:	2302      	movs	r3, #2
 8004cec:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004cfc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d00:	fab3 f383 	clz	r3, r3
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d08:	d802      	bhi.n	8004d10 <HAL_RCC_OscConfig+0x4a4>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	e013      	b.n	8004d38 <HAL_RCC_OscConfig+0x4cc>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d16:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004d1a:	fa93 f3a3 	rbit	r3, r3
 8004d1e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004d22:	2302      	movs	r3, #2
 8004d24:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004d28:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004d34:	4b65      	ldr	r3, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004d3e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004d42:	fa92 f2a2 	rbit	r2, r2
 8004d46:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004d4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004d4e:	fab2 f282 	clz	r2, r2
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	f042 0220 	orr.w	r2, r2, #32
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	f002 021f 	and.w	r2, r2, #31
 8004d5e:	2101      	movs	r1, #1
 8004d60:	fa01 f202 	lsl.w	r2, r1, r2
 8004d64:	4013      	ands	r3, r2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0b4      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d6a:	4b58      	ldr	r3, [pc, #352]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	21f8      	movs	r1, #248	@ 0xf8
 8004d80:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d84:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004d88:	fa91 f1a1 	rbit	r1, r1
 8004d8c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004d90:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004d94:	fab1 f181 	clz	r1, r1
 8004d98:	b2c9      	uxtb	r1, r1
 8004d9a:	408b      	lsls	r3, r1
 8004d9c:	494b      	ldr	r1, [pc, #300]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
 8004da2:	e065      	b.n	8004e70 <HAL_RCC_OscConfig+0x604>
 8004da4:	2301      	movs	r3, #1
 8004da6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dba:	fab3 f383 	clz	r3, r3
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004dc4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	461a      	mov	r2, r3
 8004dcc:	2300      	movs	r3, #0
 8004dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd0:	f7ff fa80 	bl	80042d4 <HAL_GetTick>
 8004dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dda:	f7ff fa7b 	bl	80042d4 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d902      	bls.n	8004df0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	f000 bd45 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
 8004df0:	2302      	movs	r3, #2
 8004df2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	fab3 f383 	clz	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e0e:	d802      	bhi.n	8004e16 <HAL_RCC_OscConfig+0x5aa>
 8004e10:	4b2e      	ldr	r3, [pc, #184]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	e013      	b.n	8004e3e <HAL_RCC_OscConfig+0x5d2>
 8004e16:	2302      	movs	r3, #2
 8004e18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004e20:	fa93 f3a3 	rbit	r3, r3
 8004e24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004e28:	2302      	movs	r3, #2
 8004e2a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004e2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e32:	fa93 f3a3 	rbit	r3, r3
 8004e36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004e3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ecc <HAL_RCC_OscConfig+0x660>)
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004e44:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004e48:	fa92 f2a2 	rbit	r2, r2
 8004e4c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004e50:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004e54:	fab2 f282 	clz	r2, r2
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	f042 0220 	orr.w	r2, r2, #32
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f002 021f 	and.w	r2, r2, #31
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1b4      	bne.n	8004dda <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8115 	beq.w	80050b0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d07e      	beq.n	8004f94 <HAL_RCC_OscConfig+0x728>
 8004e96:	2301      	movs	r3, #1
 8004e98:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eac:	fab3 f383 	clz	r3, r3
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <HAL_RCC_OscConfig+0x664>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec0:	f7ff fa08 	bl	80042d4 <HAL_GetTick>
 8004ec4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ec8:	e00f      	b.n	8004eea <HAL_RCC_OscConfig+0x67e>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed4:	f7ff f9fe 	bl	80042d4 <HAL_GetTick>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d902      	bls.n	8004eea <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	f000 bcc8 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
 8004eea:	2302      	movs	r3, #2
 8004eec:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004f04:	2202      	movs	r2, #2
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	fa93 f2a3 	rbit	r2, r3
 8004f16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f1e:	601a      	str	r2, [r3, #0]
 8004f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f28:	2202      	movs	r2, #2
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	fa93 f2a3 	rbit	r2, r3
 8004f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004f42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f44:	4bb0      	ldr	r3, [pc, #704]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 8004f46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004f50:	2102      	movs	r1, #2
 8004f52:	6019      	str	r1, [r3, #0]
 8004f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f58:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	fa93 f1a3 	rbit	r1, r3
 8004f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f66:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004f6a:	6019      	str	r1, [r3, #0]
  return result;
 8004f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f70:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2101      	movs	r1, #1
 8004f88:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0a0      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x668>
 8004f92:	e08d      	b.n	80050b0 <HAL_RCC_OscConfig+0x844>
 8004f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004fb6:	601a      	str	r2, [r3, #0]
  return result;
 8004fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004fc0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b90      	ldr	r3, [pc, #576]	@ (800520c <HAL_RCC_OscConfig+0x9a0>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd6:	f7ff f97d 	bl	80042d4 <HAL_GetTick>
 8004fda:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fde:	e00a      	b.n	8004ff6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe0:	f7ff f978 	bl	80042d4 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d902      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	f000 bc42 	b.w	800587a <HAL_RCC_OscConfig+0x100e>
 8004ff6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ffe:	2202      	movs	r2, #2
 8005000:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005006:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	fa93 f2a3 	rbit	r2, r3
 8005010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005014:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005022:	2202      	movs	r2, #2
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	fa93 f2a3 	rbit	r2, r3
 8005034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005038:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005046:	2202      	movs	r2, #2
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800504e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	fa93 f2a3 	rbit	r2, r3
 8005058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005060:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005062:	4b69      	ldr	r3, [pc, #420]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 8005064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800506e:	2102      	movs	r1, #2
 8005070:	6019      	str	r1, [r3, #0]
 8005072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005076:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	fa93 f1a3 	rbit	r1, r3
 8005080:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005084:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005088:	6019      	str	r1, [r3, #0]
  return result;
 800508a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800508e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	fab3 f383 	clz	r3, r3
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	2101      	movs	r1, #1
 80050a6:	fa01 f303 	lsl.w	r3, r1, r3
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d197      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 819e 	beq.w	8005402 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d116      	bne.n	8005106 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80050de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e2:	61d3      	str	r3, [r2, #28]
 80050e4:	4b48      	ldr	r3, [pc, #288]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80050ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fa:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80050fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005100:	2301      	movs	r3, #1
 8005102:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005106:	4b42      	ldr	r3, [pc, #264]	@ (8005210 <HAL_RCC_OscConfig+0x9a4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510e:	2b00      	cmp	r3, #0
 8005110:	d11a      	bne.n	8005148 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005112:	4b3f      	ldr	r3, [pc, #252]	@ (8005210 <HAL_RCC_OscConfig+0x9a4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a3e      	ldr	r2, [pc, #248]	@ (8005210 <HAL_RCC_OscConfig+0x9a4>)
 8005118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800511c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800511e:	f7ff f8d9 	bl	80042d4 <HAL_GetTick>
 8005122:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	e009      	b.n	800513c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005128:	f7ff f8d4 	bl	80042d4 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	@ 0x64
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e39e      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_OscConfig+0x9a4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0ef      	beq.n	8005128 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800514c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <HAL_RCC_OscConfig+0x8fa>
 8005158:	4b2b      	ldr	r3, [pc, #172]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4a2a      	ldr	r2, [pc, #168]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	6213      	str	r3, [r2, #32]
 8005164:	e035      	b.n	80051d2 <HAL_RCC_OscConfig+0x966>
 8005166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800516a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x924>
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	4a23      	ldr	r2, [pc, #140]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 800517c:	f023 0301 	bic.w	r3, r3, #1
 8005180:	6213      	str	r3, [r2, #32]
 8005182:	4b21      	ldr	r3, [pc, #132]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	4a20      	ldr	r2, [pc, #128]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	6213      	str	r3, [r2, #32]
 800518e:	e020      	b.n	80051d2 <HAL_RCC_OscConfig+0x966>
 8005190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005194:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d10c      	bne.n	80051ba <HAL_RCC_OscConfig+0x94e>
 80051a0:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	4a18      	ldr	r2, [pc, #96]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051a6:	f043 0304 	orr.w	r3, r3, #4
 80051aa:	6213      	str	r3, [r2, #32]
 80051ac:	4b16      	ldr	r3, [pc, #88]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	4a15      	ldr	r2, [pc, #84]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	6213      	str	r3, [r2, #32]
 80051b8:	e00b      	b.n	80051d2 <HAL_RCC_OscConfig+0x966>
 80051ba:	4b13      	ldr	r3, [pc, #76]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	4a12      	ldr	r2, [pc, #72]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	6213      	str	r3, [r2, #32]
 80051c6:	4b10      	ldr	r3, [pc, #64]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005208 <HAL_RCC_OscConfig+0x99c>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8087 	beq.w	80052f2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e4:	f7ff f876 	bl	80042d4 <HAL_GetTick>
 80051e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	e012      	b.n	8005214 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7ff f871 	bl	80042d4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d908      	bls.n	8005214 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e339      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000
 800520c:	10908120 	.word	0x10908120
 8005210:	40007000 	.word	0x40007000
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800521c:	2202      	movs	r2, #2
 800521e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005224:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	fa93 f2a3 	rbit	r2, r3
 800522e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005232:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800523c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005240:	2202      	movs	r2, #2
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005248:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	fa93 f2a3 	rbit	r2, r3
 8005252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005256:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800525a:	601a      	str	r2, [r3, #0]
  return result;
 800525c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005260:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005264:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	fab3 f383 	clz	r3, r3
 800526a:	b2db      	uxtb	r3, r3
 800526c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d102      	bne.n	800527c <HAL_RCC_OscConfig+0xa10>
 8005276:	4b98      	ldr	r3, [pc, #608]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	e013      	b.n	80052a4 <HAL_RCC_OscConfig+0xa38>
 800527c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005280:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005284:	2202      	movs	r2, #2
 8005286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	fa93 f2a3 	rbit	r2, r3
 8005296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800529a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	4b8d      	ldr	r3, [pc, #564]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052a8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80052ac:	2102      	movs	r1, #2
 80052ae:	6011      	str	r1, [r2, #0]
 80052b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052b4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	fa92 f1a2 	rbit	r1, r2
 80052be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052c2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80052c6:	6011      	str	r1, [r2, #0]
  return result;
 80052c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052cc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	fab2 f282 	clz	r2, r2
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	f002 021f 	and.w	r2, r2, #31
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f202 	lsl.w	r2, r1, r2
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f43f af7f 	beq.w	80051ee <HAL_RCC_OscConfig+0x982>
 80052f0:	e07d      	b.n	80053ee <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f2:	f7fe ffef 	bl	80042d4 <HAL_GetTick>
 80052f6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052fa:	e00b      	b.n	8005314 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052fc:	f7fe ffea 	bl	80042d4 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800530c:	4293      	cmp	r3, r2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e2b2      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
 8005314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005318:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800531c:	2202      	movs	r2, #2
 800531e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005324:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	fa93 f2a3 	rbit	r2, r3
 800532e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005332:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005340:	2202      	movs	r2, #2
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005348:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	fa93 f2a3 	rbit	r2, r3
 8005352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005356:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800535a:	601a      	str	r2, [r3, #0]
  return result;
 800535c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005360:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005364:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005366:	fab3 f383 	clz	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_RCC_OscConfig+0xb10>
 8005376:	4b58      	ldr	r3, [pc, #352]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	e013      	b.n	80053a4 <HAL_RCC_OscConfig+0xb38>
 800537c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005380:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005384:	2202      	movs	r2, #2
 8005386:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800538c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	fa93 f2a3 	rbit	r2, r3
 8005396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800539a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	4b4d      	ldr	r3, [pc, #308]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053a8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80053ac:	2102      	movs	r1, #2
 80053ae:	6011      	str	r1, [r2, #0]
 80053b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053b4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	fa92 f1a2 	rbit	r1, r2
 80053be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053c2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80053c6:	6011      	str	r1, [r2, #0]
  return result;
 80053c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80053cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	fab2 f282 	clz	r2, r2
 80053d6:	b2d2      	uxtb	r2, r2
 80053d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	f002 021f 	and.w	r2, r2, #31
 80053e2:	2101      	movs	r1, #1
 80053e4:	fa01 f202 	lsl.w	r2, r1, r2
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d186      	bne.n	80052fc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053ee:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d105      	bne.n	8005402 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f6:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	4a37      	ldr	r2, [pc, #220]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 80053fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005400:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005406:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 8232 	beq.w	8005878 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005414:	4b30      	ldr	r3, [pc, #192]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f003 030c 	and.w	r3, r3, #12
 800541c:	2b08      	cmp	r3, #8
 800541e:	f000 8201 	beq.w	8005824 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005426:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b02      	cmp	r3, #2
 8005430:	f040 8157 	bne.w	80056e2 <HAL_RCC_OscConfig+0xe76>
 8005434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005438:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800543c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005446:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	fa93 f2a3 	rbit	r2, r3
 8005450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005454:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005458:	601a      	str	r2, [r3, #0]
  return result;
 800545a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800545e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005462:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005464:	fab3 f383 	clz	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800546e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	461a      	mov	r2, r3
 8005476:	2300      	movs	r3, #0
 8005478:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547a:	f7fe ff2b 	bl	80042d4 <HAL_GetTick>
 800547e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005482:	e009      	b.n	8005498 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005484:	f7fe ff26 	bl	80042d4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e1f0      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
 8005498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800549c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80054a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	fa93 f2a3 	rbit	r2, r3
 80054b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80054bc:	601a      	str	r2, [r3, #0]
  return result;
 80054be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80054c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054c8:	fab3 f383 	clz	r3, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80054d0:	d804      	bhi.n	80054dc <HAL_RCC_OscConfig+0xc70>
 80054d2:	4b01      	ldr	r3, [pc, #4]	@ (80054d8 <HAL_RCC_OscConfig+0xc6c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	e029      	b.n	800552c <HAL_RCC_OscConfig+0xcc0>
 80054d8:	40021000 	.word	0x40021000
 80054dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80054e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	fa93 f2a3 	rbit	r2, r3
 80054f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80054fc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005506:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800550a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005514:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	fa93 f2a3 	rbit	r2, r3
 800551e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005522:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4bc3      	ldr	r3, [pc, #780]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005530:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005534:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005538:	6011      	str	r1, [r2, #0]
 800553a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800553e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	fa92 f1a2 	rbit	r1, r2
 8005548:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800554c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005550:	6011      	str	r1, [r2, #0]
  return result;
 8005552:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005556:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	fab2 f282 	clz	r2, r2
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	f042 0220 	orr.w	r2, r2, #32
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	f002 021f 	and.w	r2, r2, #31
 800556c:	2101      	movs	r1, #1
 800556e:	fa01 f202 	lsl.w	r2, r1, r2
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d185      	bne.n	8005484 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005578:	4baf      	ldr	r3, [pc, #700]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800558c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	430b      	orrs	r3, r1
 800559a:	49a7      	ldr	r1, [pc, #668]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 800559c:	4313      	orrs	r3, r2
 800559e:	604b      	str	r3, [r1, #4]
 80055a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80055a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80055ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055b2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	fa93 f2a3 	rbit	r2, r3
 80055bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055c0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80055c4:	601a      	str	r2, [r3, #0]
  return result;
 80055c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80055ca:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80055ce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d0:	fab3 f383 	clz	r3, r3
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80055da:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	461a      	mov	r2, r3
 80055e2:	2301      	movs	r3, #1
 80055e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fe fe75 	bl	80042d4 <HAL_GetTick>
 80055ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ee:	e009      	b.n	8005604 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f0:	f7fe fe70 	bl	80042d4 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e13a      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
 8005604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005608:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800560c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005616:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	fa93 f2a3 	rbit	r2, r3
 8005620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005624:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005628:	601a      	str	r2, [r3, #0]
  return result;
 800562a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800562e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005632:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005634:	fab3 f383 	clz	r3, r3
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b3f      	cmp	r3, #63	@ 0x3f
 800563c:	d802      	bhi.n	8005644 <HAL_RCC_OscConfig+0xdd8>
 800563e:	4b7e      	ldr	r3, [pc, #504]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	e027      	b.n	8005694 <HAL_RCC_OscConfig+0xe28>
 8005644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005648:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800564c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005656:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	fa93 f2a3 	rbit	r2, r3
 8005660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005664:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800566e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005672:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800567c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	fa93 f2a3 	rbit	r2, r3
 8005686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800568a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800568e:	601a      	str	r2, [r3, #0]
 8005690:	4b69      	ldr	r3, [pc, #420]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 8005692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005694:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005698:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800569c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80056a0:	6011      	str	r1, [r2, #0]
 80056a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80056a6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	fa92 f1a2 	rbit	r1, r2
 80056b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80056b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80056b8:	6011      	str	r1, [r2, #0]
  return result;
 80056ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80056be:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	fab2 f282 	clz	r2, r2
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	f042 0220 	orr.w	r2, r2, #32
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	f002 021f 	and.w	r2, r2, #31
 80056d4:	2101      	movs	r1, #1
 80056d6:	fa01 f202 	lsl.w	r2, r1, r2
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d087      	beq.n	80055f0 <HAL_RCC_OscConfig+0xd84>
 80056e0:	e0ca      	b.n	8005878 <HAL_RCC_OscConfig+0x100c>
 80056e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056e6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80056ea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80056ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80056f4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	fa93 f2a3 	rbit	r2, r3
 80056fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005702:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005706:	601a      	str	r2, [r3, #0]
  return result;
 8005708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800570c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005710:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005712:	fab3 f383 	clz	r3, r3
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800571c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	461a      	mov	r2, r3
 8005724:	2300      	movs	r3, #0
 8005726:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fe fdd4 	bl	80042d4 <HAL_GetTick>
 800572c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005730:	e009      	b.n	8005746 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005732:	f7fe fdcf 	bl	80042d4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e099      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
 8005746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800574a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800574e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005758:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	fa93 f2a3 	rbit	r2, r3
 8005762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005766:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800576a:	601a      	str	r2, [r3, #0]
  return result;
 800576c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005770:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005774:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b3f      	cmp	r3, #63	@ 0x3f
 800577e:	d802      	bhi.n	8005786 <HAL_RCC_OscConfig+0xf1a>
 8005780:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	e027      	b.n	80057d6 <HAL_RCC_OscConfig+0xf6a>
 8005786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800578a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800578e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005794:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005798:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	fa93 f2a3 	rbit	r2, r3
 80057a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057a6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80057b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057be:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	fa93 f2a3 	rbit	r2, r3
 80057c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80057cc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	4b19      	ldr	r3, [pc, #100]	@ (8005838 <HAL_RCC_OscConfig+0xfcc>)
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80057de:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80057e2:	6011      	str	r1, [r2, #0]
 80057e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057e8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	fa92 f1a2 	rbit	r1, r2
 80057f2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80057f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80057fa:	6011      	str	r1, [r2, #0]
  return result;
 80057fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005800:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	fab2 f282 	clz	r2, r2
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	f042 0220 	orr.w	r2, r2, #32
 8005810:	b2d2      	uxtb	r2, r2
 8005812:	f002 021f 	and.w	r2, r2, #31
 8005816:	2101      	movs	r1, #1
 8005818:	fa01 f202 	lsl.w	r2, r1, r2
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d187      	bne.n	8005732 <HAL_RCC_OscConfig+0xec6>
 8005822:	e029      	b.n	8005878 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005828:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d103      	bne.n	800583c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e020      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
 8005838:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800583c:	4b11      	ldr	r3, [pc, #68]	@ (8005884 <HAL_RCC_OscConfig+0x1018>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005844:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005848:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800584c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	429a      	cmp	r2, r3
 800585a:	d10b      	bne.n	8005874 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800585c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005860:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005868:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005870:	429a      	cmp	r2, r3
 8005872:	d001      	beq.n	8005878 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e000      	b.n	800587a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000

08005888 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b09e      	sub	sp, #120	@ 0x78
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e154      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a0:	4b89      	ldr	r3, [pc, #548]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d910      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ae:	4b86      	ldr	r3, [pc, #536]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 0207 	bic.w	r2, r3, #7
 80058b6:	4984      	ldr	r1, [pc, #528]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b82      	ldr	r3, [pc, #520]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e13c      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b7b      	ldr	r3, [pc, #492]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	4978      	ldr	r1, [pc, #480]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80cd 	beq.w	8005a96 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d137      	bne.n	8005974 <HAL_RCC_ClockConfig+0xec>
 8005904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005908:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800590a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590c:	fa93 f3a3 	rbit	r3, r3
 8005910:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005914:	fab3 f383 	clz	r3, r3
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b3f      	cmp	r3, #63	@ 0x3f
 800591c:	d802      	bhi.n	8005924 <HAL_RCC_ClockConfig+0x9c>
 800591e:	4b6b      	ldr	r3, [pc, #428]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	e00f      	b.n	8005944 <HAL_RCC_ClockConfig+0xbc>
 8005924:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005928:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	667b      	str	r3, [r7, #100]	@ 0x64
 8005932:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005936:	663b      	str	r3, [r7, #96]	@ 0x60
 8005938:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800593a:	fa93 f3a3 	rbit	r3, r3
 800593e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005940:	4b62      	ldr	r3, [pc, #392]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005948:	65ba      	str	r2, [r7, #88]	@ 0x58
 800594a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800594c:	fa92 f2a2 	rbit	r2, r2
 8005950:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005952:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005954:	fab2 f282 	clz	r2, r2
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	f042 0220 	orr.w	r2, r2, #32
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	f002 021f 	and.w	r2, r2, #31
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f202 	lsl.w	r2, r1, r2
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d171      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0ea      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d137      	bne.n	80059ec <HAL_RCC_ClockConfig+0x164>
 800597c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005980:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005984:	fa93 f3a3 	rbit	r3, r3
 8005988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800598a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800598c:	fab3 f383 	clz	r3, r3
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b3f      	cmp	r3, #63	@ 0x3f
 8005994:	d802      	bhi.n	800599c <HAL_RCC_ClockConfig+0x114>
 8005996:	4b4d      	ldr	r3, [pc, #308]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	e00f      	b.n	80059bc <HAL_RCC_ClockConfig+0x134>
 800599c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059a4:	fa93 f3a3 	rbit	r3, r3
 80059a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80059b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b2:	fa93 f3a3 	rbit	r3, r3
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059b8:	4b44      	ldr	r3, [pc, #272]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80059c0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80059c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059c4:	fa92 f2a2 	rbit	r2, r2
 80059c8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80059ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059cc:	fab2 f282 	clz	r2, r2
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	f042 0220 	orr.w	r2, r2, #32
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	f002 021f 	and.w	r2, r2, #31
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f202 	lsl.w	r2, r1, r2
 80059e2:	4013      	ands	r3, r2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d135      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0ae      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
 80059ec:	2302      	movs	r3, #2
 80059ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	fa93 f3a3 	rbit	r3, r3
 80059f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80059f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fa:	fab3 f383 	clz	r3, r3
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a02:	d802      	bhi.n	8005a0a <HAL_RCC_ClockConfig+0x182>
 8005a04:	4b31      	ldr	r3, [pc, #196]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	e00d      	b.n	8005a26 <HAL_RCC_ClockConfig+0x19e>
 8005a0a:	2302      	movs	r3, #2
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a16:	2302      	movs	r3, #2
 8005a18:	623b      	str	r3, [r7, #32]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	fa93 f3a3 	rbit	r3, r3
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	4b2a      	ldr	r3, [pc, #168]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	2202      	movs	r2, #2
 8005a28:	61ba      	str	r2, [r7, #24]
 8005a2a:	69ba      	ldr	r2, [r7, #24]
 8005a2c:	fa92 f2a2 	rbit	r2, r2
 8005a30:	617a      	str	r2, [r7, #20]
  return result;
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	fab2 f282 	clz	r2, r2
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	f042 0220 	orr.w	r2, r2, #32
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	f002 021f 	and.w	r2, r2, #31
 8005a44:	2101      	movs	r1, #1
 8005a46:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e07a      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a54:	4b1d      	ldr	r3, [pc, #116]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f023 0203 	bic.w	r2, r3, #3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	491a      	ldr	r1, [pc, #104]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a66:	f7fe fc35 	bl	80042d4 <HAL_GetTick>
 8005a6a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a6e:	f7fe fc31 	bl	80042d4 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e062      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a84:	4b11      	ldr	r3, [pc, #68]	@ (8005acc <HAL_RCC_ClockConfig+0x244>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 020c 	and.w	r2, r3, #12
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d1eb      	bne.n	8005a6e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a96:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0307 	and.w	r3, r3, #7
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d215      	bcs.n	8005ad0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aa4:	4b08      	ldr	r3, [pc, #32]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 0207 	bic.w	r2, r3, #7
 8005aac:	4906      	ldr	r1, [pc, #24]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab4:	4b04      	ldr	r3, [pc, #16]	@ (8005ac8 <HAL_RCC_ClockConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0307 	and.w	r3, r3, #7
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d006      	beq.n	8005ad0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e041      	b.n	8005b4a <HAL_RCC_ClockConfig+0x2c2>
 8005ac6:	bf00      	nop
 8005ac8:	40022000 	.word	0x40022000
 8005acc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0304 	and.w	r3, r3, #4
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005adc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b54 <HAL_RCC_ClockConfig+0x2cc>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	491a      	ldr	r1, [pc, #104]	@ (8005b54 <HAL_RCC_ClockConfig+0x2cc>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005afa:	4b16      	ldr	r3, [pc, #88]	@ (8005b54 <HAL_RCC_ClockConfig+0x2cc>)
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4912      	ldr	r1, [pc, #72]	@ (8005b54 <HAL_RCC_ClockConfig+0x2cc>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b0e:	f000 f829 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 8005b12:	4601      	mov	r1, r0
 8005b14:	4b0f      	ldr	r3, [pc, #60]	@ (8005b54 <HAL_RCC_ClockConfig+0x2cc>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b1c:	22f0      	movs	r2, #240	@ 0xf0
 8005b1e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	fa92 f2a2 	rbit	r2, r2
 8005b26:	60fa      	str	r2, [r7, #12]
  return result;
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	fab2 f282 	clz	r2, r2
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	40d3      	lsrs	r3, r2
 8005b32:	4a09      	ldr	r2, [pc, #36]	@ (8005b58 <HAL_RCC_ClockConfig+0x2d0>)
 8005b34:	5cd3      	ldrb	r3, [r2, r3]
 8005b36:	fa21 f303 	lsr.w	r3, r1, r3
 8005b3a:	4a08      	ldr	r2, [pc, #32]	@ (8005b5c <HAL_RCC_ClockConfig+0x2d4>)
 8005b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005b3e:	4b08      	ldr	r3, [pc, #32]	@ (8005b60 <HAL_RCC_ClockConfig+0x2d8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe fb82 	bl	800424c <HAL_InitTick>
  
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3778      	adds	r7, #120	@ 0x78
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40021000 	.word	0x40021000
 8005b58:	08007df0 	.word	0x08007df0
 8005b5c:	200000e4 	.word	0x200000e4
 8005b60:	2000016c 	.word	0x2000016c

08005b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	2300      	movs	r3, #0
 8005b74:	617b      	str	r3, [r7, #20]
 8005b76:	2300      	movs	r3, #0
 8005b78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 030c 	and.w	r3, r3, #12
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	d002      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0x30>
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d003      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0x36>
 8005b92:	e026      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b94:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8005b96:	613b      	str	r3, [r7, #16]
      break;
 8005b98:	e026      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	0c9b      	lsrs	r3, r3, #18
 8005b9e:	f003 030f 	and.w	r3, r3, #15
 8005ba2:	4a17      	ldr	r2, [pc, #92]	@ (8005c00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ba4:	5cd3      	ldrb	r3, [r2, r3]
 8005ba6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005ba8:	4b13      	ldr	r3, [pc, #76]	@ (8005bf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	f003 030f 	and.w	r3, r3, #15
 8005bb0:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005bb2:	5cd3      	ldrb	r3, [r2, r3]
 8005bb4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	e004      	b.n	8005bdc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8005c08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	613b      	str	r3, [r7, #16]
      break;
 8005be0:	e002      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005be2:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <HAL_RCC_GetSysClockFreq+0x98>)
 8005be4:	613b      	str	r3, [r7, #16]
      break;
 8005be6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005be8:	693b      	ldr	r3, [r7, #16]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	007a1200 	.word	0x007a1200
 8005c00:	08007edc 	.word	0x08007edc
 8005c04:	08007eec 	.word	0x08007eec
 8005c08:	003d0900 	.word	0x003d0900

08005c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c10:	4b03      	ldr	r3, [pc, #12]	@ (8005c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	200000e4 	.word	0x200000e4

08005c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005c2a:	f7ff ffef 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c38:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005c3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	fa92 f2a2 	rbit	r2, r2
 8005c44:	603a      	str	r2, [r7, #0]
  return result;
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	fab2 f282 	clz	r2, r2
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	40d3      	lsrs	r3, r2
 8005c50:	4a04      	ldr	r2, [pc, #16]	@ (8005c64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c52:	5cd3      	ldrb	r3, [r2, r3]
 8005c54:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	08007e00 	.word	0x08007e00

08005c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c6e:	f7ff ffcd 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c72:	4601      	mov	r1, r0
 8005c74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005c7c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005c80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	fa92 f2a2 	rbit	r2, r2
 8005c88:	603a      	str	r2, [r7, #0]
  return result;
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	fab2 f282 	clz	r2, r2
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	40d3      	lsrs	r3, r2
 8005c94:	4a04      	ldr	r2, [pc, #16]	@ (8005ca8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c96:	5cd3      	ldrb	r3, [r2, r3]
 8005c98:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	08007e00 	.word	0x08007e00

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b092      	sub	sp, #72	@ 0x48
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 80cb 	beq.w	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cd0:	4b85      	ldr	r3, [pc, #532]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10e      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cdc:	4b82      	ldr	r3, [pc, #520]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	4a81      	ldr	r2, [pc, #516]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce6:	61d3      	str	r3, [r2, #28]
 8005ce8:	4b7f      	ldr	r3, [pc, #508]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cf0:	60bb      	str	r3, [r7, #8]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfa:	4b7c      	ldr	r3, [pc, #496]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d118      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d06:	4b79      	ldr	r3, [pc, #484]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a78      	ldr	r2, [pc, #480]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d12:	f7fe fadf 	bl	80042d4 <HAL_GetTick>
 8005d16:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d18:	e008      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1a:	f7fe fadb 	bl	80042d4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b64      	cmp	r3, #100	@ 0x64
 8005d26:	d901      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e0d9      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d38:	4b6b      	ldr	r3, [pc, #428]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d07b      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d074      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d56:	4b64      	ldr	r3, [pc, #400]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d64:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d70:	fab3 f383 	clz	r3, r3
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	4b5d      	ldr	r3, [pc, #372]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	461a      	mov	r2, r3
 8005d80:	2301      	movs	r3, #1
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005d88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8c:	fa93 f3a3 	rbit	r3, r3
 8005d90:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d94:	fab3 f383 	clz	r3, r3
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4b54      	ldr	r3, [pc, #336]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	461a      	mov	r2, r3
 8005da4:	2300      	movs	r3, #0
 8005da6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005da8:	4a4f      	ldr	r2, [pc, #316]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d043      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fe fa8c 	bl	80042d4 <HAL_GetTick>
 8005dbc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc0:	f7fe fa88 	bl	80042d4 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e084      	b.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	fa93 f3a3 	rbit	r3, r3
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de2:	2302      	movs	r3, #2
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	fa93 f3a3 	rbit	r3, r3
 8005dec:	61fb      	str	r3, [r7, #28]
  return result;
 8005dee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	fab3 f383 	clz	r3, r3
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d102      	bne.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005e00:	4b39      	ldr	r3, [pc, #228]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e02:	6a1b      	ldr	r3, [r3, #32]
 8005e04:	e007      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005e06:	2302      	movs	r3, #2
 8005e08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	fa93 f3a3 	rbit	r3, r3
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	4b35      	ldr	r3, [pc, #212]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e16:	2202      	movs	r2, #2
 8005e18:	613a      	str	r2, [r7, #16]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	fa92 f2a2 	rbit	r2, r2
 8005e20:	60fa      	str	r2, [r7, #12]
  return result;
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	fab2 f282 	clz	r2, r2
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	f002 021f 	and.w	r2, r2, #31
 8005e34:	2101      	movs	r1, #1
 8005e36:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d0bf      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e40:	4b29      	ldr	r3, [pc, #164]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4926      	ldr	r1, [pc, #152]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d105      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e5a:	4b23      	ldr	r3, [pc, #140]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	4a22      	ldr	r2, [pc, #136]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e64:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d008      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e72:	4b1d      	ldr	r3, [pc, #116]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	f023 0203 	bic.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	491a      	ldr	r1, [pc, #104]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e90:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	f023 0210 	bic.w	r2, r3, #16
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4912      	ldr	r1, [pc, #72]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eae:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	490b      	ldr	r1, [pc, #44]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d008      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005ecc:	4b06      	ldr	r3, [pc, #24]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	4903      	ldr	r1, [pc, #12]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3748      	adds	r7, #72	@ 0x48
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40007000 	.word	0x40007000
 8005ef0:	10908100 	.word	0x10908100

08005ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e049      	b.n	8005f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc fdf6 	bl	8002b0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f000 fd48 	bl	80069c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d001      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e040      	b.n	800603e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <HAL_TIM_Base_Start_IT+0xa8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00e      	beq.n	8005ffc <HAL_TIM_Base_Start_IT+0x58>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d009      	beq.n	8005ffc <HAL_TIM_Base_Start_IT+0x58>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a18      	ldr	r2, [pc, #96]	@ (8006050 <HAL_TIM_Base_Start_IT+0xac>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d004      	beq.n	8005ffc <HAL_TIM_Base_Start_IT+0x58>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a17      	ldr	r2, [pc, #92]	@ (8006054 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d115      	bne.n	8006028 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	4b15      	ldr	r3, [pc, #84]	@ (8006058 <HAL_TIM_Base_Start_IT+0xb4>)
 8006004:	4013      	ands	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b06      	cmp	r3, #6
 800600c:	d015      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x96>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006014:	d011      	beq.n	800603a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f042 0201 	orr.w	r2, r2, #1
 8006024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006026:	e008      	b.n	800603a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e000      	b.n	800603c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40000400 	.word	0x40000400
 8006054:	40014000 	.word	0x40014000
 8006058:	00010007 	.word	0x00010007

0800605c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e049      	b.n	8006102 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d106      	bne.n	8006088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7fc fce2 	bl	8002a4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f000 fc94 	bl	80069c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d109      	bne.n	8006130 <HAL_TIM_PWM_Start+0x24>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b01      	cmp	r3, #1
 8006126:	bf14      	ite	ne
 8006128:	2301      	movne	r3, #1
 800612a:	2300      	moveq	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	e03c      	b.n	80061aa <HAL_TIM_PWM_Start+0x9e>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b04      	cmp	r3, #4
 8006134:	d109      	bne.n	800614a <HAL_TIM_PWM_Start+0x3e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	bf14      	ite	ne
 8006142:	2301      	movne	r3, #1
 8006144:	2300      	moveq	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	e02f      	b.n	80061aa <HAL_TIM_PWM_Start+0x9e>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x58>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e022      	b.n	80061aa <HAL_TIM_PWM_Start+0x9e>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b0c      	cmp	r3, #12
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x72>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e015      	b.n	80061aa <HAL_TIM_PWM_Start+0x9e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b10      	cmp	r3, #16
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x8c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e008      	b.n	80061aa <HAL_TIM_PWM_Start+0x9e>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	bf14      	ite	ne
 80061a4:	2301      	movne	r3, #1
 80061a6:	2300      	moveq	r3, #0
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e088      	b.n	80062c4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <HAL_TIM_PWM_Start+0xb6>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061c0:	e023      	b.n	800620a <HAL_TIM_PWM_Start+0xfe>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b04      	cmp	r3, #4
 80061c6:	d104      	bne.n	80061d2 <HAL_TIM_PWM_Start+0xc6>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061d0:	e01b      	b.n	800620a <HAL_TIM_PWM_Start+0xfe>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d104      	bne.n	80061e2 <HAL_TIM_PWM_Start+0xd6>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061e0:	e013      	b.n	800620a <HAL_TIM_PWM_Start+0xfe>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b0c      	cmp	r3, #12
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0xe6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061f0:	e00b      	b.n	800620a <HAL_TIM_PWM_Start+0xfe>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0xf6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006200:	e003      	b.n	800620a <HAL_TIM_PWM_Start+0xfe>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2201      	movs	r2, #1
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 ff02 	bl	800701c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a2b      	ldr	r2, [pc, #172]	@ (80062cc <HAL_TIM_PWM_Start+0x1c0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_TIM_PWM_Start+0x134>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <HAL_TIM_PWM_Start+0x1c4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_TIM_PWM_Start+0x134>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a28      	ldr	r2, [pc, #160]	@ (80062d4 <HAL_TIM_PWM_Start+0x1c8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_TIM_PWM_Start+0x134>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a27      	ldr	r2, [pc, #156]	@ (80062d8 <HAL_TIM_PWM_Start+0x1cc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_TIM_PWM_Start+0x138>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_TIM_PWM_Start+0x13a>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006258:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a1b      	ldr	r2, [pc, #108]	@ (80062cc <HAL_TIM_PWM_Start+0x1c0>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00e      	beq.n	8006282 <HAL_TIM_PWM_Start+0x176>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626c:	d009      	beq.n	8006282 <HAL_TIM_PWM_Start+0x176>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a1a      	ldr	r2, [pc, #104]	@ (80062dc <HAL_TIM_PWM_Start+0x1d0>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_PWM_Start+0x176>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a14      	ldr	r2, [pc, #80]	@ (80062d0 <HAL_TIM_PWM_Start+0x1c4>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d115      	bne.n	80062ae <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	4b15      	ldr	r3, [pc, #84]	@ (80062e0 <HAL_TIM_PWM_Start+0x1d4>)
 800628a:	4013      	ands	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b06      	cmp	r3, #6
 8006292:	d015      	beq.n	80062c0 <HAL_TIM_PWM_Start+0x1b4>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800629a:	d011      	beq.n	80062c0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f042 0201 	orr.w	r2, r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ac:	e008      	b.n	80062c0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0201 	orr.w	r2, r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
 80062be:	e000      	b.n	80062c2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	40012c00 	.word	0x40012c00
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800
 80062dc:	40000400 	.word	0x40000400
 80062e0:	00010007 	.word	0x00010007

080062e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e097      	b.n	8006428 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fc fbbd 	bl	8002a8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	6812      	ldr	r2, [r2, #0]
 8006324:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006328:	f023 0307 	bic.w	r3, r3, #7
 800632c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f000 fb45 	bl	80069c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	4313      	orrs	r3, r2
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006384:	f023 030c 	bic.w	r3, r3, #12
 8006388:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006390:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	4313      	orrs	r3, r2
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	011a      	lsls	r2, r3, #4
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	031b      	lsls	r3, r3, #12
 80063b4:	4313      	orrs	r3, r2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80063ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	4313      	orrs	r3, r2
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006440:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006448:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006450:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006458:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d110      	bne.n	8006482 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006460:	7bfb      	ldrb	r3, [r7, #15]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d102      	bne.n	800646c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006466:	7b7b      	ldrb	r3, [r7, #13]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d001      	beq.n	8006470 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e069      	b.n	8006544 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2202      	movs	r2, #2
 800647c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006480:	e031      	b.n	80064e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b04      	cmp	r3, #4
 8006486:	d110      	bne.n	80064aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d102      	bne.n	8006494 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800648e:	7b3b      	ldrb	r3, [r7, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d001      	beq.n	8006498 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e055      	b.n	8006544 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2202      	movs	r2, #2
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064a8:	e01d      	b.n	80064e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d108      	bne.n	80064c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d105      	bne.n	80064c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80064b6:	7b7b      	ldrb	r3, [r7, #13]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d102      	bne.n	80064c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80064bc:	7b3b      	ldrb	r3, [r7, #12]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d001      	beq.n	80064c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e03e      	b.n	8006544 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2202      	movs	r2, #2
 80064da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d003      	beq.n	80064f4 <HAL_TIM_Encoder_Start+0xc4>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d008      	beq.n	8006504 <HAL_TIM_Encoder_Start+0xd4>
 80064f2:	e00f      	b.n	8006514 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2201      	movs	r2, #1
 80064fa:	2100      	movs	r1, #0
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fd8d 	bl	800701c <TIM_CCxChannelCmd>
      break;
 8006502:	e016      	b.n	8006532 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2201      	movs	r2, #1
 800650a:	2104      	movs	r1, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fd85 	bl	800701c <TIM_CCxChannelCmd>
      break;
 8006512:	e00e      	b.n	8006532 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2201      	movs	r2, #1
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fd7d 	bl	800701c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2201      	movs	r2, #1
 8006528:	2104      	movs	r1, #4
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fd76 	bl	800701c <TIM_CCxChannelCmd>
      break;
 8006530:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f042 0201 	orr.w	r2, r2, #1
 8006540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d020      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01b      	beq.n	80065b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f06f 0202 	mvn.w	r2, #2
 8006580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	f003 0303 	and.w	r3, r3, #3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9f8 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 800659c:	e005      	b.n	80065aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9ea 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f9fb 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f003 0304 	and.w	r3, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d020      	beq.n	80065fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01b      	beq.n	80065fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f06f 0204 	mvn.w	r2, #4
 80065cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2202      	movs	r2, #2
 80065d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f9d2 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 80065e8:	e005      	b.n	80065f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9c4 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f9d5 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f003 0308 	and.w	r3, r3, #8
 8006602:	2b00      	cmp	r3, #0
 8006604:	d020      	beq.n	8006648 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0308 	and.w	r3, r3, #8
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01b      	beq.n	8006648 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0208 	mvn.w	r2, #8
 8006618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2204      	movs	r2, #4
 800661e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	69db      	ldr	r3, [r3, #28]
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f9ac 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 8006634:	e005      	b.n	8006642 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f99e 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9af 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b00      	cmp	r3, #0
 8006650:	d020      	beq.n	8006694 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f003 0310 	and.w	r3, r3, #16
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01b      	beq.n	8006694 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0210 	mvn.w	r2, #16
 8006664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2208      	movs	r2, #8
 800666a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f986 	bl	800698c <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f978 	bl	8006978 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f989 	bl	80069a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00c      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0201 	mvn.w	r2, #1
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb ff7a 	bl	80025ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00c      	beq.n	80066dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d007      	beq.n	80066dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fdb6 	bl	8007248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00c      	beq.n	8006700 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 fdae 	bl	800725c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00c      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800671c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f948 	bl	80069b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0320 	and.w	r3, r3, #32
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0220 	mvn.w	r2, #32
 8006740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fd76 	bl	8007234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006748:	bf00      	nop
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800676a:	2302      	movs	r3, #2
 800676c:	e0ff      	b.n	800696e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b14      	cmp	r3, #20
 800677a:	f200 80f0 	bhi.w	800695e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800677e:	a201      	add	r2, pc, #4	@ (adr r2, 8006784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006784:	080067d9 	.word	0x080067d9
 8006788:	0800695f 	.word	0x0800695f
 800678c:	0800695f 	.word	0x0800695f
 8006790:	0800695f 	.word	0x0800695f
 8006794:	08006819 	.word	0x08006819
 8006798:	0800695f 	.word	0x0800695f
 800679c:	0800695f 	.word	0x0800695f
 80067a0:	0800695f 	.word	0x0800695f
 80067a4:	0800685b 	.word	0x0800685b
 80067a8:	0800695f 	.word	0x0800695f
 80067ac:	0800695f 	.word	0x0800695f
 80067b0:	0800695f 	.word	0x0800695f
 80067b4:	0800689b 	.word	0x0800689b
 80067b8:	0800695f 	.word	0x0800695f
 80067bc:	0800695f 	.word	0x0800695f
 80067c0:	0800695f 	.word	0x0800695f
 80067c4:	080068dd 	.word	0x080068dd
 80067c8:	0800695f 	.word	0x0800695f
 80067cc:	0800695f 	.word	0x0800695f
 80067d0:	0800695f 	.word	0x0800695f
 80067d4:	0800691d 	.word	0x0800691d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 f976 	bl	8006ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699a      	ldr	r2, [r3, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0208 	orr.w	r2, r2, #8
 80067f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699a      	ldr	r2, [r3, #24]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0204 	bic.w	r2, r2, #4
 8006802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6999      	ldr	r1, [r3, #24]
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	619a      	str	r2, [r3, #24]
      break;
 8006816:	e0a5      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68b9      	ldr	r1, [r7, #8]
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f9dc 	bl	8006bdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	699a      	ldr	r2, [r3, #24]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6999      	ldr	r1, [r3, #24]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	021a      	lsls	r2, r3, #8
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	430a      	orrs	r2, r1
 8006856:	619a      	str	r2, [r3, #24]
      break;
 8006858:	e084      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fa3b 	bl	8006cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	69da      	ldr	r2, [r3, #28]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0208 	orr.w	r2, r2, #8
 8006874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0204 	bic.w	r2, r2, #4
 8006884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69d9      	ldr	r1, [r3, #28]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	61da      	str	r2, [r3, #28]
      break;
 8006898:	e064      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68b9      	ldr	r1, [r7, #8]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fa99 	bl	8006dd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69da      	ldr	r2, [r3, #28]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	69da      	ldr	r2, [r3, #28]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69d9      	ldr	r1, [r3, #28]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	021a      	lsls	r2, r3, #8
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	61da      	str	r2, [r3, #28]
      break;
 80068da:	e043      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fadc 	bl	8006ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0208 	orr.w	r2, r2, #8
 80068f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0204 	bic.w	r2, r2, #4
 8006906:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800691a:	e023      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fb1a 	bl	8006f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006936:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006946:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800695c:	e002      	b.n	8006964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
      break;
 8006962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800696c:	7dfb      	ldrb	r3, [r7, #23]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop

08006978 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a38      	ldr	r2, [pc, #224]	@ (8006abc <TIM_Base_SetConfig+0xf4>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_Base_SetConfig+0x28>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e6:	d003      	beq.n	80069f0 <TIM_Base_SetConfig+0x28>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a35      	ldr	r2, [pc, #212]	@ (8006ac0 <TIM_Base_SetConfig+0xf8>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d108      	bne.n	8006a02 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2d      	ldr	r2, [pc, #180]	@ (8006abc <TIM_Base_SetConfig+0xf4>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d013      	beq.n	8006a32 <TIM_Base_SetConfig+0x6a>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a10:	d00f      	beq.n	8006a32 <TIM_Base_SetConfig+0x6a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2a      	ldr	r2, [pc, #168]	@ (8006ac0 <TIM_Base_SetConfig+0xf8>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d00b      	beq.n	8006a32 <TIM_Base_SetConfig+0x6a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a29      	ldr	r2, [pc, #164]	@ (8006ac4 <TIM_Base_SetConfig+0xfc>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d007      	beq.n	8006a32 <TIM_Base_SetConfig+0x6a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a28      	ldr	r2, [pc, #160]	@ (8006ac8 <TIM_Base_SetConfig+0x100>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d003      	beq.n	8006a32 <TIM_Base_SetConfig+0x6a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a27      	ldr	r2, [pc, #156]	@ (8006acc <TIM_Base_SetConfig+0x104>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d108      	bne.n	8006a44 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a14      	ldr	r2, [pc, #80]	@ (8006abc <TIM_Base_SetConfig+0xf4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <TIM_Base_SetConfig+0xc0>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a14      	ldr	r2, [pc, #80]	@ (8006ac4 <TIM_Base_SetConfig+0xfc>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d007      	beq.n	8006a88 <TIM_Base_SetConfig+0xc0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a13      	ldr	r2, [pc, #76]	@ (8006ac8 <TIM_Base_SetConfig+0x100>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_Base_SetConfig+0xc0>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a12      	ldr	r2, [pc, #72]	@ (8006acc <TIM_Base_SetConfig+0x104>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d103      	bne.n	8006a90 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d105      	bne.n	8006aae <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f023 0201 	bic.w	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	611a      	str	r2, [r3, #16]
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40012c00 	.word	0x40012c00
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800

08006ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	f023 0201 	bic.w	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 0302 	bic.w	r3, r3, #2
 8006b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a28      	ldr	r2, [pc, #160]	@ (8006bcc <TIM_OC1_SetConfig+0xfc>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d00b      	beq.n	8006b48 <TIM_OC1_SetConfig+0x78>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a27      	ldr	r2, [pc, #156]	@ (8006bd0 <TIM_OC1_SetConfig+0x100>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d007      	beq.n	8006b48 <TIM_OC1_SetConfig+0x78>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a26      	ldr	r2, [pc, #152]	@ (8006bd4 <TIM_OC1_SetConfig+0x104>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d003      	beq.n	8006b48 <TIM_OC1_SetConfig+0x78>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a25      	ldr	r2, [pc, #148]	@ (8006bd8 <TIM_OC1_SetConfig+0x108>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d10c      	bne.n	8006b62 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f023 0308 	bic.w	r3, r3, #8
 8006b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 0304 	bic.w	r3, r3, #4
 8006b60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a19      	ldr	r2, [pc, #100]	@ (8006bcc <TIM_OC1_SetConfig+0xfc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00b      	beq.n	8006b82 <TIM_OC1_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a18      	ldr	r2, [pc, #96]	@ (8006bd0 <TIM_OC1_SetConfig+0x100>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d007      	beq.n	8006b82 <TIM_OC1_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a17      	ldr	r2, [pc, #92]	@ (8006bd4 <TIM_OC1_SetConfig+0x104>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d003      	beq.n	8006b82 <TIM_OC1_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a16      	ldr	r2, [pc, #88]	@ (8006bd8 <TIM_OC1_SetConfig+0x108>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d111      	bne.n	8006ba6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	693a      	ldr	r2, [r7, #16]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	621a      	str	r2, [r3, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	40014400 	.word	0x40014400
 8006bd8:	40014800 	.word	0x40014800

08006bdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	f023 0210 	bic.w	r2, r3, #16
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0320 	bic.w	r3, r3, #32
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a24      	ldr	r2, [pc, #144]	@ (8006ccc <TIM_OC2_SetConfig+0xf0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10d      	bne.n	8006c5c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ccc <TIM_OC2_SetConfig+0xf0>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00b      	beq.n	8006c7c <TIM_OC2_SetConfig+0xa0>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd0 <TIM_OC2_SetConfig+0xf4>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d007      	beq.n	8006c7c <TIM_OC2_SetConfig+0xa0>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a19      	ldr	r2, [pc, #100]	@ (8006cd4 <TIM_OC2_SetConfig+0xf8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC2_SetConfig+0xa0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a18      	ldr	r2, [pc, #96]	@ (8006cd8 <TIM_OC2_SetConfig+0xfc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d113      	bne.n	8006ca4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c82:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c8a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	621a      	str	r2, [r3, #32]
}
 8006cbe:	bf00      	nop
 8006cc0:	371c      	adds	r7, #28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	40012c00 	.word	0x40012c00
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800

08006cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a1b      	ldr	r3, [r3, #32]
 8006cf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0303 	bic.w	r3, r3, #3
 8006d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a23      	ldr	r2, [pc, #140]	@ (8006dc8 <TIM_OC3_SetConfig+0xec>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d10d      	bne.n	8006d5a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	021b      	lsls	r3, r3, #8
 8006d4c:	697a      	ldr	r2, [r7, #20]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d58:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc8 <TIM_OC3_SetConfig+0xec>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d00b      	beq.n	8006d7a <TIM_OC3_SetConfig+0x9e>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a19      	ldr	r2, [pc, #100]	@ (8006dcc <TIM_OC3_SetConfig+0xf0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d007      	beq.n	8006d7a <TIM_OC3_SetConfig+0x9e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a18      	ldr	r2, [pc, #96]	@ (8006dd0 <TIM_OC3_SetConfig+0xf4>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d003      	beq.n	8006d7a <TIM_OC3_SetConfig+0x9e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a17      	ldr	r2, [pc, #92]	@ (8006dd4 <TIM_OC3_SetConfig+0xf8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d113      	bne.n	8006da2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	011b      	lsls	r3, r3, #4
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	621a      	str	r2, [r3, #32]
}
 8006dbc:	bf00      	nop
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	40012c00 	.word	0x40012c00
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a16      	ldr	r2, [pc, #88]	@ (8006e90 <TIM_OC4_SetConfig+0xb8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00b      	beq.n	8006e54 <TIM_OC4_SetConfig+0x7c>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a15      	ldr	r2, [pc, #84]	@ (8006e94 <TIM_OC4_SetConfig+0xbc>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d007      	beq.n	8006e54 <TIM_OC4_SetConfig+0x7c>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a14      	ldr	r2, [pc, #80]	@ (8006e98 <TIM_OC4_SetConfig+0xc0>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_OC4_SetConfig+0x7c>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a13      	ldr	r2, [pc, #76]	@ (8006e9c <TIM_OC4_SetConfig+0xc4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d109      	bne.n	8006e68 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	019b      	lsls	r3, r3, #6
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	693a      	ldr	r2, [r7, #16]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40014400 	.word	0x40014400
 8006e9c:	40014800 	.word	0x40014800

08006ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ece:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006ee4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	041b      	lsls	r3, r3, #16
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a15      	ldr	r2, [pc, #84]	@ (8006f4c <TIM_OC5_SetConfig+0xac>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00b      	beq.n	8006f12 <TIM_OC5_SetConfig+0x72>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a14      	ldr	r2, [pc, #80]	@ (8006f50 <TIM_OC5_SetConfig+0xb0>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_OC5_SetConfig+0x72>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a13      	ldr	r2, [pc, #76]	@ (8006f54 <TIM_OC5_SetConfig+0xb4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC5_SetConfig+0x72>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a12      	ldr	r2, [pc, #72]	@ (8006f58 <TIM_OC5_SetConfig+0xb8>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d109      	bne.n	8006f26 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	695b      	ldr	r3, [r3, #20]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	621a      	str	r2, [r3, #32]
}
 8006f40:	bf00      	nop
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	40012c00 	.word	0x40012c00
 8006f50:	40014000 	.word	0x40014000
 8006f54:	40014400 	.word	0x40014400
 8006f58:	40014800 	.word	0x40014800

08006f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	021b      	lsls	r3, r3, #8
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	051b      	lsls	r3, r3, #20
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a16      	ldr	r2, [pc, #88]	@ (800700c <TIM_OC6_SetConfig+0xb0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x74>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a15      	ldr	r2, [pc, #84]	@ (8007010 <TIM_OC6_SetConfig+0xb4>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x74>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a14      	ldr	r2, [pc, #80]	@ (8007014 <TIM_OC6_SetConfig+0xb8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_OC6_SetConfig+0x74>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a13      	ldr	r2, [pc, #76]	@ (8007018 <TIM_OC6_SetConfig+0xbc>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d109      	bne.n	8006fe4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400
 8007018:	40014800 	.word	0x40014800

0800701c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2201      	movs	r2, #1
 8007030:	fa02 f303 	lsl.w	r3, r2, r3
 8007034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1a      	ldr	r2, [r3, #32]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	43db      	mvns	r3, r3
 800703e:	401a      	ands	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6a1a      	ldr	r2, [r3, #32]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	6879      	ldr	r1, [r7, #4]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	431a      	orrs	r2, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
	...

08007068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800707c:	2302      	movs	r3, #2
 800707e:	e054      	b.n	800712a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2202      	movs	r2, #2
 800708c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a24      	ldr	r2, [pc, #144]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d108      	bne.n	80070bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a17      	ldr	r2, [pc, #92]	@ (8007138 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00e      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e8:	d009      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a13      	ldr	r2, [pc, #76]	@ (800713c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d004      	beq.n	80070fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a11      	ldr	r2, [pc, #68]	@ (8007140 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10c      	bne.n	8007118 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007104:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4313      	orrs	r3, r2
 800710e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40000400 	.word	0x40000400
 8007140:	40014000 	.word	0x40014000

08007144 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007158:	2b01      	cmp	r3, #1
 800715a:	d101      	bne.n	8007160 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800715c:	2302      	movs	r3, #2
 800715e:	e060      	b.n	8007222 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4313      	orrs	r3, r2
 8007182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	041b      	lsls	r3, r3, #16
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a14      	ldr	r2, [pc, #80]	@ (8007230 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d115      	bne.n	8007210 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ee:	051b      	lsls	r3, r3, #20
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40012c00 	.word	0x40012c00

08007234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d101      	bne.n	8007282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e040      	b.n	8007304 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d106      	bne.n	8007298 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7fb fc98 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2224      	movs	r2, #36	@ 0x24
 800729c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d002      	beq.n	80072bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f95e 	bl	8007578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f825 	bl	800730c <UART_SetConfig>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e01b      	b.n	8007304 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9dd 	bl	80076bc <UART_CheckIdleState>
 8007302:	4603      	mov	r3, r0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	69db      	ldr	r3, [r3, #28]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4b8a      	ldr	r3, [pc, #552]	@ (8007560 <UART_SetConfig+0x254>)
 8007338:	4013      	ands	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	6979      	ldr	r1, [r7, #20]
 8007340:	430b      	orrs	r3, r1
 8007342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a1b      	ldr	r3, [r3, #32]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a78      	ldr	r2, [pc, #480]	@ (8007564 <UART_SetConfig+0x258>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d120      	bne.n	80073ca <UART_SetConfig+0xbe>
 8007388:	4b77      	ldr	r3, [pc, #476]	@ (8007568 <UART_SetConfig+0x25c>)
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	f003 0303 	and.w	r3, r3, #3
 8007390:	2b03      	cmp	r3, #3
 8007392:	d817      	bhi.n	80073c4 <UART_SetConfig+0xb8>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <UART_SetConfig+0x90>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073ad 	.word	0x080073ad
 80073a0:	080073b9 	.word	0x080073b9
 80073a4:	080073bf 	.word	0x080073bf
 80073a8:	080073b3 	.word	0x080073b3
 80073ac:	2300      	movs	r3, #0
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e01d      	b.n	80073ee <UART_SetConfig+0xe2>
 80073b2:	2302      	movs	r3, #2
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e01a      	b.n	80073ee <UART_SetConfig+0xe2>
 80073b8:	2304      	movs	r3, #4
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e017      	b.n	80073ee <UART_SetConfig+0xe2>
 80073be:	2308      	movs	r3, #8
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e014      	b.n	80073ee <UART_SetConfig+0xe2>
 80073c4:	2310      	movs	r3, #16
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e011      	b.n	80073ee <UART_SetConfig+0xe2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a67      	ldr	r2, [pc, #412]	@ (800756c <UART_SetConfig+0x260>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d102      	bne.n	80073da <UART_SetConfig+0xce>
 80073d4:	2300      	movs	r3, #0
 80073d6:	77fb      	strb	r3, [r7, #31]
 80073d8:	e009      	b.n	80073ee <UART_SetConfig+0xe2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a64      	ldr	r2, [pc, #400]	@ (8007570 <UART_SetConfig+0x264>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d102      	bne.n	80073ea <UART_SetConfig+0xde>
 80073e4:	2300      	movs	r3, #0
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e001      	b.n	80073ee <UART_SetConfig+0xe2>
 80073ea:	2310      	movs	r3, #16
 80073ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f6:	d15a      	bne.n	80074ae <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80073f8:	7ffb      	ldrb	r3, [r7, #31]
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d827      	bhi.n	800744e <UART_SetConfig+0x142>
 80073fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007404 <UART_SetConfig+0xf8>)
 8007400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007404:	08007429 	.word	0x08007429
 8007408:	08007431 	.word	0x08007431
 800740c:	08007439 	.word	0x08007439
 8007410:	0800744f 	.word	0x0800744f
 8007414:	0800743f 	.word	0x0800743f
 8007418:	0800744f 	.word	0x0800744f
 800741c:	0800744f 	.word	0x0800744f
 8007420:	0800744f 	.word	0x0800744f
 8007424:	08007447 	.word	0x08007447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007428:	f7fe fbfc 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 800742c:	61b8      	str	r0, [r7, #24]
        break;
 800742e:	e013      	b.n	8007458 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007430:	f7fe fc1a 	bl	8005c68 <HAL_RCC_GetPCLK2Freq>
 8007434:	61b8      	str	r0, [r7, #24]
        break;
 8007436:	e00f      	b.n	8007458 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007438:	4b4e      	ldr	r3, [pc, #312]	@ (8007574 <UART_SetConfig+0x268>)
 800743a:	61bb      	str	r3, [r7, #24]
        break;
 800743c:	e00c      	b.n	8007458 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800743e:	f7fe fb91 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 8007442:	61b8      	str	r0, [r7, #24]
        break;
 8007444:	e008      	b.n	8007458 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800744a:	61bb      	str	r3, [r7, #24]
        break;
 800744c:	e004      	b.n	8007458 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	77bb      	strb	r3, [r7, #30]
        break;
 8007456:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d074      	beq.n	8007548 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	005a      	lsls	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	441a      	add	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007472:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b0f      	cmp	r3, #15
 8007478:	d916      	bls.n	80074a8 <UART_SetConfig+0x19c>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007480:	d212      	bcs.n	80074a8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	b29b      	uxth	r3, r3
 8007486:	f023 030f 	bic.w	r3, r3, #15
 800748a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	b29b      	uxth	r3, r3
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	b29a      	uxth	r2, r3
 8007498:	89fb      	ldrh	r3, [r7, #14]
 800749a:	4313      	orrs	r3, r2
 800749c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	89fa      	ldrh	r2, [r7, #14]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	e04f      	b.n	8007548 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	77bb      	strb	r3, [r7, #30]
 80074ac:	e04c      	b.n	8007548 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ae:	7ffb      	ldrb	r3, [r7, #31]
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	d828      	bhi.n	8007506 <UART_SetConfig+0x1fa>
 80074b4:	a201      	add	r2, pc, #4	@ (adr r2, 80074bc <UART_SetConfig+0x1b0>)
 80074b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ba:	bf00      	nop
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074e9 	.word	0x080074e9
 80074c4:	080074f1 	.word	0x080074f1
 80074c8:	08007507 	.word	0x08007507
 80074cc:	080074f7 	.word	0x080074f7
 80074d0:	08007507 	.word	0x08007507
 80074d4:	08007507 	.word	0x08007507
 80074d8:	08007507 	.word	0x08007507
 80074dc:	080074ff 	.word	0x080074ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074e0:	f7fe fba0 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 80074e4:	61b8      	str	r0, [r7, #24]
        break;
 80074e6:	e013      	b.n	8007510 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074e8:	f7fe fbbe 	bl	8005c68 <HAL_RCC_GetPCLK2Freq>
 80074ec:	61b8      	str	r0, [r7, #24]
        break;
 80074ee:	e00f      	b.n	8007510 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074f0:	4b20      	ldr	r3, [pc, #128]	@ (8007574 <UART_SetConfig+0x268>)
 80074f2:	61bb      	str	r3, [r7, #24]
        break;
 80074f4:	e00c      	b.n	8007510 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074f6:	f7fe fb35 	bl	8005b64 <HAL_RCC_GetSysClockFreq>
 80074fa:	61b8      	str	r0, [r7, #24]
        break;
 80074fc:	e008      	b.n	8007510 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007502:	61bb      	str	r3, [r7, #24]
        break;
 8007504:	e004      	b.n	8007510 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	77bb      	strb	r3, [r7, #30]
        break;
 800750e:	bf00      	nop
    }

    if (pclk != 0U)
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d018      	beq.n	8007548 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085a      	lsrs	r2, r3, #1
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	441a      	add	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	2b0f      	cmp	r3, #15
 800752e:	d909      	bls.n	8007544 <UART_SetConfig+0x238>
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007536:	d205      	bcs.n	8007544 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	b29a      	uxth	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60da      	str	r2, [r3, #12]
 8007542:	e001      	b.n	8007548 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007554:	7fbb      	ldrb	r3, [r7, #30]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3720      	adds	r7, #32
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	efff69f3 	.word	0xefff69f3
 8007564:	40013800 	.word	0x40013800
 8007568:	40021000 	.word	0x40021000
 800756c:	40004400 	.word	0x40004400
 8007570:	40004800 	.word	0x40004800
 8007574:	007a1200 	.word	0x007a1200

08007578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	f003 0302 	and.w	r3, r3, #2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ea:	f003 0304 	and.w	r3, r3, #4
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01a      	beq.n	800768e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007676:	d10a      	bne.n	800768e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b098      	sub	sp, #96	@ 0x60
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076cc:	f7fc fe02 	bl	80042d4 <HAL_GetTick>
 80076d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d12e      	bne.n	800773e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	2200      	movs	r2, #0
 80076ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f88c 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d021      	beq.n	800773e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800770a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800770e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007718:	647b      	str	r3, [r7, #68]	@ 0x44
 800771a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800771e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2220      	movs	r2, #32
 8007730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e062      	b.n	8007804 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b04      	cmp	r3, #4
 800774a:	d149      	bne.n	80077e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800774c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007754:	2200      	movs	r2, #0
 8007756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f856 	bl	800780c <UART_WaitOnFlagUntilTimeout>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d03c      	beq.n	80077e0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	e853 3f00 	ldrex	r3, [r3]
 8007772:	623b      	str	r3, [r7, #32]
   return(result);
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800777a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	461a      	mov	r2, r3
 8007782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007784:	633b      	str	r3, [r7, #48]	@ 0x30
 8007786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800778a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e6      	bne.n	8007766 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3308      	adds	r3, #8
 800779e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	e853 3f00 	ldrex	r3, [r3]
 80077a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0301 	bic.w	r3, r3, #1
 80077ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	3308      	adds	r3, #8
 80077b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077b8:	61fa      	str	r2, [r7, #28]
 80077ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077bc:	69b9      	ldr	r1, [r7, #24]
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	e841 2300 	strex	r3, r2, [r1]
 80077c4:	617b      	str	r3, [r7, #20]
   return(result);
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1e5      	bne.n	8007798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e011      	b.n	8007804 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3758      	adds	r7, #88	@ 0x58
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800781c:	e04f      	b.n	80078be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007824:	d04b      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007826:	f7fc fd55 	bl	80042d4 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	69ba      	ldr	r2, [r7, #24]
 8007832:	429a      	cmp	r2, r3
 8007834:	d302      	bcc.n	800783c <UART_WaitOnFlagUntilTimeout+0x30>
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800783c:	2303      	movs	r3, #3
 800783e:	e04e      	b.n	80078de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d037      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0xb2>
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b80      	cmp	r3, #128	@ 0x80
 8007852:	d034      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0xb2>
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b40      	cmp	r3, #64	@ 0x40
 8007858:	d031      	beq.n	80078be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f003 0308 	and.w	r3, r3, #8
 8007864:	2b08      	cmp	r3, #8
 8007866:	d110      	bne.n	800788a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2208      	movs	r2, #8
 800786e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 f838 	bl	80078e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2208      	movs	r2, #8
 800787a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e029      	b.n	80078de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007898:	d111      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80078a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078a4:	68f8      	ldr	r0, [r7, #12]
 80078a6:	f000 f81e 	bl	80078e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80078ba:	2303      	movs	r3, #3
 80078bc:	e00f      	b.n	80078de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69da      	ldr	r2, [r3, #28]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	4013      	ands	r3, r2
 80078c8:	68ba      	ldr	r2, [r7, #8]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	79fb      	ldrb	r3, [r7, #7]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d0a0      	beq.n	800781e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b095      	sub	sp, #84	@ 0x54
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f6:	e853 3f00 	ldrex	r3, [r3]
 80078fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800790c:	643b      	str	r3, [r7, #64]	@ 0x40
 800790e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007910:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007914:	e841 2300 	strex	r3, r2, [r1]
 8007918:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800791a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1e6      	bne.n	80078ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3308      	adds	r3, #8
 8007926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	e853 3f00 	ldrex	r3, [r3]
 800792e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f023 0301 	bic.w	r3, r3, #1
 8007936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007948:	e841 2300 	strex	r3, r2, [r1]
 800794c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1e5      	bne.n	8007920 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007958:	2b01      	cmp	r3, #1
 800795a:	d118      	bne.n	800798e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	60bb      	str	r3, [r7, #8]
   return(result);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	f023 0310 	bic.w	r3, r3, #16
 8007970:	647b      	str	r3, [r7, #68]	@ 0x44
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800797a:	61bb      	str	r3, [r7, #24]
 800797c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6979      	ldr	r1, [r7, #20]
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	613b      	str	r3, [r7, #16]
   return(result);
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e6      	bne.n	800795c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079a2:	bf00      	nop
 80079a4:	3754      	adds	r7, #84	@ 0x54
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <_Znwj>:
 80079ae:	2801      	cmp	r0, #1
 80079b0:	bf38      	it	cc
 80079b2:	2001      	movcc	r0, #1
 80079b4:	b510      	push	{r4, lr}
 80079b6:	4604      	mov	r4, r0
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 f8bb 	bl	8007b34 <malloc>
 80079be:	b100      	cbz	r0, 80079c2 <_Znwj+0x14>
 80079c0:	bd10      	pop	{r4, pc}
 80079c2:	f000 f805 	bl	80079d0 <_ZSt15get_new_handlerv>
 80079c6:	b908      	cbnz	r0, 80079cc <_Znwj+0x1e>
 80079c8:	f000 f8ac 	bl	8007b24 <abort>
 80079cc:	4780      	blx	r0
 80079ce:	e7f3      	b.n	80079b8 <_Znwj+0xa>

080079d0 <_ZSt15get_new_handlerv>:
 80079d0:	4b02      	ldr	r3, [pc, #8]	@ (80079dc <_ZSt15get_new_handlerv+0xc>)
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	f3bf 8f5b 	dmb	ish
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	200005a4 	.word	0x200005a4

080079e0 <fmodf>:
 80079e0:	b508      	push	{r3, lr}
 80079e2:	ed2d 8b02 	vpush	{d8}
 80079e6:	eef0 8a40 	vmov.f32	s17, s0
 80079ea:	eeb0 8a60 	vmov.f32	s16, s1
 80079ee:	f000 f817 	bl	8007a20 <__ieee754_fmodf>
 80079f2:	eef4 8a48 	vcmp.f32	s17, s16
 80079f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079fa:	d60c      	bvs.n	8007a16 <fmodf+0x36>
 80079fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007a1c <fmodf+0x3c>
 8007a00:	eeb4 8a68 	vcmp.f32	s16, s17
 8007a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a08:	d105      	bne.n	8007a16 <fmodf+0x36>
 8007a0a:	f000 f9a5 	bl	8007d58 <__errno>
 8007a0e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007a12:	2321      	movs	r3, #33	@ 0x21
 8007a14:	6003      	str	r3, [r0, #0]
 8007a16:	ecbd 8b02 	vpop	{d8}
 8007a1a:	bd08      	pop	{r3, pc}
 8007a1c:	00000000 	.word	0x00000000

08007a20 <__ieee754_fmodf>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	ee10 6a90 	vmov	r6, s1
 8007a26:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007a2a:	1e5a      	subs	r2, r3, #1
 8007a2c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007a30:	d206      	bcs.n	8007a40 <__ieee754_fmodf+0x20>
 8007a32:	ee10 4a10 	vmov	r4, s0
 8007a36:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8007a3a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007a3e:	d304      	bcc.n	8007a4a <__ieee754_fmodf+0x2a>
 8007a40:	ee60 0a20 	vmul.f32	s1, s0, s1
 8007a44:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8007a48:	bd70      	pop	{r4, r5, r6, pc}
 8007a4a:	4299      	cmp	r1, r3
 8007a4c:	dbfc      	blt.n	8007a48 <__ieee754_fmodf+0x28>
 8007a4e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8007a52:	d105      	bne.n	8007a60 <__ieee754_fmodf+0x40>
 8007a54:	4b32      	ldr	r3, [pc, #200]	@ (8007b20 <__ieee754_fmodf+0x100>)
 8007a56:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8007a5a:	ed93 0a00 	vldr	s0, [r3]
 8007a5e:	e7f3      	b.n	8007a48 <__ieee754_fmodf+0x28>
 8007a60:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8007a64:	d146      	bne.n	8007af4 <__ieee754_fmodf+0xd4>
 8007a66:	020a      	lsls	r2, r1, #8
 8007a68:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	dc3e      	bgt.n	8007aee <__ieee754_fmodf+0xce>
 8007a70:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8007a74:	bf01      	itttt	eq
 8007a76:	021a      	lsleq	r2, r3, #8
 8007a78:	fab2 f282 	clzeq	r2, r2
 8007a7c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8007a80:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8007a84:	bf16      	itet	ne
 8007a86:	15da      	asrne	r2, r3, #23
 8007a88:	3282      	addeq	r2, #130	@ 0x82
 8007a8a:	3a7f      	subne	r2, #127	@ 0x7f
 8007a8c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8007a90:	bfbb      	ittet	lt
 8007a92:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8007a96:	1a24      	sublt	r4, r4, r0
 8007a98:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8007a9c:	40a1      	lsllt	r1, r4
 8007a9e:	bfa8      	it	ge
 8007aa0:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8007aa4:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8007aa8:	bfb5      	itete	lt
 8007aaa:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8007aae:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8007ab2:	1aa4      	sublt	r4, r4, r2
 8007ab4:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8007ab8:	bfb8      	it	lt
 8007aba:	fa03 f404 	lsllt.w	r4, r3, r4
 8007abe:	1a80      	subs	r0, r0, r2
 8007ac0:	1b0b      	subs	r3, r1, r4
 8007ac2:	b9d0      	cbnz	r0, 8007afa <__ieee754_fmodf+0xda>
 8007ac4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8007ac8:	bf28      	it	cs
 8007aca:	460b      	movcs	r3, r1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0c1      	beq.n	8007a54 <__ieee754_fmodf+0x34>
 8007ad0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ad4:	db19      	blt.n	8007b0a <__ieee754_fmodf+0xea>
 8007ad6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8007ada:	db19      	blt.n	8007b10 <__ieee754_fmodf+0xf0>
 8007adc:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8007ae0:	327f      	adds	r2, #127	@ 0x7f
 8007ae2:	432b      	orrs	r3, r5
 8007ae4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007ae8:	ee00 3a10 	vmov	s0, r3
 8007aec:	e7ac      	b.n	8007a48 <__ieee754_fmodf+0x28>
 8007aee:	3801      	subs	r0, #1
 8007af0:	0052      	lsls	r2, r2, #1
 8007af2:	e7bb      	b.n	8007a6c <__ieee754_fmodf+0x4c>
 8007af4:	15c8      	asrs	r0, r1, #23
 8007af6:	387f      	subs	r0, #127	@ 0x7f
 8007af8:	e7ba      	b.n	8007a70 <__ieee754_fmodf+0x50>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	da02      	bge.n	8007b04 <__ieee754_fmodf+0xe4>
 8007afe:	0049      	lsls	r1, r1, #1
 8007b00:	3801      	subs	r0, #1
 8007b02:	e7dd      	b.n	8007ac0 <__ieee754_fmodf+0xa0>
 8007b04:	d0a6      	beq.n	8007a54 <__ieee754_fmodf+0x34>
 8007b06:	0059      	lsls	r1, r3, #1
 8007b08:	e7fa      	b.n	8007b00 <__ieee754_fmodf+0xe0>
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	3a01      	subs	r2, #1
 8007b0e:	e7df      	b.n	8007ad0 <__ieee754_fmodf+0xb0>
 8007b10:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8007b14:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8007b18:	3282      	adds	r2, #130	@ 0x82
 8007b1a:	4113      	asrs	r3, r2
 8007b1c:	432b      	orrs	r3, r5
 8007b1e:	e7e3      	b.n	8007ae8 <__ieee754_fmodf+0xc8>
 8007b20:	08007efc 	.word	0x08007efc

08007b24 <abort>:
 8007b24:	b508      	push	{r3, lr}
 8007b26:	2006      	movs	r0, #6
 8007b28:	f000 f8ea 	bl	8007d00 <raise>
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f7fb f8e1 	bl	8002cf4 <_exit>
	...

08007b34 <malloc>:
 8007b34:	4b02      	ldr	r3, [pc, #8]	@ (8007b40 <malloc+0xc>)
 8007b36:	4601      	mov	r1, r0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	f000 b825 	b.w	8007b88 <_malloc_r>
 8007b3e:	bf00      	nop
 8007b40:	20000174 	.word	0x20000174

08007b44 <sbrk_aligned>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	4e0f      	ldr	r6, [pc, #60]	@ (8007b84 <sbrk_aligned+0x40>)
 8007b48:	460c      	mov	r4, r1
 8007b4a:	6831      	ldr	r1, [r6, #0]
 8007b4c:	4605      	mov	r5, r0
 8007b4e:	b911      	cbnz	r1, 8007b56 <sbrk_aligned+0x12>
 8007b50:	f000 f8f2 	bl	8007d38 <_sbrk_r>
 8007b54:	6030      	str	r0, [r6, #0]
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f8ed 	bl	8007d38 <_sbrk_r>
 8007b5e:	1c43      	adds	r3, r0, #1
 8007b60:	d103      	bne.n	8007b6a <sbrk_aligned+0x26>
 8007b62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007b66:	4620      	mov	r0, r4
 8007b68:	bd70      	pop	{r4, r5, r6, pc}
 8007b6a:	1cc4      	adds	r4, r0, #3
 8007b6c:	f024 0403 	bic.w	r4, r4, #3
 8007b70:	42a0      	cmp	r0, r4
 8007b72:	d0f8      	beq.n	8007b66 <sbrk_aligned+0x22>
 8007b74:	1a21      	subs	r1, r4, r0
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 f8de 	bl	8007d38 <_sbrk_r>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1f2      	bne.n	8007b66 <sbrk_aligned+0x22>
 8007b80:	e7ef      	b.n	8007b62 <sbrk_aligned+0x1e>
 8007b82:	bf00      	nop
 8007b84:	200005a8 	.word	0x200005a8

08007b88 <_malloc_r>:
 8007b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b8c:	1ccd      	adds	r5, r1, #3
 8007b8e:	f025 0503 	bic.w	r5, r5, #3
 8007b92:	3508      	adds	r5, #8
 8007b94:	2d0c      	cmp	r5, #12
 8007b96:	bf38      	it	cc
 8007b98:	250c      	movcc	r5, #12
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	4606      	mov	r6, r0
 8007b9e:	db01      	blt.n	8007ba4 <_malloc_r+0x1c>
 8007ba0:	42a9      	cmp	r1, r5
 8007ba2:	d904      	bls.n	8007bae <_malloc_r+0x26>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	6033      	str	r3, [r6, #0]
 8007ba8:	2000      	movs	r0, #0
 8007baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c84 <_malloc_r+0xfc>
 8007bb2:	f000 f869 	bl	8007c88 <__malloc_lock>
 8007bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bba:	461c      	mov	r4, r3
 8007bbc:	bb44      	cbnz	r4, 8007c10 <_malloc_r+0x88>
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7ff ffbf 	bl	8007b44 <sbrk_aligned>
 8007bc6:	1c43      	adds	r3, r0, #1
 8007bc8:	4604      	mov	r4, r0
 8007bca:	d158      	bne.n	8007c7e <_malloc_r+0xf6>
 8007bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8007bd0:	4627      	mov	r7, r4
 8007bd2:	2f00      	cmp	r7, #0
 8007bd4:	d143      	bne.n	8007c5e <_malloc_r+0xd6>
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	d04b      	beq.n	8007c72 <_malloc_r+0xea>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	4639      	mov	r1, r7
 8007bde:	4630      	mov	r0, r6
 8007be0:	eb04 0903 	add.w	r9, r4, r3
 8007be4:	f000 f8a8 	bl	8007d38 <_sbrk_r>
 8007be8:	4581      	cmp	r9, r0
 8007bea:	d142      	bne.n	8007c72 <_malloc_r+0xea>
 8007bec:	6821      	ldr	r1, [r4, #0]
 8007bee:	1a6d      	subs	r5, r5, r1
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7ff ffa6 	bl	8007b44 <sbrk_aligned>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	d03a      	beq.n	8007c72 <_malloc_r+0xea>
 8007bfc:	6823      	ldr	r3, [r4, #0]
 8007bfe:	442b      	add	r3, r5
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	f8d8 3000 	ldr.w	r3, [r8]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	bb62      	cbnz	r2, 8007c64 <_malloc_r+0xdc>
 8007c0a:	f8c8 7000 	str.w	r7, [r8]
 8007c0e:	e00f      	b.n	8007c30 <_malloc_r+0xa8>
 8007c10:	6822      	ldr	r2, [r4, #0]
 8007c12:	1b52      	subs	r2, r2, r5
 8007c14:	d420      	bmi.n	8007c58 <_malloc_r+0xd0>
 8007c16:	2a0b      	cmp	r2, #11
 8007c18:	d917      	bls.n	8007c4a <_malloc_r+0xc2>
 8007c1a:	1961      	adds	r1, r4, r5
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	6025      	str	r5, [r4, #0]
 8007c20:	bf18      	it	ne
 8007c22:	6059      	strne	r1, [r3, #4]
 8007c24:	6863      	ldr	r3, [r4, #4]
 8007c26:	bf08      	it	eq
 8007c28:	f8c8 1000 	streq.w	r1, [r8]
 8007c2c:	5162      	str	r2, [r4, r5]
 8007c2e:	604b      	str	r3, [r1, #4]
 8007c30:	4630      	mov	r0, r6
 8007c32:	f000 f82f 	bl	8007c94 <__malloc_unlock>
 8007c36:	f104 000b 	add.w	r0, r4, #11
 8007c3a:	1d23      	adds	r3, r4, #4
 8007c3c:	f020 0007 	bic.w	r0, r0, #7
 8007c40:	1ac2      	subs	r2, r0, r3
 8007c42:	bf1c      	itt	ne
 8007c44:	1a1b      	subne	r3, r3, r0
 8007c46:	50a3      	strne	r3, [r4, r2]
 8007c48:	e7af      	b.n	8007baa <_malloc_r+0x22>
 8007c4a:	6862      	ldr	r2, [r4, #4]
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	bf0c      	ite	eq
 8007c50:	f8c8 2000 	streq.w	r2, [r8]
 8007c54:	605a      	strne	r2, [r3, #4]
 8007c56:	e7eb      	b.n	8007c30 <_malloc_r+0xa8>
 8007c58:	4623      	mov	r3, r4
 8007c5a:	6864      	ldr	r4, [r4, #4]
 8007c5c:	e7ae      	b.n	8007bbc <_malloc_r+0x34>
 8007c5e:	463c      	mov	r4, r7
 8007c60:	687f      	ldr	r7, [r7, #4]
 8007c62:	e7b6      	b.n	8007bd2 <_malloc_r+0x4a>
 8007c64:	461a      	mov	r2, r3
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	42a3      	cmp	r3, r4
 8007c6a:	d1fb      	bne.n	8007c64 <_malloc_r+0xdc>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	6053      	str	r3, [r2, #4]
 8007c70:	e7de      	b.n	8007c30 <_malloc_r+0xa8>
 8007c72:	230c      	movs	r3, #12
 8007c74:	6033      	str	r3, [r6, #0]
 8007c76:	4630      	mov	r0, r6
 8007c78:	f000 f80c 	bl	8007c94 <__malloc_unlock>
 8007c7c:	e794      	b.n	8007ba8 <_malloc_r+0x20>
 8007c7e:	6005      	str	r5, [r0, #0]
 8007c80:	e7d6      	b.n	8007c30 <_malloc_r+0xa8>
 8007c82:	bf00      	nop
 8007c84:	200005ac 	.word	0x200005ac

08007c88 <__malloc_lock>:
 8007c88:	4801      	ldr	r0, [pc, #4]	@ (8007c90 <__malloc_lock+0x8>)
 8007c8a:	f000 b88f 	b.w	8007dac <__retarget_lock_acquire_recursive>
 8007c8e:	bf00      	nop
 8007c90:	200006ec 	.word	0x200006ec

08007c94 <__malloc_unlock>:
 8007c94:	4801      	ldr	r0, [pc, #4]	@ (8007c9c <__malloc_unlock+0x8>)
 8007c96:	f000 b88a 	b.w	8007dae <__retarget_lock_release_recursive>
 8007c9a:	bf00      	nop
 8007c9c:	200006ec 	.word	0x200006ec

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <_raise_r>:
 8007cb0:	291f      	cmp	r1, #31
 8007cb2:	b538      	push	{r3, r4, r5, lr}
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	d904      	bls.n	8007cc4 <_raise_r+0x14>
 8007cba:	2316      	movs	r3, #22
 8007cbc:	6003      	str	r3, [r0, #0]
 8007cbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc2:	bd38      	pop	{r3, r4, r5, pc}
 8007cc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cc6:	b112      	cbz	r2, 8007cce <_raise_r+0x1e>
 8007cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ccc:	b94b      	cbnz	r3, 8007ce2 <_raise_r+0x32>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f000 f830 	bl	8007d34 <_getpid_r>
 8007cd4:	4622      	mov	r2, r4
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	4628      	mov	r0, r5
 8007cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cde:	f000 b817 	b.w	8007d10 <_kill_r>
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d00a      	beq.n	8007cfc <_raise_r+0x4c>
 8007ce6:	1c59      	adds	r1, r3, #1
 8007ce8:	d103      	bne.n	8007cf2 <_raise_r+0x42>
 8007cea:	2316      	movs	r3, #22
 8007cec:	6003      	str	r3, [r0, #0]
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e7e7      	b.n	8007cc2 <_raise_r+0x12>
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	4798      	blx	r3
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	e7e0      	b.n	8007cc2 <_raise_r+0x12>

08007d00 <raise>:
 8007d00:	4b02      	ldr	r3, [pc, #8]	@ (8007d0c <raise+0xc>)
 8007d02:	4601      	mov	r1, r0
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	f7ff bfd3 	b.w	8007cb0 <_raise_r>
 8007d0a:	bf00      	nop
 8007d0c:	20000174 	.word	0x20000174

08007d10 <_kill_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d07      	ldr	r5, [pc, #28]	@ (8007d30 <_kill_r+0x20>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	f7fa ffd9 	bl	8002cd4 <_kill>
 8007d22:	1c43      	adds	r3, r0, #1
 8007d24:	d102      	bne.n	8007d2c <_kill_r+0x1c>
 8007d26:	682b      	ldr	r3, [r5, #0]
 8007d28:	b103      	cbz	r3, 8007d2c <_kill_r+0x1c>
 8007d2a:	6023      	str	r3, [r4, #0]
 8007d2c:	bd38      	pop	{r3, r4, r5, pc}
 8007d2e:	bf00      	nop
 8007d30:	200006e8 	.word	0x200006e8

08007d34 <_getpid_r>:
 8007d34:	f7fa bfc6 	b.w	8002cc4 <_getpid>

08007d38 <_sbrk_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	@ (8007d54 <_sbrk_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7fa ffe2 	bl	8002d0c <_sbrk>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_sbrk_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_sbrk_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	200006e8 	.word	0x200006e8

08007d58 <__errno>:
 8007d58:	4b01      	ldr	r3, [pc, #4]	@ (8007d60 <__errno+0x8>)
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000174 	.word	0x20000174

08007d64 <__libc_init_array>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4d0d      	ldr	r5, [pc, #52]	@ (8007d9c <__libc_init_array+0x38>)
 8007d68:	4c0d      	ldr	r4, [pc, #52]	@ (8007da0 <__libc_init_array+0x3c>)
 8007d6a:	1b64      	subs	r4, r4, r5
 8007d6c:	10a4      	asrs	r4, r4, #2
 8007d6e:	2600      	movs	r6, #0
 8007d70:	42a6      	cmp	r6, r4
 8007d72:	d109      	bne.n	8007d88 <__libc_init_array+0x24>
 8007d74:	4d0b      	ldr	r5, [pc, #44]	@ (8007da4 <__libc_init_array+0x40>)
 8007d76:	4c0c      	ldr	r4, [pc, #48]	@ (8007da8 <__libc_init_array+0x44>)
 8007d78:	f000 f81a 	bl	8007db0 <_init>
 8007d7c:	1b64      	subs	r4, r4, r5
 8007d7e:	10a4      	asrs	r4, r4, #2
 8007d80:	2600      	movs	r6, #0
 8007d82:	42a6      	cmp	r6, r4
 8007d84:	d105      	bne.n	8007d92 <__libc_init_array+0x2e>
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8c:	4798      	blx	r3
 8007d8e:	3601      	adds	r6, #1
 8007d90:	e7ee      	b.n	8007d70 <__libc_init_array+0xc>
 8007d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d96:	4798      	blx	r3
 8007d98:	3601      	adds	r6, #1
 8007d9a:	e7f2      	b.n	8007d82 <__libc_init_array+0x1e>
 8007d9c:	08007f04 	.word	0x08007f04
 8007da0:	08007f04 	.word	0x08007f04
 8007da4:	08007f04 	.word	0x08007f04
 8007da8:	08007f0c 	.word	0x08007f0c

08007dac <__retarget_lock_acquire_recursive>:
 8007dac:	4770      	bx	lr

08007dae <__retarget_lock_release_recursive>:
 8007dae:	4770      	bx	lr

08007db0 <_init>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr

08007dbc <_fini>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr


simple_foc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bc4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e88  08006e88  000081b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006e88  08006e88  000081b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006e88  08006e88  000081b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006e88  08006e88  00007e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e90  08006e90  00007e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  08006e94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081b8  2**0
                  CONTENTS
 10 .bss          0000048c  200001b8  200001b8  000081b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000644  20000644  000081b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015dad  00000000  00000000  000081e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003639  00000000  00000000  0001df95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000215d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd1  00000000  00000000  00022528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fac8  00000000  00000000  000230f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e4e  00000000  00000000  00042bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab7cf  00000000  00000000  00056a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001021de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004180  00000000  00000000  00102224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001063a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b8 	.word	0x200001b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d34 	.word	0x08006d34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001bc 	.word	0x200001bc
 80001c4:	08006d34 	.word	0x08006d34

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	ed87 0a01 	vstr	s0, [r7, #4]
 800079e:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a2:	eef0 7ae7 	vabs.f32	s15, s15
 80007a6:	eeb0 0a67 	vmov.f32	s0, s15
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_ZN9BLDCMotorC1Eifff>:
// BLDCMotor( int pp , float R)
// - pp            - pole pair number
// - R             - motor phase resistance
// - KV            - motor kv rating (rmp/v)
// - L             - motor phase inductance
BLDCMotor::BLDCMotor(int pp, float _R, float _KV, float _inductance)
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6178      	str	r0, [r7, #20]
 80007bc:	6139      	str	r1, [r7, #16]
 80007be:	ed87 0a03 	vstr	s0, [r7, #12]
 80007c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80007c6:	ed87 1a01 	vstr	s2, [r7, #4]
: FOCMotor()
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 ff83 	bl	80026d8 <_ZN8FOCMotorC1Ev>
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <_ZN9BLDCMotorC1Eifff+0x68>)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	601a      	str	r2, [r3, #0]
{
  // save pole pairs number
  pole_pairs = pp;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  // save phase resistance number
  phase_resistance = _R;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	649a      	str	r2, [r3, #72]	@ 0x48
  // save back emf constant KV = 1/KV
  // 1/sqrt(2) - rms value
  KV_rating = NOT_SET;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <_ZN9BLDCMotorC1Eifff+0x6c>)
 80007e8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (_isset(_KV))
 80007ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80007ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000824 <_ZN9BLDCMotorC1Eifff+0x70>
 80007f2:	eef4 7a47 	vcmp.f32	s15, s14
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d002      	beq.n	8000802 <_ZN9BLDCMotorC1Eifff+0x4e>
    KV_rating = _KV;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	651a      	str	r2, [r3, #80]	@ 0x50
  // save phase inductance
  phase_inductance = _inductance;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	655a      	str	r2, [r3, #84]	@ 0x54

  // torque control type is voltage by default
  torque_controller = TorqueControlType::voltage;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08006d54 	.word	0x08006d54
 8000820:	c640e400 	.word	0xc640e400
 8000824:	c640e400 	.word	0xc640e400

08000828 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>:


/**
	Link the driver which controls the motor
*/
void BLDCMotor::linkDriver(BLDCDriver* _driver) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  driver = _driver;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <_ZN9BLDCMotor4initEv>:

// init hardware pins
int BLDCMotor::init() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if (!driver || !driver->initialized) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <_ZN9BLDCMotor4initEv+0x24>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000860:	7c1b      	ldrb	r3, [r3, #16]
 8000862:	f083 0301 	eor.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <_ZN9BLDCMotor4initEv+0x30>
    motor_status = FOCMotorStatus::motor_init_failed;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	220f      	movs	r2, #15
 8000870:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    //SIMPLEFOC_DEBUG("MOT: Init not possible, driver not initialized");
    return 0;
 8000874:	2300      	movs	r3, #0
 8000876:	e078      	b.n	800096a <_ZN9BLDCMotor4initEv+0x122>
  }
  motor_status = FOCMotorStatus::motor_initializing;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  //SIMPLEFOC_DEBUG("MOT: Init");

  // sanity check for the voltage limit configuration
  if(voltage_limit > driver->voltage_limit) voltage_limit =  driver->voltage_limit;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800088c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000898:	dd05      	ble.n	80008a6 <_ZN9BLDCMotor4initEv+0x5e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	659a      	str	r2, [r3, #88]	@ 0x58
  // constrain voltage for sensor alignment
  if(voltage_sensor_align > voltage_limit) voltage_sensor_align = voltage_limit;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80008b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd03      	ble.n	80008c4 <_ZN9BLDCMotor4initEv+0x7c>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	641a      	str	r2, [r3, #64]	@ 0x40

  // update the controller limits
  if(current_sense){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d008      	beq.n	80008e0 <_ZN9BLDCMotor4initEv+0x98>
    // current control loop controls voltage
    PID_current_q.limit = voltage_limit;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	67da      	str	r2, [r3, #124]	@ 0x7c
    PID_current_d.limit = voltage_limit;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  }
  if(_isset(phase_resistance) || torque_controller != TorqueControlType::voltage){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80008e6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000974 <_ZN9BLDCMotor4initEv+0x12c>
 80008ea:	eef4 7a47 	vcmp.f32	s15, s14
 80008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f2:	d104      	bne.n	80008fe <_ZN9BLDCMotor4initEv+0xb6>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <_ZN9BLDCMotor4initEv+0xc2>
    // velocity control loop controls current
    PID_velocity.limit = current_limit;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8000908:	e004      	b.n	8000914 <_ZN9BLDCMotor4initEv+0xcc>
  }else{
    // velocity control loop controls the voltage
    PID_velocity.limit = voltage_limit;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  }
  P_angle.limit = velocity_limit;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  // if using open loop control, set a CW as the default direction if not already set
  if ((controller==MotionControlType::angle_openloop
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000924:	2b04      	cmp	r3, #4
 8000926:	d004      	beq.n	8000932 <_ZN9BLDCMotor4initEv+0xea>
     ||controller==MotionControlType::velocity_openloop)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800092e:	2b03      	cmp	r3, #3
 8000930:	d108      	bne.n	8000944 <_ZN9BLDCMotor4initEv+0xfc>
     && (sensor_direction == Direction::UNKNOWN)) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000938:	2b00      	cmp	r3, #0
 800093a:	d103      	bne.n	8000944 <_ZN9BLDCMotor4initEv+0xfc>
      sensor_direction = Direction::CW;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
  }

  HAL_Delay(500);
 8000944:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000948:	f002 ff0c 	bl	8003764 <HAL_Delay>
  // enable motor
  //SIMPLEFOC_DEBUG("MOT: Enable driver.");
  enable();
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3308      	adds	r3, #8
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	4798      	blx	r3
  HAL_Delay(500);
 8000958:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800095c:	f002 ff02 	bl	8003764 <HAL_Delay>
  motor_status = FOCMotorStatus::motor_uncalibrated;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2202      	movs	r2, #2
 8000964:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  return 1;
 8000968:	2301      	movs	r3, #1
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	c640e400 	.word	0xc640e400

08000978 <_ZN9BLDCMotor7disableEv>:


// disable motor driver
void BLDCMotor::disable()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  // disable the current sense
  if(current_sense) current_sense->disable();
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000986:	2b00      	cmp	r3, #0
 8000988:	d00a      	beq.n	80009a0 <_ZN9BLDCMotor7disableEv+0x28>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	3314      	adds	r3, #20
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4610      	mov	r0, r2
 800099e:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3310      	adds	r3, #16
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80009ec <_ZN9BLDCMotor7disableEv+0x74>
 80009b6:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80009ec <_ZN9BLDCMotor7disableEv+0x74>
 80009ba:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80009ec <_ZN9BLDCMotor7disableEv+0x74>
 80009be:	4610      	mov	r0, r2
 80009c0:	4798      	blx	r3
  // disable the driver
  driver->disable();
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009c8:	461a      	mov	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3308      	adds	r3, #8
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4610      	mov	r0, r2
 80009d8:	4798      	blx	r3
  // motor status update
  enabled = 0;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	00000000 	.word	0x00000000

080009f0 <_ZN9BLDCMotor6enableEv>:
// enable motor driver
void BLDCMotor::enable()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  // enable the driver
  driver->enable();
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009fe:	461a      	mov	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	3310      	adds	r3, #16
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000a8c <_ZN9BLDCMotor6enableEv+0x9c>
 8000a26:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000a8c <_ZN9BLDCMotor6enableEv+0x9c>
 8000a2a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8000a8c <_ZN9BLDCMotor6enableEv+0x9c>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4798      	blx	r3
  // enable the current sense
  if(current_sense) current_sense->enable();
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00a      	beq.n	8000a52 <_ZN9BLDCMotor6enableEv+0x62>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3310      	adds	r3, #16
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4798      	blx	r3
  // reset the pids
  PID_velocity.reset();
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	33cc      	adds	r3, #204	@ 0xcc
 8000a56:	4618      	mov	r0, r3
 8000a58:	f002 fa76 	bl	8002f48 <_ZN13PIDController5resetEv>
  P_angle.reset();
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	33f0      	adds	r3, #240	@ 0xf0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 fa71 	bl	8002f48 <_ZN13PIDController5resetEv>
  PID_current_q.reset();
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	336c      	adds	r3, #108	@ 0x6c
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f002 fa6c 	bl	8002f48 <_ZN13PIDController5resetEv>
  PID_current_d.reset();
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3390      	adds	r3, #144	@ 0x90
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fa67 	bl	8002f48 <_ZN13PIDController5resetEv>
  // motor status update
  enabled = 1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	00000000 	.word	0x00000000

08000a90 <_ZN9BLDCMotor7initFOCEv>:

/**
  FOC functions
*/
// FOC initialization function
int  BLDCMotor::initFOC() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  int exit_flag = 1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]

  motor_status = FOCMotorStatus::motor_calibrating;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  // align motor if necessary
  // alignment necessary for encoders!
  // sensor and motor alignment - can be skipped
  // by setting motor.sensor_direction and motor.zero_electric_angle
  if(sensor){
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d03c      	beq.n	8000b28 <_ZN9BLDCMotor7initFOCEv+0x98>
    exit_flag *= alignSensor();
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f88e 	bl	8000bd0 <_ZN9BLDCMotor11alignSensorEv>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	60fb      	str	r3, [r7, #12]
    // added the shaft_angle update
    sensor->update();
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3314      	adds	r3, #20
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4610      	mov	r0, r2
 8000ad2:	4798      	blx	r3
    shaft_angle = shaftAngle();
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 ff0b 	bl	80028f2 <_ZN8FOCMotor10shaftAngleEv>
 8000adc:	eef0 7a40 	vmov.f32	s15, s0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	edc3 7a03 	vstr	s15, [r3, #12]

    // aligning the current sensor - can be skipped
    // checks if driver phases are the same as current sense phases
    // and checks the direction of measuremnt.
    if(exit_flag){
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d02c      	beq.n	8000b46 <_ZN9BLDCMotor7initFOCEv+0xb6>
      if(current_sense){ 
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d027      	beq.n	8000b46 <_ZN9BLDCMotor7initFOCEv+0xb6>
        if (!current_sense->initialized) {
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000afc:	7b1b      	ldrb	r3, [r3, #12]
 8000afe:	f083 0301 	eor.w	r3, r3, #1
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <_ZN9BLDCMotor7initFOCEv+0x86>
          motor_status = FOCMotorStatus::motor_calib_failed;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	220e      	movs	r2, #14
 8000b0c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          //SIMPLEFOC_DEBUG("MOT: Init FOC error, current sense not initialized");
          exit_flag = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e017      	b.n	8000b46 <_ZN9BLDCMotor7initFOCEv+0xb6>
        }else{
          exit_flag *= alignCurrentSense();
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f000 f82c 	bl	8000b74 <_ZN9BLDCMotor17alignCurrentSenseEv>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	fb02 f303 	mul.w	r3, r2, r3
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	e00e      	b.n	8000b46 <_ZN9BLDCMotor7initFOCEv+0xb6>
      //else { SIMPLEFOC_DEBUG("MOT: No current sense."); }
    }

  } else {
    //SIMPLEFOC_DEBUG("MOT: No sensor.");
    if ((controller == MotionControlType::angle_openloop || controller == MotionControlType::velocity_openloop)){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d004      	beq.n	8000b3c <_ZN9BLDCMotor7initFOCEv+0xac>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d102      	bne.n	8000b42 <_ZN9BLDCMotor7initFOCEv+0xb2>
      exit_flag = 1;    
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e001      	b.n	8000b46 <_ZN9BLDCMotor7initFOCEv+0xb6>
      //SIMPLEFOC_DEBUG("MOT: Openloop only!");
    }else{
      exit_flag = 0; // no FOC without sensor
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
    }
  }

  if(exit_flag){
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d004      	beq.n	8000b56 <_ZN9BLDCMotor7initFOCEv+0xc6>
    //SIMPLEFOC_DEBUG("MOT: Ready.");
    motor_status = FOCMotorStatus::motor_ready;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2204      	movs	r2, #4
 8000b50:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8000b54:	e009      	b.n	8000b6a <_ZN9BLDCMotor7initFOCEv+0xda>
  }else{
    //SIMPLEFOC_DEBUG("MOT: Init FOC failed.");
    motor_status = FOCMotorStatus::motor_calib_failed;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	220e      	movs	r2, #14
 8000b5a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    disable();
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	3304      	adds	r3, #4
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	4798      	blx	r3
  }

  return exit_flag;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <_ZN9BLDCMotor17alignCurrentSenseEv>:

// Calibarthe the motor and current sense phases
int BLDCMotor::alignCurrentSense() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; // success
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]

  //SIMPLEFOC_DEBUG("MOT: Align current sense.");

  // align current sense and the driver
  exit_flag = current_sense->driverAlign(voltage_sensor_align, modulation_centered);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8d3 0154 	ldr.w	r0, [r3, #340]	@ 0x154
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	3304      	adds	r3, #4
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	f992 2067 	ldrsb.w	r2, [r2, #103]	@ 0x67
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	bf14      	ite	ne
 8000ba2:	2201      	movne	r2, #1
 8000ba4:	2200      	moveq	r2, #0
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	4611      	mov	r1, r2
 8000baa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bae:	4798      	blx	r3
 8000bb0:	60f8      	str	r0, [r7, #12]
  if(!exit_flag){
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d101      	bne.n	8000bbc <_ZN9BLDCMotor17alignCurrentSenseEv+0x48>
    // error in current sense - phase either not measured or bad connection
    //SIMPLEFOC_DEBUG("MOT: Align error!");
    exit_flag = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
  }else{
    // output the alignment status flag
    //SIMPLEFOC_DEBUG("MOT: Success: ", exit_flag);
  }

  return exit_flag > 0;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	bfcc      	ite	gt
 8000bc2:	2301      	movgt	r3, #1
 8000bc4:	2300      	movle	r3, #0
 8000bc6:	b2db      	uxtb	r3, r3
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_ZN9BLDCMotor11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int BLDCMotor::alignSensor() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	@ 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; //success
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //SIMPLEFOC_DEBUG("MOT: Align sensor.");

  // check if sensor needs zero search
  if(sensor->needsSearch()) exit_flag = absoluteZeroSearch();
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3318      	adds	r3, #24
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4798      	blx	r3
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf14      	ite	ne
 8000bf8:	2301      	movne	r3, #1
 8000bfa:	2300      	moveq	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <_ZN9BLDCMotor11alignSensorEv+0x3a>
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f940 	bl	8000e88 <_ZN9BLDCMotor18absoluteZeroSearchEv>
 8000c08:	62f8      	str	r0, [r7, #44]	@ 0x2c
  // stop init if not found index
  if(!exit_flag) return exit_flag;
 8000c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <_ZN9BLDCMotor11alignSensorEv+0x44>
 8000c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c12:	e129      	b.n	8000e68 <_ZN9BLDCMotor11alignSensorEv+0x298>

  // v2.3.3 fix for R_AVR_7_PCREL against symbol" bug for AVR boards
  // TODO figure out why this works
  float voltage_align = voltage_sensor_align;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	623b      	str	r3, [r7, #32]

  // if unknown natural direction
  if(sensor_direction==Direction::UNKNOWN){
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f040 80e5 	bne.w	8000df0 <_ZN9BLDCMotor11alignSensorEv+0x220>

    // find natural direction
    // move one electrical revolution forward
    for (int i = 0; i <=500; i++ ) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c2a:	e02c      	b.n	8000c86 <_ZN9BLDCMotor11alignSensorEv+0xb6>
      float angle = _3PI_2 + _2PI * i / 500.0f;
 8000c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c36:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8000e70 <_ZN9BLDCMotor11alignSensorEv+0x2a0>
 8000c3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c3e:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000e74 <_ZN9BLDCMotor11alignSensorEv+0x2a4>
 8000c42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c46:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000e78 <_ZN9BLDCMotor11alignSensorEv+0x2a8>
 8000c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c4e:	edc7 7a03 	vstr	s15, [r7, #12]
      setPhaseVoltage(voltage_align, 0,  angle);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3318      	adds	r3, #24
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	ed97 1a03 	vldr	s2, [r7, #12]
 8000c5e:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8000e7c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000c62:	ed97 0a08 	vldr	s0, [r7, #32]
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	4798      	blx	r3
	    sensor->update();
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3314      	adds	r3, #20
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4798      	blx	r3
    for (int i = 0; i <=500; i++ ) {
 8000c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c82:	3301      	adds	r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c8c:	ddce      	ble.n	8000c2c <_ZN9BLDCMotor11alignSensorEv+0x5c>
      //_delay(2);
    }
    // take and angle in the middle
    sensor->update();
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	3314      	adds	r3, #20
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4798      	blx	r3
    float mid_angle = sensor->getAngle();
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4798      	blx	r3
 8000cba:	ed87 0a07 	vstr	s0, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >=0; i-- ) {
 8000cbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cc4:	e02c      	b.n	8000d20 <_ZN9BLDCMotor11alignSensorEv+0x150>
      float angle = _3PI_2 + _2PI * i / 500.0f ;
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc8:	ee07 3a90 	vmov	s15, r3
 8000ccc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd0:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8000e70 <_ZN9BLDCMotor11alignSensorEv+0x2a0>
 8000cd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cd8:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8000e74 <_ZN9BLDCMotor11alignSensorEv+0x2a4>
 8000cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ce0:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8000e78 <_ZN9BLDCMotor11alignSensorEv+0x2a8>
 8000ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ce8:	edc7 7a04 	vstr	s15, [r7, #16]
      setPhaseVoltage(voltage_align, 0,  angle);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	ed97 1a04 	vldr	s2, [r7, #16]
 8000cf8:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8000e7c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000cfc:	ed97 0a08 	vldr	s0, [r7, #32]
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	4798      	blx	r3
	    sensor->update();
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3314      	adds	r3, #20
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4610      	mov	r0, r2
 8000d18:	4798      	blx	r3
    for (int i = 500; i >=0; i-- ) {
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dacf      	bge.n	8000cc6 <_ZN9BLDCMotor11alignSensorEv+0xf6>
      //_delay(2);
    }
    sensor->update();
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3314      	adds	r3, #20
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4798      	blx	r3
    float end_angle = sensor->getAngle();
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4610      	mov	r0, r2
 8000d50:	4798      	blx	r3
 8000d52:	ed87 0a06 	vstr	s0, [r7, #24]
    // setPhaseVoltage(0, 0, 0);
    //_delay(200);
    // determine the direction the sensor moved
    float moved =  fabs(mid_angle - end_angle);
 8000d56:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	eeb0 0a67 	vmov.f32	s0, s15
 8000d66:	f7ff fd15 	bl	8000794 <_ZSt4fabsf>
 8000d6a:	ed87 0a05 	vstr	s0, [r7, #20]
    if (moved<MIN_ANGLE_DETECT_MOVEMENT) { // minimum angle to detect movement
 8000d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d72:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000e80 <_ZN9BLDCMotor11alignSensorEv+0x2b0>
 8000d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	d501      	bpl.n	8000d84 <_ZN9BLDCMotor11alignSensorEv+0x1b4>
      //SIMPLEFOC_DEBUG("MOT: Failed to notice movement");
      return 0; // failed calibration
 8000d80:	2300      	movs	r3, #0
 8000d82:	e071      	b.n	8000e68 <_ZN9BLDCMotor11alignSensorEv+0x298>
    } else if (mid_angle < end_angle) {
 8000d84:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d88:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	d504      	bpl.n	8000da0 <_ZN9BLDCMotor11alignSensorEv+0x1d0>
      //SIMPLEFOC_DEBUG("MOT: sensor_direction==CCW");
      sensor_direction = Direction::CCW;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	22ff      	movs	r2, #255	@ 0xff
 8000d9a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 8000d9e:	e003      	b.n	8000da8 <_ZN9BLDCMotor11alignSensorEv+0x1d8>
    } else{
      //SIMPLEFOC_DEBUG("MOT: sensor_direction==CW");
      sensor_direction = Direction::CW;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    }
    // check pole pair number
    pp_check_result = !(fabs(moved*pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000db4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dbc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000e70 <_ZN9BLDCMotor11alignSensorEv+0x2a0>
 8000dc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc8:	f7ff fce4 	bl	8000794 <_ZSt4fabsf>
 8000dcc:	eef0 7a40 	vmov.f32	s15, s0
 8000dd0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	bfcc      	ite	gt
 8000dde:	2301      	movgt	r3, #1
 8000de0:	2300      	movle	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
    }

  } //else { SIMPLEFOC_DEBUG("MOT: Skip dir calib."); }

  // zero electric angle not known
  if(!_isset(zero_electric_angle)){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8000df6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000e84 <_ZN9BLDCMotor11alignSensorEv+0x2b4>
 8000dfa:	eef4 7a47 	vcmp.f32	s15, s14
 8000dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e02:	d130      	bne.n	8000e66 <_ZN9BLDCMotor11alignSensorEv+0x296>
    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setPhaseVoltage(voltage_align, 0,  _3PI_2);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3318      	adds	r3, #24
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000e78 <_ZN9BLDCMotor11alignSensorEv+0x2a8>
 8000e10:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8000e7c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e14:	ed97 0a08 	vldr	s0, [r7, #32]
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	4798      	blx	r3
    //_delay(700);
    // read the sensor
    sensor->update();
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3314      	adds	r3, #20
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4798      	blx	r3
    // get the current zero electric angle
    zero_electric_angle = 0;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    zero_electric_angle = electricalAngle();
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fdc8 	bl	80029d4 <_ZN8FOCMotor15electricalAngleEv>
 8000e44:	eef0 7a40 	vmov.f32	s15, s0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    //_delay(20);
    //if(monitor_port){
    //  SIMPLEFOC_DEBUG("MOT: Zero elec. angle: ", zero_electric_angle);
    //}
    // stop everything
    setPhaseVoltage(0, 0, 0);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3318      	adds	r3, #24
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8000e7c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e5a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8000e7c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e5e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000e7c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	4798      	blx	r3
    //_delay(200);
  } //else { SIMPLEFOC_DEBUG("MOT: Skip offset calib."); }
  return exit_flag;
 8000e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3730      	adds	r7, #48	@ 0x30
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40c90fdb 	.word	0x40c90fdb
 8000e74:	43fa0000 	.word	0x43fa0000
 8000e78:	4096cbe4 	.word	0x4096cbe4
 8000e7c:	00000000 	.word	0x00000000
 8000e80:	3d7ecfa9 	.word	0x3d7ecfa9
 8000e84:	c640e400 	.word	0xc640e400

08000e88 <_ZN9BLDCMotor18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int BLDCMotor::absoluteZeroSearch() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  // sensor precision: this is all ok, as the search happens near the 0-angle, where the precision
  //                    of float is sufficient.
  //SIMPLEFOC_DEBUG("MOT: Index search...");
  // search the absolute zero with small velocity
  float limit_vel = velocity_limit;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e94:	60fb      	str	r3, [r7, #12]
  float limit_volt = voltage_limit;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	60bb      	str	r3, [r7, #8]
  velocity_limit = velocity_index_search;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  voltage_limit = voltage_sensor_align;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	659a      	str	r2, [r3, #88]	@ 0x58
  shaft_angle = 0;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  while(sensor->needsSearch() && shaft_angle < _2PI){
 8000eb4:	e00f      	b.n	8000ed6 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x4e>
    angleOpenloop(1.5f*_2PI);
 8000eb6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8000f60 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xd8>
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f001 f805 	bl	8001eca <_ZN9BLDCMotor13angleOpenloopEf>
    // call important for some sensors not to loose count
    // not needed for the search
    sensor->update();
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3314      	adds	r3, #20
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4798      	blx	r3
  while(sensor->needsSearch() && shaft_angle < _2PI){
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3318      	adds	r3, #24
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4798      	blx	r3
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00b      	beq.n	8000f0a <_ZN9BLDCMotor18absoluteZeroSearchEv+0x82>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ef8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000f64 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xdc>
 8000efc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f04:	d501      	bpl.n	8000f0a <_ZN9BLDCMotor18absoluteZeroSearchEv+0x82>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <_ZN9BLDCMotor18absoluteZeroSearchEv+0x84>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1d2      	bne.n	8000eb6 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x2e>
  }
  // disable motor
  setPhaseVoltage(0, 0, 0);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3318      	adds	r3, #24
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000f68 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 8000f1c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f68 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 8000f20:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000f68 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	4798      	blx	r3
  // reinit the limits
  velocity_limit = limit_vel;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	661a      	str	r2, [r3, #96]	@ 0x60
  voltage_limit = limit_volt;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	659a      	str	r2, [r3, #88]	@ 0x58
  // check if the zero found
  //if(monitor_port){
  //  if(sensor->needsSearch()) { SIMPLEFOC_DEBUG("MOT: Error: Not found!"); }
  //  else { SIMPLEFOC_DEBUG("MOT: Success!"); }
 // }
  return !sensor->needsSearch();
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3318      	adds	r3, #24
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4610      	mov	r0, r2
 8000f48:	4798      	blx	r3
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	bf0c      	ite	eq
 8000f50:	2301      	moveq	r3, #1
 8000f52:	2300      	movne	r3, #0
 8000f54:	b2db      	uxtb	r3, r3
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	4116cbe4 	.word	0x4116cbe4
 8000f64:	40c90fdb 	.word	0x40c90fdb
 8000f68:	00000000 	.word	0x00000000

08000f6c <_ZN9BLDCMotor7loopFOCEv>:

// Iterative function looping FOC algorithm, setting Uq on the Motor
// The faster it can be run the better
void BLDCMotor::loopFOC() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  // update sensor - do this even in open-loop mode, as user may be switching between modes and we could lose track
  //                 of full rotations otherwise.
  if (sensor) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00a      	beq.n	8000f94 <_ZN9BLDCMotor7loopFOCEv+0x28>
	  sensor->update();
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3314      	adds	r3, #20
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4610      	mov	r0, r2
 8000f92:	4798      	blx	r3
  }

  // if open-loop do nothing
  if( controller==MotionControlType::angle_openloop || controller==MotionControlType::velocity_openloop ){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d028      	beq.n	8000ff0 <_ZN9BLDCMotor7loopFOCEv+0x84>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d023      	beq.n	8000ff0 <_ZN9BLDCMotor7loopFOCEv+0x84>
	  return;
  }
  
  // if disabled do nothing
  if(!enabled){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f993 3064 	ldrsb.w	r3, [r3, #100]	@ 0x64
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d020      	beq.n	8000ff4 <_ZN9BLDCMotor7loopFOCEv+0x88>
  }

  // Needs the update() to be called first
  // This function will not have numerical issues because it uses Sensor::getMechanicalAngle() 
  // which is in range 0-2PI
  electrical_angle = electricalAngle();
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fd0d 	bl	80029d4 <_ZN8FOCMotor15electricalAngleEv>
 8000fba:	eef0 7a40 	vmov.f32	s15, s0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a04 	vstr	s15, [r3, #16]

  }
  */

  // set the phase voltage - FOC heart function :)
  setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3318      	adds	r3, #24
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	edd2 6a04 	vldr	s13, [r2, #16]
 8000fde:	eeb0 1a66 	vmov.f32	s2, s13
 8000fe2:	eef0 0a47 	vmov.f32	s1, s14
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	4798      	blx	r3
 8000fee:	e002      	b.n	8000ff6 <_ZN9BLDCMotor7loopFOCEv+0x8a>
	  return;
 8000ff0:	bf00      	nop
 8000ff2:	e000      	b.n	8000ff6 <_ZN9BLDCMotor7loopFOCEv+0x8a>
	  return;
 8000ff4:	bf00      	nop
}
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZN9BLDCMotor4moveEf>:
// Iterative function running outer loop of the FOC algorithm
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void BLDCMotor::move(float new_target) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	ed2d 8b02 	vpush	{d8}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	ed87 0a00 	vstr	s0, [r7]

  // set internal target variable
  if(_isset(new_target)) target = new_target;
 800100c:	edd7 7a00 	vldr	s15, [r7]
 8001010:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001014:	eef4 7a47 	vcmp.f32	s15, s14
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d002      	beq.n	8001024 <_ZN9BLDCMotor4moveEf+0x28>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	605a      	str	r2, [r3, #4]
  
  // downsampling (optional)
  if(motion_cnt++ < motion_downsample) return;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800102a:	1c59      	adds	r1, r3, #1
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	f8c2 1130 	str.w	r1, [r2, #304]	@ 0x130
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8001038:	4293      	cmp	r3, r2
 800103a:	bf34      	ite	cc
 800103c:	2301      	movcc	r3, #1
 800103e:	2300      	movcs	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	f040 8380 	bne.w	8001748 <_ZN9BLDCMotor4moveEf+0x74c>
  motion_cnt = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
  // get shaft angle
  // TODO sensor precision: the shaft_angle actually stores the complete position, including full rotations, as a float
  //                        For this reason it is NOT precise when the angles become large.
  //                        Additionally, the way LPF works on angle is a precision issue, and the angle-LPF is a problem
  //                        when switching to a 2-component representation.
  if( controller!=MotionControlType::angle_openloop && controller!=MotionControlType::velocity_openloop ) 
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001056:	2b04      	cmp	r3, #4
 8001058:	d00d      	beq.n	8001076 <_ZN9BLDCMotor4moveEf+0x7a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001060:	2b03      	cmp	r3, #3
 8001062:	d008      	beq.n	8001076 <_ZN9BLDCMotor4moveEf+0x7a>
    shaft_angle = shaftAngle(); // read value even if motor is disabled to keep the monitoring updated but not in openloop mode
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fc43 	bl	80028f2 <_ZN8FOCMotor10shaftAngleEv>
 800106c:	eef0 7a40 	vmov.f32	s15, s0
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	edc3 7a03 	vstr	s15, [r3, #12]
  // get angular velocity  TODO the velocity reading probably also shouldn't happen in open loop modes?
  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	f001 fc75 	bl	8002968 <_ZN8FOCMotor13shaftVelocityEv>
 800107e:	eef0 7a40 	vmov.f32	s15, s0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edc3 7a05 	vstr	s15, [r3, #20]

  // if disabled do nothing
  if(!enabled) return;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f993 3064 	ldrsb.w	r3, [r3, #100]	@ 0x64
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 835c 	beq.w	800174c <_ZN9BLDCMotor4moveEf+0x750>
  
  // calculate the back-emf voltage if KV_rating available U_bemf = vel*(1/KV)
  if (_isset(KV_rating)) voltage_bemf = shaft_velocity/(KV_rating*_SQRT3)/_RPM_TO_RADS;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800109a:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 800109e:	eef4 7a47 	vcmp.f32	s15, s14
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a6:	d012      	beq.n	80010ce <_ZN9BLDCMotor4moveEf+0xd2>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 6a05 	vldr	s13, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80010b4:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80012c0 <_ZN9BLDCMotor4moveEf+0x2c4>
 80010b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010c0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80012c4 <_ZN9BLDCMotor4moveEf+0x2c8>
 80010c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  // estimate the motor current if phase reistance available and current_sense not available
  if(!current_sense && _isset(phase_resistance)) current.q = (voltage.q - voltage_bemf)/phase_resistance;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d119      	bne.n	800110c <_ZN9BLDCMotor4moveEf+0x110>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80010de:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 80010e2:	eef4 7a47 	vcmp.f32	s15, s14
 80010e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ea:	d00f      	beq.n	800110c <_ZN9BLDCMotor4moveEf+0x110>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8001102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

  // upgrade the current based voltage limit
  switch (controller) {
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001112:	2b04      	cmp	r3, #4
 8001114:	f200 831f 	bhi.w	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
 8001118:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <_ZN9BLDCMotor4moveEf+0x124>)
 800111a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111e:	bf00      	nop
 8001120:	08001135 	.word	0x08001135
 8001124:	08001521 	.word	0x08001521
 8001128:	080012cd 	.word	0x080012cd
 800112c:	080016f1 	.word	0x080016f1
 8001130:	0800171d 	.word	0x0800171d
    case MotionControlType::torque:
      if(torque_controller == TorqueControlType::voltage){ // if voltage torque control
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 80bb 	bne.w	80012b6 <_ZN9BLDCMotor4moveEf+0x2ba>
        if(!_isset(phase_resistance))  voltage.q = target;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001146:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 800114a:	eef4 7a47 	vcmp.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d104      	bne.n	800115e <_ZN9BLDCMotor4moveEf+0x162>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	629a      	str	r2, [r3, #40]	@ 0x28
 800115c:	e00f      	b.n	800117e <_ZN9BLDCMotor4moveEf+0x182>
        else  voltage.q =  target*phase_resistance + voltage_bemf;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	ed93 7a01 	vldr	s14, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800116a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        voltage.q = _constrain(voltage.q, -voltage_limit, voltage_limit);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800118a:	eef1 7a67 	vneg.f32	s15, s15
 800118e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	d505      	bpl.n	80011a4 <_ZN9BLDCMotor4moveEf+0x1a8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800119e:	eef1 7a67 	vneg.f32	s15, s15
 80011a2:	e011      	b.n	80011c8 <_ZN9BLDCMotor4moveEf+0x1cc>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80011b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b8:	dd03      	ble.n	80011c2 <_ZN9BLDCMotor4moveEf+0x1c6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80011c0:	e002      	b.n	80011c8 <_ZN9BLDCMotor4moveEf+0x1cc>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80011d4:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 80011d8:	eef4 7a47 	vcmp.f32	s15, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	d104      	bne.n	80011ec <_ZN9BLDCMotor4moveEf+0x1f0>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -target*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }else{
        current_sp = target; // if current/foc_current torque control
      }
      break;
 80011ea:	e2b4      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
        else voltage.d = _constrain( -target*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f2:	eeb1 7a67 	vneg.f32	s14, s15
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001220:	eef1 7a67 	vneg.f32	s15, s15
 8001224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122c:	d505      	bpl.n	800123a <_ZN9BLDCMotor4moveEf+0x23e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001234:	eef1 7a67 	vneg.f32	s15, s15
 8001238:	e039      	b.n	80012ae <_ZN9BLDCMotor4moveEf+0x2b2>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001240:	eeb1 7a67 	vneg.f32	s14, s15
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a05 	vldr	s15, [r3, #20]
 800124a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800126e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	dd03      	ble.n	8001280 <_ZN9BLDCMotor4moveEf+0x284>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800127e:	e016      	b.n	80012ae <_ZN9BLDCMotor4moveEf+0x2b2>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a01 	vldr	s15, [r3, #4]
 8001286:	eeb1 7a67 	vneg.f32	s14, s15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 80012b4:	e24f      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
        current_sp = target; // if current/foc_current torque control
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	619a      	str	r2, [r3, #24]
      break;
 80012be:	e24a      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
 80012c0:	3fddb3d7 	.word	0x3fddb3d7
 80012c4:	3dd67750 	.word	0x3dd67750
 80012c8:	c640e400 	.word	0xc640e400
    case MotionControlType::angle:
      // TODO sensor precision: this calculation is not numerically precise. The target value cannot express precise positions when
      //                        the angles are large. This results in not being able to command small changes at high position values.
      //                        to solve this, the delta-angle has to be calculated in a numerically precise way.
      // angle set point
      shaft_angle_sp = target;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	621a      	str	r2, [r3, #32]
      // calculate velocity set point
      shaft_velocity_sp = feed_forward_velocity + P_angle( shaft_angle_sp - shaft_angle );
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	ed93 8a02 	vldr	s16, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	4610      	mov	r0, r2
 80012f6:	f001 fe20 	bl	8002f3a <_ZN13PIDControllerclEf>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
 80012fe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a07 	vstr	s15, [r3, #28]
      shaft_velocity_sp = _constrain(shaft_velocity_sp,-velocity_limit, velocity_limit);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	ed93 7a07 	vldr	s14, [r3, #28]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001314:	eef1 7a67 	vneg.f32	s15, s15
 8001318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	d505      	bpl.n	800132e <_ZN9BLDCMotor4moveEf+0x332>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001328:	eef1 7a67 	vneg.f32	s15, s15
 800132c:	e011      	b.n	8001352 <_ZN9BLDCMotor4moveEf+0x356>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	ed93 7a07 	vldr	s14, [r3, #28]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dd03      	ble.n	800134c <_ZN9BLDCMotor4moveEf+0x350>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800134a:	e002      	b.n	8001352 <_ZN9BLDCMotor4moveEf+0x356>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a07 	vstr	s15, [r3, #28]
      // calculate the torque command - sensor precision: this calculation is ok, but based on bad value from previous calculation
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if voltage torque control
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	ed93 7a07 	vldr	s14, [r3, #28]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	edd3 7a05 	vldr	s15, [r3, #20]
 800136a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	4610      	mov	r0, r2
 8001374:	f001 fde1 	bl	8002f3a <_ZN13PIDControllerclEf>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	edc3 7a06 	vstr	s15, [r3, #24]
      // if torque controlled through voltage
      if(torque_controller == TorqueControlType::voltage){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001388:	2b00      	cmp	r3, #0
 800138a:	f040 81e1 	bne.w	8001750 <_ZN9BLDCMotor4moveEf+0x754>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001394:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001398:	eef4 7a47 	vcmp.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d104      	bne.n	80013ac <_ZN9BLDCMotor4moveEf+0x3b0>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	699a      	ldr	r2, [r3, #24]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80013aa:	e045      	b.n	8001438 <_ZN9BLDCMotor4moveEf+0x43c>
        else  voltage.q =  _constrain( current_sp*phase_resistance + voltage_bemf , -voltage_limit, voltage_limit);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	ed93 7a06 	vldr	s14, [r3, #24]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80013b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80013c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80013cc:	eef1 7a67 	vneg.f32	s15, s15
 80013d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d8:	d505      	bpl.n	80013e6 <_ZN9BLDCMotor4moveEf+0x3ea>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80013e0:	eef1 7a67 	vneg.f32	s15, s15
 80013e4:	e025      	b.n	8001432 <_ZN9BLDCMotor4moveEf+0x436>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	ed93 7a06 	vldr	s14, [r3, #24]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80013f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80013fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800140a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140e:	dd03      	ble.n	8001418 <_ZN9BLDCMotor4moveEf+0x41c>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001416:	e00c      	b.n	8001432 <_ZN9BLDCMotor4moveEf+0x436>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	ed93 7a06 	vldr	s14, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800142e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800143e:	ed1f 7a5e 	vldr	s14, [pc, #-376]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001442:	eef4 7a47 	vcmp.f32	s15, s14
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d104      	bne.n	8001456 <_ZN9BLDCMotor4moveEf+0x45a>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }
      break;
 8001454:	e17c      	b.n	8001750 <_ZN9BLDCMotor4moveEf+0x754>
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	edd3 7a06 	vldr	s15, [r3, #24]
 800145c:	eeb1 7a67 	vneg.f32	s14, s15
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 7a05 	vldr	s15, [r3, #20]
 8001466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001476:	ee27 7a27 	vmul.f32	s14, s14, s15
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d505      	bpl.n	80014a4 <_ZN9BLDCMotor4moveEf+0x4a8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800149e:	eef1 7a67 	vneg.f32	s15, s15
 80014a2:	e039      	b.n	8001518 <_ZN9BLDCMotor4moveEf+0x51c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014aa:	eeb1 7a67 	vneg.f32	s14, s15
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80014ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80014d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	dd03      	ble.n	80014ea <_ZN9BLDCMotor4moveEf+0x4ee>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80014e8:	e016      	b.n	8001518 <_ZN9BLDCMotor4moveEf+0x51c>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f0:	eeb1 7a67 	vneg.f32	s14, s15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 800151e:	e117      	b.n	8001750 <_ZN9BLDCMotor4moveEf+0x754>
    case MotionControlType::velocity:
      // velocity set point - sensor precision: this calculation is numerically precise.
      shaft_velocity_sp = target;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	61da      	str	r2, [r3, #28]
      // calculate the torque command
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if current/foc_current torque control
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	ed93 7a07 	vldr	s14, [r3, #28]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	edd3 7a05 	vldr	s15, [r3, #20]
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	eeb0 0a67 	vmov.f32	s0, s15
 8001542:	4610      	mov	r0, r2
 8001544:	f001 fcf9 	bl	8002f3a <_ZN13PIDControllerclEf>
 8001548:	eef0 7a40 	vmov.f32	s15, s0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	edc3 7a06 	vstr	s15, [r3, #24]
      // if torque controlled through voltage control
      if(torque_controller == TorqueControlType::voltage){
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001558:	2b00      	cmp	r3, #0
 800155a:	f040 80fb 	bne.w	8001754 <_ZN9BLDCMotor4moveEf+0x758>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001564:	ed1f 7aa8 	vldr	s14, [pc, #-672]	@ 80012c8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001568:	eef4 7a47 	vcmp.f32	s15, s14
 800156c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001570:	d104      	bne.n	800157c <_ZN9BLDCMotor4moveEf+0x580>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699a      	ldr	r2, [r3, #24]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	629a      	str	r2, [r3, #40]	@ 0x28
 800157a:	e045      	b.n	8001608 <_ZN9BLDCMotor4moveEf+0x60c>
        else  voltage.q = _constrain( current_sp*phase_resistance + voltage_bemf , -voltage_limit, voltage_limit);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800159c:	eef1 7a67 	vneg.f32	s15, s15
 80015a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	d505      	bpl.n	80015b6 <_ZN9BLDCMotor4moveEf+0x5ba>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80015b0:	eef1 7a67 	vneg.f32	s15, s15
 80015b4:	e025      	b.n	8001602 <_ZN9BLDCMotor4moveEf+0x606>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	ed93 7a06 	vldr	s14, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80015c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80015d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015de:	dd03      	ble.n	80015e8 <_ZN9BLDCMotor4moveEf+0x5ec>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80015e6:	e00c      	b.n	8001602 <_ZN9BLDCMotor4moveEf+0x606>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80015f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800160e:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001760 <_ZN9BLDCMotor4moveEf+0x764>
 8001612:	eef4 7a47 	vcmp.f32	s15, s14
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d104      	bne.n	8001626 <_ZN9BLDCMotor4moveEf+0x62a>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }
      break;
 8001624:	e096      	b.n	8001754 <_ZN9BLDCMotor4moveEf+0x758>
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edd3 7a06 	vldr	s15, [r3, #24]
 800162c:	eeb1 7a67 	vneg.f32	s14, s15
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edd3 7a05 	vldr	s15, [r3, #20]
 8001636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001646:	ee27 7a27 	vmul.f32	s14, s14, s15
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001650:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800165a:	eef1 7a67 	vneg.f32	s15, s15
 800165e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001666:	d505      	bpl.n	8001674 <_ZN9BLDCMotor4moveEf+0x678>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800166e:	eef1 7a67 	vneg.f32	s15, s15
 8001672:	e039      	b.n	80016e8 <_ZN9BLDCMotor4moveEf+0x6ec>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a06 	vldr	s15, [r3, #24]
 800167a:	eeb1 7a67 	vneg.f32	s14, s15
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	edd3 7a05 	vldr	s15, [r3, #20]
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800169e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80016a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	dd03      	ble.n	80016ba <_ZN9BLDCMotor4moveEf+0x6be>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80016b8:	e016      	b.n	80016e8 <_ZN9BLDCMotor4moveEf+0x6ec>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80016c0:	eeb1 7a67 	vneg.f32	s14, s15
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80016e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 80016ee:	e031      	b.n	8001754 <_ZN9BLDCMotor4moveEf+0x758>
    case MotionControlType::velocity_openloop:
      // velocity control in open loop - sensor precision: this calculation is numerically precise.
      shaft_velocity_sp = target;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	61da      	str	r2, [r3, #28]
      voltage.q = velocityOpenloop(shaft_velocity_sp); // returns the voltage that is set to the motor
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80016fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fbda 	bl	8001ebc <_ZN9BLDCMotor16velocityOpenloopEf>
 8001708:	eef0 7a40 	vmov.f32	s15, s0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
      voltage.d = 0;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 800171a:	e01c      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
    case MotionControlType::angle_openloop:
      // angle control in open loop - 
      // TODO sensor precision: this calculation NOT numerically precise, and subject
      //                        to the same problems in small set-point changes at high angles 
      //                        as the closed loop version.
      shaft_angle_sp = target;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	621a      	str	r2, [r3, #32]
      voltage.q = angleOpenloop(shaft_angle_sp); // returns the voltage that is set to the motor
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 7a08 	vldr	s15, [r3, #32]
 800172a:	eeb0 0a67 	vmov.f32	s0, s15
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 fbcb 	bl	8001eca <_ZN9BLDCMotor13angleOpenloopEf>
 8001734:	eef0 7a40 	vmov.f32	s15, s0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
      voltage.d = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 8001746:	e006      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
  if(motion_cnt++ < motion_downsample) return;
 8001748:	bf00      	nop
 800174a:	e004      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
  if(!enabled) return;
 800174c:	bf00      	nop
 800174e:	e002      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
      break;
 8001750:	bf00      	nop
 8001752:	e000      	b.n	8001756 <_ZN9BLDCMotor4moveEf+0x75a>
      break;
 8001754:	bf00      	nop
  }
}
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	ecbd 8b02 	vpop	{d8}
 800175e:	bd80      	pop	{r7, pc}
 8001760:	c640e400 	.word	0xc640e400

08001764 <_ZN9BLDCMotor15setPhaseVoltageEfff>:
// Function implementing Space Vector PWM and Sine PWM algorithms
//
// Function using sine approximation
// regular sin + cos ~300us    (no memory usage)
// approx  _sin + _cos ~110us  (400Byte ~ 20% of memory)
void BLDCMotor::setPhaseVoltage(float Uq, float Ud, float angle_el) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b08d      	sub	sp, #52	@ 0x34
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001770:	edc7 0a01 	vstr	s1, [r7, #4]
 8001774:	ed87 1a00 	vstr	s2, [r7]

  float center;
  int sector;
  float _ca,_sa;

  switch (foc_modulation)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800177e:	2b03      	cmp	r3, #3
 8001780:	f000 8111 	beq.w	80019a6 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x242>
 8001784:	2b03      	cmp	r3, #3
 8001786:	f300 837a 	bgt.w	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 800178a:	2b01      	cmp	r3, #1
 800178c:	dc03      	bgt.n	8001796 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x32>
 800178e:	2b00      	cmp	r3, #0
 8001790:	f280 827c 	bge.w	8001c8c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x528>
 8001794:	e373      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001796:	2b02      	cmp	r3, #2
 8001798:	f040 8371 	bne.w	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
  {
    case FOCModulationType::Trapezoid_120 :
      // see https://www.youtube.com/watch?v=InzXA7mWBWE Slide 5
      // determine the sector
      sector = 6 * (_normalizeAngle(angle_el + _PI_6 ) / _2PI); // adding PI/6 to align with other modes
 800179c:	edd7 7a00 	vldr	s15, [r7]
 80017a0:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001a98 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x334>
 80017a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f001 fb56 	bl	8002e5c <_Z15_normalizeAnglef>
 80017b0:	eeb0 7a40 	vmov.f32	s14, s0
 80017b4:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8001a9c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x338>
 80017b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017bc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80017c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c8:	ee17 3a90 	vmov	r3, s15
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      // centering the voltages around either
      // modulation_centered == true > driver.voltage_limit/2
      // modulation_centered == false > or Adaptable centering, all phases drawn to 0 when Uq=0
      center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <_ZN9BLDCMotor15setPhaseVoltageEfff+0x88>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80017de:	ed93 7a03 	vldr	s14, [r3, #12]
 80017e2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ea:	e001      	b.n	80017f0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x8c>
 80017ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

      if(trap_120_map[sector][0]  == _HIGH_IMPEDANCE){
 80017f4:	49aa      	ldr	r1, [pc, #680]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80017f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d141      	bne.n	800188c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x128>
        Ua= center;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800180c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        Ub = trap_120_map[sector][1] * Uq + center;
 8001810:	49a3      	ldr	r1, [pc, #652]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3304      	adds	r3, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	ee07 3a90 	vmov	s15, r3
 8001826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800182a:	edd7 7a02 	vldr	s15, [r7, #8]
 800182e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001832:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_120_map[sector][2] * Uq + center;
 8001840:	4997      	ldr	r1, [pc, #604]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001842:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3308      	adds	r3, #8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800185a:	edd7 7a02 	vldr	s15, [r7, #8]
 800185e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001862:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001866:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_OFF, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // disable phase if possible
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3314      	adds	r3, #20
 8001880:	681c      	ldr	r4, [r3, #0]
 8001882:	2301      	movs	r3, #1
 8001884:	2201      	movs	r2, #1
 8001886:	2100      	movs	r1, #0
 8001888:	47a0      	blx	r4
        Ub = trap_120_map[sector][1] * Uq + center;
        Uc = center;
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF);// disable phase if possible
      }

    break;
 800188a:	e2f8      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
      }else if(trap_120_map[sector][1]  == _HIGH_IMPEDANCE){
 800188c:	4984      	ldr	r1, [pc, #528]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 800188e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3304      	adds	r3, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d140      	bne.n	8001924 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x1c0>
        Ua = trap_120_map[sector][0] * Uq + center;
 80018a2:	497f      	ldr	r1, [pc, #508]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80018a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80018be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = center;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018d4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        Uc = trap_120_map[sector][2] * Uq + center;
 80018d8:	4971      	ldr	r1, [pc, #452]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80018da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	3308      	adds	r3, #8
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	ee07 3a90 	vmov	s15, r3
 80018ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_OFF, PhaseState::PHASE_ON);// disable phase if possible
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	3314      	adds	r3, #20
 8001918:	681c      	ldr	r4, [r3, #0]
 800191a:	2301      	movs	r3, #1
 800191c:	2200      	movs	r2, #0
 800191e:	2101      	movs	r1, #1
 8001920:	47a0      	blx	r4
    break;
 8001922:	e2ac      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
        Ua = trap_120_map[sector][0] * Uq + center;
 8001924:	495e      	ldr	r1, [pc, #376]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	ee07 3a90 	vmov	s15, r3
 8001938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800193c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001944:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_120_map[sector][1] * Uq + center;
 8001952:	4953      	ldr	r1, [pc, #332]	@ (8001aa0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	3304      	adds	r3, #4
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001974:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = center;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001986:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF);// disable phase if possible
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3314      	adds	r3, #20
 800199a:	681c      	ldr	r4, [r3, #0]
 800199c:	2300      	movs	r3, #0
 800199e:	2201      	movs	r2, #1
 80019a0:	2101      	movs	r1, #1
 80019a2:	47a0      	blx	r4
    break;
 80019a4:	e26b      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>

    case FOCModulationType::Trapezoid_150 :
      // see https://www.youtube.com/watch?v=InzXA7mWBWE Slide 8
      // determine the sector
      sector = 12 * (_normalizeAngle(angle_el + _PI_6 ) / _2PI); // adding PI/6 to align with other modes
 80019a6:	edd7 7a00 	vldr	s15, [r7]
 80019aa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001a98 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x334>
 80019ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019b2:	eeb0 0a67 	vmov.f32	s0, s15
 80019b6:	f001 fa51 	bl	8002e5c <_Z15_normalizeAnglef>
 80019ba:	eeb0 7a40 	vmov.f32	s14, s0
 80019be:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001a9c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x338>
 80019c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c6:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d2:	ee17 3a90 	vmov	r3, s15
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      // centering the voltages around either
      // modulation_centered == true > driver.voltage_limit/2
      // modulation_centered == false > or Adaptable centering, all phases drawn to 0 when Uq=0
      center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x292>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80019e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80019ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80019f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019f4:	e001      	b.n	80019fa <_ZN9BLDCMotor15setPhaseVoltageEfff+0x296>
 80019f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019fa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

      if(trap_150_map[sector][0]  == _HIGH_IMPEDANCE){
 80019fe:	4929      	ldr	r1, [pc, #164]	@ (8001aa4 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d14a      	bne.n	8001aa8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x344>
        Ua= center;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a16:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001a1a:	4922      	ldr	r1, [pc, #136]	@ (8001aa4 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a1e:	4613      	mov	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	4413      	add	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	440b      	add	r3, r1
 8001a28:	3304      	adds	r3, #4
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	ee07 3a90 	vmov	s15, r3
 8001a30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a3c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001a4a:	4916      	ldr	r1, [pc, #88]	@ (8001aa4 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001a4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	3308      	adds	r3, #8
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_OFF, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // disable phase if possible
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	3314      	adds	r3, #20
 8001a8a:	681c      	ldr	r4, [r3, #0]
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	2201      	movs	r2, #1
 8001a90:	2100      	movs	r1, #0
 8001a92:	47a0      	blx	r4
        Ub = trap_150_map[sector][1] * Uq + center;
        Uc = trap_150_map[sector][2] * Uq + center;
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // enable all phases
      }

    break;
 8001a94:	e1f3      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001a96:	bf00      	nop
 8001a98:	3f060a92 	.word	0x3f060a92
 8001a9c:	40c90fdb 	.word	0x40c90fdb
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000048 	.word	0x20000048
      }else if(trap_150_map[sector][1]  == _HIGH_IMPEDANCE){
 8001aa8:	4976      	ldr	r1, [pc, #472]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d140      	bne.n	8001b40 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x3dc>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001abe:	4971      	ldr	r1, [pc, #452]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	ee07 3a90 	vmov	s15, r3
 8001ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = center;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001af0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001af4:	4963      	ldr	r1, [pc, #396]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	3308      	adds	r3, #8
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b16:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_OFF, PhaseState::PHASE_ON); // disable phase if possible
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	3314      	adds	r3, #20
 8001b34:	681c      	ldr	r4, [r3, #0]
 8001b36:	2301      	movs	r3, #1
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	47a0      	blx	r4
    break;
 8001b3e:	e19e      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
      }else if(trap_150_map[sector][2]  == _HIGH_IMPEDANCE){
 8001b40:	4950      	ldr	r1, [pc, #320]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b44:	4613      	mov	r3, r2
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3308      	adds	r3, #8
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d140      	bne.n	8001bd8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x474>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001b56:	494b      	ldr	r1, [pc, #300]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	ee07 3a90 	vmov	s15, r3
 8001b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b76:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001b84:	493f      	ldr	r1, [pc, #252]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b88:	4613      	mov	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4413      	add	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3304      	adds	r3, #4
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = center;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001bb8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF); // disable phase if possible
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3314      	adds	r3, #20
 8001bcc:	681c      	ldr	r4, [r3, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	47a0      	blx	r4
    break;
 8001bd6:	e152      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001bd8:	492a      	ldr	r1, [pc, #168]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001bda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001c06:	491f      	ldr	r1, [pc, #124]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	3304      	adds	r3, #4
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	ee07 3a90 	vmov	s15, r3
 8001c1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c28:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001c36:	4913      	ldr	r1, [pc, #76]	@ (8001c84 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	440b      	add	r3, r1
 8001c44:	3308      	adds	r3, #8
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	ee07 3a90 	vmov	s15, r3
 8001c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // enable all phases
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3314      	adds	r3, #20
 8001c76:	681c      	ldr	r4, [r3, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	47a0      	blx	r4
    break;
 8001c80:	e0fd      	b.n	8001e7e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001c82:	bf00      	nop
 8001c84:	20000048 	.word	0x20000048
 8001c88:	3f5db3d7 	.word	0x3f5db3d7

    case FOCModulationType::SinePWM :
    case FOCModulationType::SpaceVectorPWM :
      // Sinusoidal PWM modulation
      // Inverse Park + Clarke transformation
      _sincos(angle_el, &_sa, &_ca);
 8001c8c:	f107 0218 	add.w	r2, r7, #24
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	ed97 0a00 	vldr	s0, [r7]
 8001c9c:	f001 f8c0 	bl	8002e20 <_Z7_sincosfPfS_>

      // Inverse park transform
      Ualpha =  _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 8001ca0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001ca4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cac:	edd7 6a05 	vldr	s13, [r7, #20]
 8001cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
      Ubeta =  _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 8001cc2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cce:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

      // Clarke transform
      Ua = Ualpha;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
      Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001cf4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001cf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001d02:	ed5f 6a1f 	vldr	s13, [pc, #-124]	@ 8001c88 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x524>
 8001d06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
      Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001d1a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001d1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001d28:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8001c88 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x524>
 8001d2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168

      center = driver->voltage_limit/2;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001d40:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      if (foc_modulation == FOCModulationType::SpaceVectorPWM){
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d139      	bne.n	8001dce <_ZN9BLDCMotor15setPhaseVoltageEfff+0x66a>
        // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
        // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
        // Midpoint Clamp
        float Umin = std::min(Ua, std::min(Ub, Uc));
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f000 f8b2 	bl	8001ed8 <_ZSt3minIfERKT_S2_S2_>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4619      	mov	r1, r3
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f000 f8ad 	bl	8001ed8 <_ZSt3minIfERKT_S2_S2_>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
        float Umax = std::max(Ua, std::max(Ub, Uc));
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d96:	4619      	mov	r1, r3
 8001d98:	4610      	mov	r0, r2
 8001d9a:	f000 f8b6 	bl	8001f0a <_ZSt3maxIfERKT_S2_S2_>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4619      	mov	r1, r3
 8001da2:	4620      	mov	r0, r4
 8001da4:	f000 f8b1 	bl	8001f0a <_ZSt3maxIfERKT_S2_S2_>
 8001da8:	4603      	mov	r3, r0
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	623b      	str	r3, [r7, #32]
        center -= (Umax+Umin) / 2;
 8001dae:	ed97 7a08 	vldr	s14, [r7, #32]
 8001db2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001db6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      } 

      if (!modulation_centered) {
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d133      	bne.n	8001e40 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x6dc>
        float Umin = std::min(Ua, std::min(Ub, Uc));
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001dea:	4619      	mov	r1, r3
 8001dec:	4610      	mov	r0, r2
 8001dee:	f000 f873 	bl	8001ed8 <_ZSt3minIfERKT_S2_S2_>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4619      	mov	r1, r3
 8001df6:	4620      	mov	r0, r4
 8001df8:	f000 f86e 	bl	8001ed8 <_ZSt3minIfERKT_S2_S2_>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61fb      	str	r3, [r7, #28]
        Ua -= Umin;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8001e08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub -= Umin;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001e1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc -= Umin;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8001e30:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        Ua += center;
        Ub += center;
        Uc += center;
      }

      break;
 8001e3e:	e01d      	b.n	8001e7c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x718>
        Ua += center;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8001e46:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub += center;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001e5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc += center;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8001e6e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
      break;
 8001e7c:	bf00      	nop

  }

  // set the voltages in driver
  driver->setPwm(Ua, Ub, Uc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f8d3 115c 	ldr.w	r1, [r3, #348]	@ 0x15c
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	edd2 7a58 	vldr	s15, [r2, #352]	@ 0x160
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	ed92 7a59 	vldr	s14, [r2, #356]	@ 0x164
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	edd2 6a5a 	vldr	s13, [r2, #360]	@ 0x168
 8001ea2:	eeb0 1a66 	vmov.f32	s2, s13
 8001ea6:	eef0 0a47 	vmov.f32	s1, s14
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	4608      	mov	r0, r1
 8001eb0:	4798      	blx	r3
}
 8001eb2:	bf00      	nop
 8001eb4:	3734      	adds	r7, #52	@ 0x34
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop

08001ebc <_ZN9BLDCMotor16velocityOpenloopEf>:


// Function (iterative) generating open loop movement for target velocity
// - target_velocity - rad/s
// it uses voltage_limit variable
float BLDCMotor::velocityOpenloop(float target_velocity){
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	ed87 0a00 	vstr	s0, [r7]
 8001ec8:	deff      	udf	#255	@ 0xff

08001eca <_ZN9BLDCMotor13angleOpenloopEf>:
}

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float BLDCMotor::angleOpenloop(float target_angle){
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	ed87 0a00 	vstr	s0, [r7]
 8001ed6:	deff      	udf	#255	@ 0xff

08001ed8 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	d501      	bpl.n	8001efc <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	e000      	b.n	8001efe <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001efc:	687b      	ldr	r3, [r7, #4]
    }
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	ed93 7a00 	vldr	s14, [r3]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f28:	d501      	bpl.n	8001f2e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	e000      	b.n	8001f30 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001f2e:	687b      	ldr	r3, [r7, #4]
    }
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <cppInit>:
void doMotor(char* cmd) {
	//command.motor(&motor, cmd);
}

void cppInit()
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	// on pins 12,11,10,9,8
	// pin 12 is used as ground
	//pinMode(12,OUTPUT);
	//pinMode(12,LOW);

	encoder.init();
 8001f40:	4821      	ldr	r0, [pc, #132]	@ (8001fc8 <cppInit+0x8c>)
 8001f42:	f001 fb71 	bl	8003628 <_ZN7Encoder4initEv>
	//encoder.enableInterrupts(doA, doB);

	// link the motor to the sensor
	motor.linkSensor(&encoder);
 8001f46:	4920      	ldr	r1, [pc, #128]	@ (8001fc8 <cppInit+0x8c>)
 8001f48:	4820      	ldr	r0, [pc, #128]	@ (8001fcc <cppInit+0x90>)
 8001f4a:	f000 fcc3 	bl	80028d4 <_ZN8FOCMotor10linkSensorEP6Sensor>

	// driver config
	// power supply voltage [V]
	driver.voltage_power_supply = 12;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <cppInit+0x94>)
 8001f50:	4a20      	ldr	r2, [pc, #128]	@ (8001fd4 <cppInit+0x98>)
 8001f52:	609a      	str	r2, [r3, #8]
	driver.init();
 8001f54:	481e      	ldr	r0, [pc, #120]	@ (8001fd0 <cppInit+0x94>)
 8001f56:	f001 f8b7 	bl	80030c8 <_ZN14BLDCDriver3PWM4initEv>
	// link the motor and the driver
	motor.linkDriver(&driver);
 8001f5a:	491d      	ldr	r1, [pc, #116]	@ (8001fd0 <cppInit+0x94>)
 8001f5c:	481b      	ldr	r0, [pc, #108]	@ (8001fcc <cppInit+0x90>)
 8001f5e:	f7fe fc63 	bl	8000828 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>

	// aligning voltage [V]
	motor.voltage_sensor_align = 3;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <cppInit+0x90>)
 8001f64:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <cppInit+0x9c>)
 8001f66:	641a      	str	r2, [r3, #64]	@ 0x40

	// set motion control loop to be used
	motor.controller = MotionControlType::angle;
 8001f68:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <cppInit+0x90>)
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	// contoller configuration
	// default parameters in defaults.h

	// velocity PI controller parameters
	motor.PID_velocity.P = 0.2f;
 8001f70:	4b16      	ldr	r3, [pc, #88]	@ (8001fcc <cppInit+0x90>)
 8001f72:	4a1a      	ldr	r2, [pc, #104]	@ (8001fdc <cppInit+0xa0>)
 8001f74:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	motor.PID_velocity.I = 20;
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <cppInit+0x90>)
 8001f7a:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <cppInit+0xa4>)
 8001f7c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor.PID_velocity.D = 0;
 8001f80:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <cppInit+0x90>)
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	// default voltage_power_supply
	motor.voltage_limit = 6;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <cppInit+0x90>)
 8001f8c:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <cppInit+0xa8>)
 8001f8e:	659a      	str	r2, [r3, #88]	@ 0x58
	// jerk control using voltage voltage ramp
	// default value is 300 volts per sec  ~ 0.3V per millisecond
	motor.PID_velocity.output_ramp = 1000;
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <cppInit+0x90>)
 8001f92:	4a15      	ldr	r2, [pc, #84]	@ (8001fe8 <cppInit+0xac>)
 8001f94:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

	// velocity low pass filtering time constant
	motor.LPF_velocity.Tf = 0.01f;
 8001f98:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <cppInit+0x90>)
 8001f9a:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <cppInit+0xb0>)
 8001f9c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	// angle P controller
	motor.P_angle.P = 20;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <cppInit+0x90>)
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <cppInit+0xa4>)
 8001fa4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	//  maximal velocity of the position control
	motor.velocity_limit = 4;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	@ (8001fcc <cppInit+0x90>)
 8001faa:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001fae:	661a      	str	r2, [r3, #96]	@ 0x60

	// initialize motor
	motor.init();
 8001fb0:	4806      	ldr	r0, [pc, #24]	@ (8001fcc <cppInit+0x90>)
 8001fb2:	f7fe fc49 	bl	8000848 <_ZN9BLDCMotor4initEv>
	// align encoder and start FOC
	motor.initFOC();
 8001fb6:	4805      	ldr	r0, [pc, #20]	@ (8001fcc <cppInit+0x90>)
 8001fb8:	f7fe fd6a 	bl	8000a90 <_ZN9BLDCMotor7initFOCEv>

	HAL_Delay(1000);
 8001fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fc0:	f001 fbd0 	bl	8003764 <HAL_Delay>
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000384 	.word	0x20000384
 8001fcc:	200001d4 	.word	0x200001d4
 8001fd0:	20000344 	.word	0x20000344
 8001fd4:	41400000 	.word	0x41400000
 8001fd8:	40400000 	.word	0x40400000
 8001fdc:	3e4ccccd 	.word	0x3e4ccccd
 8001fe0:	41a00000 	.word	0x41a00000
 8001fe4:	40c00000 	.word	0x40c00000
 8001fe8:	447a0000 	.word	0x447a0000
 8001fec:	3c23d70a 	.word	0x3c23d70a

08001ff0 <cppLoop>:

void cppLoop()
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	// main FOC algorithm function
	// the faster you run this function the better
	// Arduino UNO loop  ~1kHz
	// Bluepill loop ~10kHz
	motor.loopFOC();
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <cppLoop+0x18>)
 8001ff6:	f7fe ffb9 	bl	8000f6c <_ZN9BLDCMotor7loopFOCEv>

	// Motion control function
	// velocity, position or voltage (defined in motor.controller)
	// this function can be run at much lower frequency than loopFOC() function
	// You can also use motor.move() and set the motor.target in the code
	motor.move();
 8001ffa:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800200c <cppLoop+0x1c>
 8001ffe:	4802      	ldr	r0, [pc, #8]	@ (8002008 <cppLoop+0x18>)
 8002000:	f7fe fffc 	bl	8000ffc <_ZN9BLDCMotor4moveEf>
	// function intended to be used with serial plotter to monitor motor variables
	// significantly slowing the execution down!!!!
	// motor.monitor();

	// user communication
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200001d4 	.word	0x200001d4
 800200c:	c640e400 	.word	0xc640e400

08002010 <_Z41__static_initialization_and_destruction_0v>:
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af04      	add	r7, sp, #16
BLDCMotor motor(2);
 8002016:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8002058 <_Z41__static_initialization_and_destruction_0v+0x48>
 800201a:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8002058 <_Z41__static_initialization_and_destruction_0v+0x48>
 800201e:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002058 <_Z41__static_initialization_and_destruction_0v+0x48>
 8002022:	2102      	movs	r1, #2
 8002024:	480d      	ldr	r0, [pc, #52]	@ (800205c <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8002026:	f7fe fbc5 	bl	80007b4 <_ZN9BLDCMotorC1Eifff>
BLDCDriver3PWM driver(9, 10, 11, 12); // mini v1.1
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <_Z41__static_initialization_and_destruction_0v+0x50>)
 800202c:	9302      	str	r3, [sp, #8]
 800202e:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	230c      	movs	r3, #12
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	230b      	movs	r3, #11
 8002038:	220a      	movs	r2, #10
 800203a:	2109      	movs	r1, #9
 800203c:	4809      	ldr	r0, [pc, #36]	@ (8002064 <_Z41__static_initialization_and_destruction_0v+0x54>)
 800203e:	f000 ffd1 	bl	8002fe4 <_ZN14BLDCDriver3PWMC1Eiiiiii>
Encoder encoder(2, 3, 500);
 8002042:	2300      	movs	r3, #0
 8002044:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002068 <_Z41__static_initialization_and_destruction_0v+0x58>
 8002048:	2203      	movs	r2, #3
 800204a:	2102      	movs	r1, #2
 800204c:	4807      	ldr	r0, [pc, #28]	@ (800206c <_Z41__static_initialization_and_destruction_0v+0x5c>)
 800204e:	f001 fa43 	bl	80034d8 <_ZN7EncoderC1Eiifi>
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	c640e400 	.word	0xc640e400
 800205c:	200001d4 	.word	0x200001d4
 8002060:	ffffcfc7 	.word	0xffffcfc7
 8002064:	20000344 	.word	0x20000344
 8002068:	43fa0000 	.word	0x43fa0000
 800206c:	20000384 	.word	0x20000384

08002070 <_GLOBAL__sub_I_motor>:
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
 8002074:	f7ff ffcc 	bl	8002010 <_Z41__static_initialization_and_destruction_0v>
 8002078:	bd80      	pop	{r7, pc}

0800207a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800207e:	f001 fb0b 	bl	8003698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002082:	f000 f80d 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002086:	f000 f99f 	bl	80023c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800208a:	f000 f96d 	bl	8002368 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800208e:	f000 f917 	bl	80022c0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002092:	f000 f863 	bl	800215c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  cppInit();
 8002096:	f7ff ff51 	bl	8001f3c <cppInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cppLoop();
 800209a:	f7ff ffa9 	bl	8001ff0 <cppLoop>
 800209e:	e7fc      	b.n	800209a <main+0x20>

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b096      	sub	sp, #88	@ 0x58
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020aa:	2228      	movs	r2, #40	@ 0x28
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fe0e 	bl	8006cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e2:	2301      	movs	r3, #1
 80020e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020e6:	2302      	movs	r3, #2
 80020e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80020f0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80020f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020f6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020fa:	4618      	mov	r0, r3
 80020fc:	f001 fdc6 	bl	8003c8c <HAL_RCC_OscConfig>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002106:	f000 f99f 	bl	8002448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800210a:	230f      	movs	r3, #15
 800210c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800210e:	2302      	movs	r3, #2
 8002110:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800211a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	2102      	movs	r1, #2
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fdbe 	bl	8004ca8 <HAL_RCC_ClockConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002132:	f000 f989 	bl	8002448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800213a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4618      	mov	r0, r3
 8002144:	f002 ffc2 	bl	80050cc <HAL_RCCEx_PeriphCLKConfig>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800214e:	f000 f97b 	bl	8002448 <Error_Handler>
  }
}
 8002152:	bf00      	nop
 8002154:	3758      	adds	r7, #88	@ 0x58
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b096      	sub	sp, #88	@ 0x58
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002162:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800216e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	615a      	str	r2, [r3, #20]
 8002180:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	222c      	movs	r2, #44	@ 0x2c
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f004 fda1 	bl	8006cd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800218e:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 8002190:	4a4a      	ldr	r2, [pc, #296]	@ (80022bc <MX_TIM1_Init+0x160>)
 8002192:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002194:	4b48      	ldr	r3, [pc, #288]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 8002196:	2200      	movs	r2, #0
 8002198:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219a:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 719;
 80021a0:	4b45      	ldr	r3, [pc, #276]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021a2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80021a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a8:	4b43      	ldr	r3, [pc, #268]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ae:	4b42      	ldr	r3, [pc, #264]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b40      	ldr	r3, [pc, #256]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021ba:	483f      	ldr	r0, [pc, #252]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021bc:	f003 f90b 	bl	80053d6 <HAL_TIM_PWM_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80021c6:	f000 f93f 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80021ca:	483b      	ldr	r0, [pc, #236]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021cc:	f003 f8a2 	bl	8005314 <HAL_TIM_OC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80021d6:	f000 f937 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80021ea:	4619      	mov	r1, r3
 80021ec:	4832      	ldr	r0, [pc, #200]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80021ee:	f004 f847 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80021f8:	f000 f926 	bl	8002448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fc:	2360      	movs	r3, #96	@ 0x60
 80021fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002204:	2300      	movs	r3, #0
 8002206:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002214:	2300      	movs	r3, #0
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002218:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	4825      	ldr	r0, [pc, #148]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 8002222:	f003 fbc9 	bl	80059b8 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800222c:	f000 f90c 	bl	8002448 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002230:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002234:	2204      	movs	r2, #4
 8002236:	4619      	mov	r1, r3
 8002238:	481f      	ldr	r0, [pc, #124]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 800223a:	f003 fbbd 	bl	80059b8 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8002244:	f000 f900 	bl	8002448 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800224c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002250:	2208      	movs	r2, #8
 8002252:	4619      	mov	r1, r3
 8002254:	4818      	ldr	r0, [pc, #96]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 8002256:	f003 fb35 	bl	80058c4 <HAL_TIM_OC_ConfigChannel>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002260:	f000 f8f2 	bl	8002448 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800227c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002286:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800228a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 800229a:	f004 f85f 	bl	800635c <HAL_TIMEx_ConfigBreakDeadTime>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80022a4:	f000 f8d0 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022a8:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <MX_TIM1_Init+0x15c>)
 80022aa:	f000 f957 	bl	800255c <HAL_TIM_MspPostInit>

}
 80022ae:	bf00      	nop
 80022b0:	3758      	adds	r7, #88	@ 0x58
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200003e8 	.word	0x200003e8
 80022bc:	40012c00 	.word	0x40012c00

080022c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	@ 0x30
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 fcfe 	bl	8006cd0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022de:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <MX_TIM2_Init+0xa4>)
 80022e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <MX_TIM2_Init+0xa4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <MX_TIM2_Init+0xa4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <MX_TIM2_Init+0xa4>)
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <MX_TIM2_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <MX_TIM2_Init+0xa4>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002306:	2303      	movs	r3, #3
 8002308:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800230e:	2301      	movs	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800231e:	2301      	movs	r3, #1
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	4619      	mov	r1, r3
 8002330:	480c      	ldr	r0, [pc, #48]	@ (8002364 <MX_TIM2_Init+0xa4>)
 8002332:	f003 f993 	bl	800565c <HAL_TIM_Encoder_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800233c:	f000 f884 	bl	8002448 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002348:	463b      	mov	r3, r7
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	@ (8002364 <MX_TIM2_Init+0xa4>)
 800234e:	f003 ff97 	bl	8006280 <HAL_TIMEx_MasterConfigSynchronization>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002358:	f000 f876 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	3730      	adds	r7, #48	@ 0x30
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000434 	.word	0x20000434

08002368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800236e:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <MX_USART2_UART_Init+0x5c>)
 8002370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002372:	4b13      	ldr	r3, [pc, #76]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002374:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8002378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023a4:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023aa:	4805      	ldr	r0, [pc, #20]	@ (80023c0 <MX_USART2_UART_Init+0x58>)
 80023ac:	f004 f84e 	bl	800644c <HAL_UART_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023b6:	f000 f847 	bl	8002448 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000480 	.word	0x20000480
 80023c4:	40004400 	.word	0x40004400

080023c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	f107 030c 	add.w	r3, r7, #12
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <MX_GPIO_Init+0x7c>)
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	4a18      	ldr	r2, [pc, #96]	@ (8002444 <MX_GPIO_Init+0x7c>)
 80023e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023e8:	6153      	str	r3, [r2, #20]
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <MX_GPIO_Init+0x7c>)
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <MX_GPIO_Init+0x7c>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4a12      	ldr	r2, [pc, #72]	@ (8002444 <MX_GPIO_Init+0x7c>)
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002400:	6153      	str	r3, [r2, #20]
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <MX_GPIO_Init+0x7c>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002418:	f001 fc20 	bl	8003c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800241c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002422:	2301      	movs	r3, #1
 8002424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002438:	f001 fa9e 	bl	8003978 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800243c:	bf00      	nop
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40021000 	.word	0x40021000

08002448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800244c:	b672      	cpsid	i
}
 800244e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <Error_Handler+0x8>

08002454 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <HAL_MspInit+0x44>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a0e      	ldr	r2, [pc, #56]	@ (8002498 <HAL_MspInit+0x44>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <HAL_MspInit+0x44>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_MspInit+0x44>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_MspInit+0x44>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_MspInit+0x44>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0a      	ldr	r2, [pc, #40]	@ (80024d4 <HAL_TIM_PWM_MspInit+0x38>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d10b      	bne.n	80024c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ae:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80024b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024b8:	6193      	str	r3, [r2, #24]
 80024ba:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40021000 	.word	0x40021000

080024dc <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fc:	d128      	bne.n	8002550 <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a15      	ldr	r2, [pc, #84]	@ (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	61d3      	str	r3, [r2, #28]
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4a0f      	ldr	r2, [pc, #60]	@ (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 800251c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002520:	6153      	str	r3, [r2, #20]
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800252e:	2303      	movs	r3, #3
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253a:	2300      	movs	r3, #0
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800253e:	2301      	movs	r3, #1
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254c:	f001 fa14 	bl	8003978 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002550:	bf00      	nop
 8002552:	3728      	adds	r7, #40	@ 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <HAL_TIM_MspPostInit+0x68>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d11d      	bne.n	80025ba <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_TIM_MspPostInit+0x6c>)
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4a11      	ldr	r2, [pc, #68]	@ (80025c8 <HAL_TIM_MspPostInit+0x6c>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002588:	6153      	str	r3, [r2, #20]
 800258a:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <HAL_TIM_MspPostInit+0x6c>)
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002596:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800259a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80025a8:	2306      	movs	r3, #6
 80025aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	4619      	mov	r1, r3
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025b6:	f001 f9df 	bl	8003978 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025ba:	bf00      	nop
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40012c00 	.word	0x40012c00
 80025c8:	40021000 	.word	0x40021000

080025cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
 80025e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_UART_MspInit+0x80>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d129      	bne.n	8002642 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ee:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <HAL_UART_MspInit+0x84>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a17      	ldr	r2, [pc, #92]	@ (8002650 <HAL_UART_MspInit+0x84>)
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_UART_MspInit+0x84>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <HAL_UART_MspInit+0x84>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	4a11      	ldr	r2, [pc, #68]	@ (8002650 <HAL_UART_MspInit+0x84>)
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	6153      	str	r3, [r2, #20]
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <HAL_UART_MspInit+0x84>)
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800261e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002624:	2302      	movs	r3, #2
 8002626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002630:	2307      	movs	r3, #7
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800263e:	f001 f99b 	bl	8003978 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002642:	bf00      	nop
 8002644:	3728      	adds	r7, #40	@ 0x28
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40004400 	.word	0x40004400
 8002650:	40021000 	.word	0x40021000

08002654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <NMI_Handler+0x4>

0800265c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <HardFault_Handler+0x4>

08002664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <MemManage_Handler+0x4>

0800266c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	bf00      	nop
 800267a:	e7fd      	b.n	8002678 <UsageFault_Handler+0x4>

0800267c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026aa:	f001 f83b 	bl	8003724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <SystemInit+0x20>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	4a05      	ldr	r2, [pc, #20]	@ (80026d4 <SystemInit+0x20>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <_ZN8FOCMotorC1Ev>:
//#include "../../communication/SimpleFOCDebug.h"

/**
 * Default constructor - setting all variabels to default values
 */
FOCMotor::FOCMotor()
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	4a73      	ldr	r2, [pc, #460]	@ (80028b0 <_ZN8FOCMotorC1Ev+0x1d8>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	336c      	adds	r3, #108	@ 0x6c
 800270a:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800270e:	eddf 1a69 	vldr	s3, [pc, #420]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 8002712:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 8002716:	eddf 0a68 	vldr	s1, [pc, #416]	@ 80028b8 <_ZN8FOCMotorC1Ev+0x1e0>
 800271a:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fbdb 	bl	8002eda <_ZN13PIDControllerC1Efffff>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3390      	adds	r3, #144	@ 0x90
 8002728:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800272c:	eddf 1a61 	vldr	s3, [pc, #388]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 8002730:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 8002734:	eddf 0a60 	vldr	s1, [pc, #384]	@ 80028b8 <_ZN8FOCMotorC1Ev+0x1e0>
 8002738:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fbcc 	bl	8002eda <_ZN13PIDControllerC1Efffff>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	33b4      	adds	r3, #180	@ 0xb4
 8002746:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 80028bc <_ZN8FOCMotorC1Ev+0x1e4>
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fbaa 	bl	8002ea4 <_ZN13LowPassFilterC1Ef>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	33c0      	adds	r3, #192	@ 0xc0
 8002754:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 80028bc <_ZN8FOCMotorC1Ev+0x1e4>
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fba3 	bl	8002ea4 <_ZN13LowPassFilterC1Ef>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	33cc      	adds	r3, #204	@ 0xcc
 8002762:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8002766:	eddf 1a56 	vldr	s3, [pc, #344]	@ 80028c0 <_ZN8FOCMotorC1Ev+0x1e8>
 800276a:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 800276e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002772:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fbaf 	bl	8002eda <_ZN13PIDControllerC1Efffff>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	33f0      	adds	r3, #240	@ 0xf0
 8002780:	eeb3 2a04 	vmov.f32	s4, #52	@ 0x41a00000  20.0
 8002784:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 8002788:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 800278c:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 8002790:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fba0 	bl	8002eda <_ZN13PIDControllerC1Efffff>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80027a0:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 80028bc <_ZN8FOCMotorC1Ev+0x1e4>
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fb7d 	bl	8002ea4 <_ZN13LowPassFilterC1Ef>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80027b0:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80028b4 <_ZN8FOCMotorC1Ev+0x1dc>
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fb75 	bl	8002ea4 <_ZN13LowPassFilterC1Ef>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a3d      	ldr	r2, [pc, #244]	@ (80028c4 <_ZN8FOCMotorC1Ev+0x1ec>)
 80027ce:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2264      	movs	r2, #100	@ 0x64
 80027e6:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2209      	movs	r2, #9
 80027fe:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2204      	movs	r2, #4
 8002806:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2263      	movs	r2, #99	@ 0x63
 800280e:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
  // maximum angular velocity to be used for positioning 
  velocity_limit = DEF_VEL_LIM;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a2a      	ldr	r2, [pc, #168]	@ (80028c8 <_ZN8FOCMotorC1Ev+0x1f0>)
 800281e:	661a      	str	r2, [r3, #96]	@ 0x60
  // maximum voltage to be set to the motor
  voltage_limit = DEF_POWER_SUPPLY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a2a      	ldr	r2, [pc, #168]	@ (80028cc <_ZN8FOCMotorC1Ev+0x1f4>)
 8002824:	659a      	str	r2, [r3, #88]	@ 0x58
  // not set on the begining
  current_limit = DEF_CURRENT_LIM;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800282c:	65da      	str	r2, [r3, #92]	@ 0x5c

  // index search velocity
  velocity_index_search = DEF_INDEX_SEARCH_TARGET_VELOCITY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002834:	645a      	str	r2, [r3, #68]	@ 0x44
  // sensor and motor align voltage
  voltage_sensor_align = DEF_VOLTAGE_SENSOR_ALIGN;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a25      	ldr	r2, [pc, #148]	@ (80028d0 <_ZN8FOCMotorC1Ev+0x1f8>)
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40

  // default modulation is SinePWM
  foc_modulation = FOCModulationType::SinePWM;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

  // default target value
  target = 0;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	605a      	str	r2, [r3, #4]
  voltage.d = 0;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24
  voltage.q = 0;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	629a      	str	r2, [r3, #40]	@ 0x28
  // current target values
  current_sp = 0;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	619a      	str	r2, [r3, #24]
  current.q = 0;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
  current.d = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	62da      	str	r2, [r3, #44]	@ 0x2c

  // voltage bemf 
  voltage_bemf = 0;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	635a      	str	r2, [r3, #52]	@ 0x34

  // Initialize phase voltages U alpha and U beta used for inverse Park and Clarke transform
  Ualpha = 0;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	639a      	str	r2, [r3, #56]	@ 0x38
  Ubeta = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  //monitor_port 
  //monitor_port = nullptr;
  //sensor 
  sensor_offset = 0.0f;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  sensor = nullptr;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
  //current sensor 
  current_sense = nullptr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
}
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	08006d94 	.word	0x08006d94
 80028b4:	00000000 	.word	0x00000000
 80028b8:	43960000 	.word	0x43960000
 80028bc:	3ba3d70a 	.word	0x3ba3d70a
 80028c0:	447a0000 	.word	0x447a0000
 80028c4:	c640e400 	.word	0xc640e400
 80028c8:	41a00000 	.word	0x41a00000
 80028cc:	41400000 	.word	0x41400000
 80028d0:	40400000 	.word	0x40400000

080028d4 <_ZN8FOCMotor10linkSensorEP6Sensor>:


/**
	Sensor linking method
*/
void FOCMotor::linkSensor(Sensor* _sensor) {
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  sensor = _sensor;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZN8FOCMotor10shaftAngleEv>:
void FOCMotor::linkCurrentSense(CurrentSense* _current_sense) {
  current_sense = _current_sense;
}

// shaft angle calculation
float FOCMotor::shaftAngle() {
 80028f2:	b590      	push	{r4, r7, lr}
 80028f4:	ed2d 8b02 	vpush	{d8}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_angle;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <_ZN8FOCMotor10shaftAngleEv+0x1e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	edd3 7a03 	vldr	s15, [r3, #12]
 800290e:	e024      	b.n	800295a <_ZN8FOCMotor10shaftAngleEv+0x68>
  return sensor_direction*LPF_angle(sensor->getAngle()) - sensor_offset;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3304      	adds	r3, #4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4610      	mov	r0, r2
 8002938:	4798      	blx	r3
 800293a:	eef0 7a40 	vmov.f32	s15, s0
 800293e:	eeb0 0a67 	vmov.f32	s0, s15
 8002942:	4620      	mov	r0, r4
 8002944:	f000 fac2 	bl	8002ecc <_ZN13LowPassFilterclEf>
 8002948:	eef0 7a40 	vmov.f32	s15, s0
 800294c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8002956:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	ecbd 8b02 	vpop	{d8}
 8002966:	bd90      	pop	{r4, r7, pc}

08002968 <_ZN8FOCMotor13shaftVelocityEv>:
// shaft velocity calculation
float FOCMotor::shaftVelocity() {
 8002968:	b590      	push	{r4, r7, lr}
 800296a:	ed2d 8b02 	vpush	{d8}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_velocity;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <_ZN8FOCMotor13shaftVelocityEv+0x1e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	edd3 7a05 	vldr	s15, [r3, #20]
 8002984:	e01f      	b.n	80029c6 <_ZN8FOCMotor13shaftVelocityEv+0x5e>
  return sensor_direction*LPF_velocity(sensor->getVelocity());
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f503 748a 	add.w	r4, r3, #276	@ 0x114
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4610      	mov	r0, r2
 80029ae:	4798      	blx	r3
 80029b0:	eef0 7a40 	vmov.f32	s15, s0
 80029b4:	eeb0 0a67 	vmov.f32	s0, s15
 80029b8:	4620      	mov	r0, r4
 80029ba:	f000 fa87 	bl	8002ecc <_ZN13LowPassFilterclEf>
 80029be:	eef0 7a40 	vmov.f32	s15, s0
 80029c2:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 80029c6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	ecbd 8b02 	vpop	{d8}
 80029d2:	bd90      	pop	{r4, r7, pc}

080029d4 <_ZN8FOCMotor15electricalAngleEv>:

float FOCMotor::electricalAngle(){
 80029d4:	b580      	push	{r7, lr}
 80029d6:	ed2d 8b02 	vpush	{d8}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return electrical_angle;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <_ZN8FOCMotor15electricalAngleEv+0x1e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80029f0:	e025      	b.n	8002a3e <_ZN8FOCMotor15electricalAngleEv+0x6a>
  return  _normalizeAngle( (float)(sensor_direction * pole_pairs) * sensor->getMechanicalAngle()  - zero_electric_angle );
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 80029f8:	461a      	mov	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4798      	blx	r3
 8002a1e:	eef0 7a40 	vmov.f32	s15, s0
 8002a22:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8002a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a30:	eeb0 0a67 	vmov.f32	s0, s15
 8002a34:	f000 fa12 	bl	8002e5c <_Z15_normalizeAnglef>
 8002a38:	eef0 7a40 	vmov.f32	s15, s0
 8002a3c:	bf00      	nop
}
 8002a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	ecbd 8b02 	vpop	{d8}
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_ZN6Sensor6updateEv>:
#include "../foc_utils.h"
//#include "../time_utils.h"



void Sensor::update() {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	331c      	adds	r3, #28
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
 8002a60:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 8002a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a70:	d40c      	bmi.n	8002a8c <_ZN6Sensor6updateEv+0x40>
        return; // TODO signal error, e.g. via a flag and counter
    //angle_prev_ts = _micros();
    float d_angle = val - angle_prev;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a78:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a80:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    //if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1;
    angle_prev = val;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	e000      	b.n	8002a8e <_ZN6Sensor6updateEv+0x42>
        return; // TODO signal error, e.g. via a flag and counter
 8002a8c:	bf00      	nop
}
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aae:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002b6c <_ZN6Sensor11getVelocityEv+0xd8>
 8002ab2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8002aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8002abe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac6:	d50e      	bpl.n	8002ae6 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	619a      	str	r2, [r3, #24]
        return velocity;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	e038      	b.n	8002b58 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aec:	ed97 7a03 	vldr	s14, [r7, #12]
 8002af0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	d502      	bpl.n	8002b00 <_ZN6Sensor11getVelocityEv+0x6c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	e02b      	b.n	8002b58 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69da      	ldr	r2, [r3, #28]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b12:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002b70 <_ZN6Sensor11getVelocityEv+0xdc>
 8002b16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b2a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002b2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69da      	ldr	r2, [r3, #28]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	619a      	str	r2, [r3, #24]
    return velocity;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
}
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	358637bd 	.word	0x358637bd
 8002b70:	40c90fdb 	.word	0x40c90fdb

08002b74 <_ZN6Sensor4initEv>:



void Sensor::init() {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	331c      	adds	r3, #28
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
    //delayMicroseconds(1);
    vel_angle_prev = getSensorAngle(); // call again
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	eef0 7a40 	vmov.f32	s15, s0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	edc3 7a05 	vstr	s15, [r3, #20]
    //vel_angle_prev_ts = _micros();
    //delay(1);
    getSensorAngle(); // call once
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	331c      	adds	r3, #28
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    //delayMicroseconds(1);
    angle_prev = getSensorAngle(); // call again
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	331c      	adds	r3, #28
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	edc3 7a03 	vstr	s15, [r3, #12]
    //angle_prev_ts = _micros();
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
    return angle_prev;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	ee07 3a90 	vmov	s15, r3
}
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bfc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002c1c <_ZN6Sensor8getAngleEv+0x34>
 8002c00:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002c0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40c90fdb 	.word	0x40c90fdb

08002c20 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8002c20:	b5b0      	push	{r4, r5, r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fd47 	bl	80006c0 <__aeabi_i2d>
 8002c32:	a30f      	add	r3, pc, #60	@ (adr r3, 8002c70 <_ZN6Sensor15getPreciseAngleEv+0x50>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fac6 	bl	80001c8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fd fd4b 	bl	80006e4 <__aeabi_f2d>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7fd fbe7 	bl	8000428 <__adddf3>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c62:	eeb0 0a47 	vmov.f32	s0, s14
 8002c66:	eef0 0a67 	vmov.f32	s1, s15
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c70:	60000000 	.word	0x60000000
 8002c74:	401921fb 	.word	0x401921fb

08002c78 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
    return full_rotations;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    return 0; // default false
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_ZSt4fmodff>:
  using ::fmod;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cb0:	edc7 0a00 	vstr	s1, [r7]
 8002cb4:	edd7 0a00 	vldr	s1, [r7]
 8002cb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cbc:	f003 ff66 	bl	8006b8c <fmodf>
 8002cc0:	eef0 7a40 	vmov.f32	s15, s0
 8002cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <_Z4_sinf>:
#include <algorithm>

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  int32_t t1, t2;
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8002cda:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cde:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002db4 <_Z4_sinf+0xe4>
 8002ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cea:	ee17 3a90 	vmov	r3, s15
 8002cee:	60fb      	str	r3, [r7, #12]
  int frac = i & 0xff;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d02:	d80b      	bhi.n	8002d1c <_Z4_sinf+0x4c>
    t1 = (int32_t)sine_array[i]; t2 = (int32_t)sine_array[i+1];
 8002d04:	4a2c      	ldr	r2, [pc, #176]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a29      	ldr	r2, [pc, #164]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e033      	b.n	8002d84 <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d20:	d80e      	bhi.n	8002d40 <_Z4_sinf+0x70>
    t1 = (int32_t)sine_array[128 - i]; t2 = (int32_t)sine_array[127 - i];
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002d36:	4a20      	ldr	r2, [pc, #128]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e021      	b.n	8002d84 <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2bbf      	cmp	r3, #191	@ 0xbf
 8002d44:	d80e      	bhi.n	8002d64 <_Z4_sinf+0x94>
    t1 = -(int32_t)sine_array[-128 + i]; t2 = -(int32_t)sine_array[-127 + i];
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3b80      	subs	r3, #128	@ 0x80
 8002d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d50:	425b      	negs	r3, r3
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3b7f      	subs	r3, #127	@ 0x7f
 8002d58:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d5e:	425b      	negs	r3, r3
 8002d60:	613b      	str	r3, [r7, #16]
 8002d62:	e00f      	b.n	8002d84 <_Z4_sinf+0xb4>
  }
  else {
    t1 = -(int32_t)sine_array[256 - i]; t2 = -(int32_t)sine_array[255 - i];
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002d6a:	4a13      	ldr	r2, [pc, #76]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d70:	425b      	negs	r3, r3
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002db8 <_Z4_sinf+0xe8>)
 8002d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d80:	425b      	negs	r3, r3
 8002d82:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	fb02 f303 	mul.w	r3, r2, r3
 8002d90:	121a      	asrs	r2, r3, #8
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	4413      	add	r3, r2
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002dbc <_Z4_sinf+0xec>
 8002da2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002da6:	eeb0 0a67 	vmov.f32	s0, s15
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	4622f983 	.word	0x4622f983
 8002db8:	200000dc 	.word	0x200000dc
 8002dbc:	38000000 	.word	0x38000000

08002dc0 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8002dca:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002e18 <_Z4_cosf+0x58>
 8002dd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002dda:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dde:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002e1c <_Z4_cosf+0x5c>
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	dd06      	ble.n	8002dfa <_Z4_cosf+0x3a>
 8002dec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002df0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002e1c <_Z4_cosf+0x5c>
 8002df4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002df8:	e001      	b.n	8002dfe <_Z4_cosf+0x3e>
 8002dfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dfe:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 8002e02:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e06:	f7ff ff63 	bl	8002cd0 <_Z4_sinf>
 8002e0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8002e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	3fc90fdb 	.word	0x3fc90fdb
 8002e1c:	40c90fdb 	.word	0x40c90fdb

08002e20 <_Z7_sincosfPfS_>:


__attribute__((weak)) void _sincos(float a, float* s, float* c){
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e2a:	60b8      	str	r0, [r7, #8]
 8002e2c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 8002e2e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e32:	f7ff ff4d 	bl	8002cd0 <_Z4_sinf>
 8002e36:	eef0 7a40 	vmov.f32	s15, s0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 8002e40:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e44:	f7ff ffbc 	bl	8002dc0 <_Z4_cosf>
 8002e48:	eef0 7a40 	vmov.f32	s15, s0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	edc3 7a00 	vstr	s15, [r3]
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002e66:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002ea0 <_Z15_normalizeAnglef+0x44>
 8002e6a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e6e:	f7ff ff1a 	bl	8002ca6 <_ZSt4fmodff>
 8002e72:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8002e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	db02      	blt.n	8002e8a <_Z15_normalizeAnglef+0x2e>
 8002e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e88:	e005      	b.n	8002e96 <_Z15_normalizeAnglef+0x3a>
 8002e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e8e:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002ea0 <_Z15_normalizeAnglef+0x44>
 8002e92:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002e96:	eeb0 0a67 	vmov.f32	s0, s15
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40c90fdb 	.word	0x40c90fdb

08002ea4 <_ZN13LowPassFilterC1Ef>:
#include "lowpass_filter.h"

LowPassFilter::LowPassFilter(float time_constant)
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
{
    //timestamp_prev = _micros();
}
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	ed87 0a00 	vstr	s0, [r7]
 8002ed8:	deff      	udf	#255	@ 0xff

08002eda <_ZN13PIDControllerC1Efffff>:
#include "pid.h"

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6178      	str	r0, [r7, #20]
 8002ee2:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ee6:	edc7 0a03 	vstr	s1, [r7, #12]
 8002eea:	ed87 1a02 	vstr	s2, [r7, #8]
 8002eee:	edc7 1a01 	vstr	s3, [r7, #4]
 8002ef2:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	601a      	str	r2, [r3, #0]
    , I(I)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	605a      	str	r2, [r3, #4]
    , D(D)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	61da      	str	r2, [r3, #28]
{
    //timestamp_prev = _micros();
}
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <_ZN13PIDControllerclEf>:

// PID controller function
float PIDController::operator() (float error){
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	ed87 0a00 	vstr	s0, [r7]
 8002f46:	deff      	udf	#255	@ 0xff

08002f48 <_ZN13PIDController5resetEv>:
    timestamp_prev = timestamp_now;
    return output;
    */
}

void PIDController::reset(){
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    integral_prev = 0.0f;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	61da      	str	r2, [r3, #28]
    output_prev = 0.0f;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
    error_prev = 0.0f;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	615a      	str	r2, [r3, #20]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <_ZN10BLDCDriver4typeEv>:
         * @param sa - phase C state : active / disabled ( high impedance )
        */
        virtual void setPhaseState(PhaseState sa, PhaseState sb, PhaseState sc) = 0;

        /** driver type getter function */
        virtual DriverType type() override { return DriverType::BLDC; };
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <_ZN9FOCDriverC1Ev>:
};

/**
 * FOC driver class
 */
class FOCDriver{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <_ZN9FOCDriverC1Ev+0x30>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	741a      	strb	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	615a      	str	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	761a      	strb	r2, [r3, #24]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	08006e24 	.word	0x08006e24

08002fc0 <_ZN10BLDCDriverC1Ev>:
class BLDCDriver: public FOCDriver{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ffde 	bl	8002f8c <_ZN9FOCDriverC1Ev>
 8002fd0:	4a03      	ldr	r2, [pc, #12]	@ (8002fe0 <_ZN10BLDCDriverC1Ev+0x20>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	08006e04 	.word	0x08006e04

08002fe4 <_ZN14BLDCDriver3PWMC1Eiiiiii>:
#include "BLDCDriver3PWM.h"
#include "main.h"

BLDCDriver3PWM::BLDCDriver3PWM(int phA, int phB, int phC, int en1, int en2, int en3){
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff ffe3 	bl	8002fc0 <_ZN10BLDCDriverC1Ev>
 8002ffa:	4a11      	ldr	r2, [pc, #68]	@ (8003040 <_ZN14BLDCDriver3PWMC1Eiiiiii+0x5c>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]
  // Pin initialization
  pwmA = phA;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	629a      	str	r2, [r3, #40]	@ 0x28
  pwmB = phB;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pwmC = phC;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30

  // enable_pin pin
  enableA_pin = en1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34
  enableB_pin = en2;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	639a      	str	r2, [r3, #56]	@ 0x38
  enableC_pin = en3;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a3a      	ldr	r2, [r7, #32]
 8003022:	63da      	str	r2, [r3, #60]	@ 0x3c

  // default power-supply value
  voltage_power_supply = DEF_POWER_SUPPLY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <_ZN14BLDCDriver3PWMC1Eiiiiii+0x60>)
 8003028:	609a      	str	r2, [r3, #8]
  voltage_limit = NOT_SET;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4a06      	ldr	r2, [pc, #24]	@ (8003048 <_ZN14BLDCDriver3PWMC1Eiiiiii+0x64>)
 800302e:	60da      	str	r2, [r3, #12]
  pwm_frequency = NOT_SET;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4a06      	ldr	r2, [pc, #24]	@ (800304c <_ZN14BLDCDriver3PWMC1Eiiiiii+0x68>)
 8003034:	605a      	str	r2, [r3, #4]

}
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	08006de4 	.word	0x08006de4
 8003044:	41400000 	.word	0x41400000
 8003048:	c640e400 	.word	0xc640e400
 800304c:	ffffcfc7 	.word	0xffffcfc7

08003050 <_ZN14BLDCDriver3PWM6enableEv>:

// enable motor driver
void  BLDCDriver3PWM::enable(){
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8003058:	2201      	movs	r2, #1
 800305a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800305e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003062:	f000 fdfb 	bl	8003c5c <HAL_GPIO_WritePin>
    if ( _isset(enableA_pin) ) digitalWrite(enableA_pin, enable_active_high);
    if ( _isset(enableB_pin) ) digitalWrite(enableB_pin, enable_active_high);
    if ( _isset(enableC_pin) ) digitalWrite(enableC_pin, enable_active_high);
    */
    // set zero to PWM
    setPwm(0,0,0);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3310      	adds	r3, #16
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8003088 <_ZN14BLDCDriver3PWM6enableEv+0x38>
 8003072:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003088 <_ZN14BLDCDriver3PWM6enableEv+0x38>
 8003076:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003088 <_ZN14BLDCDriver3PWM6enableEv+0x38>
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	00000000 	.word	0x00000000

0800308c <_ZN14BLDCDriver3PWM7disableEv>:

// disable motor driver
void BLDCDriver3PWM::disable()
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  // set zero to PWM
  setPwm(0, 0, 0);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3310      	adds	r3, #16
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 80030c4 <_ZN14BLDCDriver3PWM7disableEv+0x38>
 80030a0:	eddf 0a08 	vldr	s1, [pc, #32]	@ 80030c4 <_ZN14BLDCDriver3PWM7disableEv+0x38>
 80030a4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80030c4 <_ZN14BLDCDriver3PWM7disableEv+0x38>
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
  // disable the driver - if enable_pin pin available
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030b6:	f000 fdd1 	bl	8003c5c <HAL_GPIO_WritePin>
  if ( _isset(enableA_pin) ) digitalWrite(enableA_pin, !enable_active_high);
  if ( _isset(enableB_pin) ) digitalWrite(enableB_pin, !enable_active_high);
  if ( _isset(enableC_pin) ) digitalWrite(enableC_pin, !enable_active_high);
  */

}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	00000000 	.word	0x00000000

080030c8 <_ZN14BLDCDriver3PWM4initEv>:

// init hardware pins
int BLDCDriver3PWM::init() {
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  // PWM pins
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80030d0:	2100      	movs	r1, #0
 80030d2:	4816      	ldr	r0, [pc, #88]	@ (800312c <_ZN14BLDCDriver3PWM4initEv+0x64>)
 80030d4:	f002 f9d6 	bl	8005484 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80030d8:	2104      	movs	r1, #4
 80030da:	4814      	ldr	r0, [pc, #80]	@ (800312c <_ZN14BLDCDriver3PWM4initEv+0x64>)
 80030dc:	f002 f9d2 	bl	8005484 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80030e0:	2108      	movs	r1, #8
 80030e2:	4812      	ldr	r0, [pc, #72]	@ (800312c <_ZN14BLDCDriver3PWM4initEv+0x64>)
 80030e4:	f002 f9ce 	bl	8005484 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030f2:	f000 fdb3 	bl	8003c5c <HAL_GPIO_WritePin>

	if(!_isset(voltage_limit) || voltage_limit > voltage_power_supply){
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80030fc:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003130 <_ZN14BLDCDriver3PWM4initEv+0x68>
 8003100:	eef4 7a47 	vcmp.f32	s15, s14
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d00a      	beq.n	8003120 <_ZN14BLDCDriver3PWM4initEv+0x58>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	edd3 7a02 	vldr	s15, [r3, #8]
 8003116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dd03      	ble.n	8003128 <_ZN14BLDCDriver3PWM4initEv+0x60>
		voltage_limit =  voltage_power_supply;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	deff      	udf	#255	@ 0xff
 800312a:	bf00      	nop
 800312c:	200003e8 	.word	0x200003e8
 8003130:	c640e400 	.word	0xc640e400

08003134 <_ZN14BLDCDriver3PWM13setPhaseStateE10PhaseStateS0_S0_>:
}



// Set voltage to the pwm pin
void BLDCDriver3PWM::setPhaseState(PhaseState sa, PhaseState sb, PhaseState sc) {
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	4608      	mov	r0, r1
 800313e:	4611      	mov	r1, r2
 8003140:	461a      	mov	r2, r3
 8003142:	4603      	mov	r3, r0
 8003144:	70fb      	strb	r3, [r7, #3]
 8003146:	460b      	mov	r3, r1
 8003148:	70bb      	strb	r3, [r7, #2]
 800314a:	4613      	mov	r3, r2
 800314c:	707b      	strb	r3, [r7, #1]
    digitalWrite(enableA_pin, sa == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
    digitalWrite(enableB_pin, sb == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
    digitalWrite(enableC_pin, sc == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
  }
  */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <_ZN14BLDCDriver3PWM6setPwmEfff>:

// Set voltage to the pwm pin
void BLDCDriver3PWM::setPwm(float Ua, float Ub, float Uc) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	ed87 0a02 	vstr	s0, [r7, #8]
 8003168:	edc7 0a01 	vstr	s1, [r7, #4]
 800316c:	ed87 1a00 	vstr	s2, [r7]

  // limit the voltage in driver
  Ua = _constrain(Ua, 0.0f, voltage_limit);
 8003170:	edd7 7a02 	vldr	s15, [r7, #8]
 8003174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317c:	d502      	bpl.n	8003184 <_ZN14BLDCDriver3PWM6setPwmEfff+0x28>
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e00d      	b.n	80031a0 <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	edd3 7a03 	vldr	s15, [r3, #12]
 800318a:	ed97 7a02 	vldr	s14, [r7, #8]
 800318e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	dd02      	ble.n	800319e <_ZN14BLDCDriver3PWM6setPwmEfff+0x42>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	e000      	b.n	80031a0 <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	60bb      	str	r3, [r7, #8]
  Ub = _constrain(Ub, 0.0f, voltage_limit);
 80031a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ae:	d502      	bpl.n	80031b6 <_ZN14BLDCDriver3PWM6setPwmEfff+0x5a>
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e00d      	b.n	80031d2 <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80031bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80031c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	dd02      	ble.n	80031d0 <_ZN14BLDCDriver3PWM6setPwmEfff+0x74>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	e000      	b.n	80031d2 <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	607b      	str	r3, [r7, #4]
  Uc = _constrain(Uc, 0.0f, voltage_limit);
 80031d4:	edd7 7a00 	vldr	s15, [r7]
 80031d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d502      	bpl.n	80031e8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x8c>
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e00d      	b.n	8003204 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80031ee:	ed97 7a00 	vldr	s14, [r7]
 80031f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dd02      	ble.n	8003202 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa6>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	e000      	b.n	8003204 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	603b      	str	r3, [r7, #0]
  // calculate duty cycle
  // limited in [0,1]
  dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	ed93 7a02 	vldr	s14, [r3, #8]
 800320c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	d502      	bpl.n	8003224 <_ZN14BLDCDriver3PWM6setPwmEfff+0xc8>
 800321e:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003334 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8003222:	e017      	b.n	8003254 <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	ed93 7a02 	vldr	s14, [r3, #8]
 800322a:	edd7 6a02 	vldr	s13, [r7, #8]
 800322e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	dd02      	ble.n	8003246 <_ZN14BLDCDriver3PWM6setPwmEfff+0xea>
 8003240:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003244:	e006      	b.n	8003254 <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	ed93 7a02 	vldr	s14, [r3, #8]
 800324c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	edc3 7a07 	vstr	s15, [r3, #28]
  dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003260:	edd7 6a01 	vldr	s13, [r7, #4]
 8003264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003268:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d502      	bpl.n	8003278 <_ZN14BLDCDriver3PWM6setPwmEfff+0x11c>
 8003272:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8003334 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8003276:	e017      	b.n	80032a8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	ed93 7a02 	vldr	s14, [r3, #8]
 800327e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800328a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	dd02      	ble.n	800329a <_ZN14BLDCDriver3PWM6setPwmEfff+0x13e>
 8003294:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003298:	e006      	b.n	80032a8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	ed93 7a02 	vldr	s14, [r3, #8]
 80032a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80032a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	edc3 7a08 	vstr	s15, [r3, #32]
  dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80032b4:	edd7 6a00 	vldr	s13, [r7]
 80032b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	d502      	bpl.n	80032cc <_ZN14BLDCDriver3PWM6setPwmEfff+0x170>
 80032c6:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003334 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 80032ca:	e017      	b.n	80032fc <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80032d2:	edd7 6a00 	vldr	s13, [r7]
 80032d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	dd02      	ble.n	80032ee <_ZN14BLDCDriver3PWM6setPwmEfff+0x192>
 80032e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80032ec:	e006      	b.n	80032fc <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80032f4:	edd7 6a00 	vldr	s13, [r7]
 80032f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

  // hardware specific writing
  // hardware specific function - depending on driver and mcu
  _writeDutyCycle3PWM(dc_a, dc_b, dc_c, params);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	edd3 7a07 	vldr	s15, [r3, #28]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	ed93 7a08 	vldr	s14, [r3, #32]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4618      	mov	r0, r3
 800331a:	eeb0 1a66 	vmov.f32	s2, s13
 800331e:	eef0 0a47 	vmov.f32	s1, s14
 8003322:	eeb0 0a67 	vmov.f32	s0, s15
 8003326:	f000 f807 	bl	8003338 <_Z19_writeDutyCycle3PWMfffPv>
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	00000000 	.word	0x00000000

08003338 <_Z19_writeDutyCycle3PWMfffPv>:
}

// function setting the pwm duty cycle to the hardware
// - BLDC motor - 3PWM setting
// - hardware speciffic
__attribute__((weak)) void _writeDutyCycle3PWM(float dc_a,  float dc_b, float dc_c, void* params){
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003342:	edc7 0a02 	vstr	s1, [r7, #8]
 8003346:	ed87 1a01 	vstr	s2, [r7, #4]
 800334a:	6038      	str	r0, [r7, #0]
	// Convert to 0~COUNTER_PERIOD
	uint16_t converted_cnt_a = (int)_round(dc_a * COUNTER_PERIOD);
 800334c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003350:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800335c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003360:	db0f      	blt.n	8003382 <_Z19_writeDutyCycle3PWMfffPv+0x4a>
 8003362:	edd7 7a03 	vldr	s15, [r7, #12]
 8003366:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 800336a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800336e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003372:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800337a:	ee17 3a90 	vmov	r3, s15
 800337e:	b29b      	uxth	r3, r3
 8003380:	e00e      	b.n	80033a0 <_Z19_writeDutyCycle3PWMfffPv+0x68>
 8003382:	edd7 7a03 	vldr	s15, [r7, #12]
 8003386:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 800338a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800338e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800339a:	ee17 3a90 	vmov	r3, s15
 800339e:	b29b      	uxth	r3, r3
 80033a0:	82fb      	strh	r3, [r7, #22]
	uint16_t converted_cnt_b = (int)_round(dc_b * COUNTER_PERIOD);
 80033a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a6:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 80033aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	db0f      	blt.n	80033d8 <_Z19_writeDutyCycle3PWMfffPv+0xa0>
 80033b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033bc:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 80033c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d0:	ee17 3a90 	vmov	r3, s15
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	e00e      	b.n	80033f6 <_Z19_writeDutyCycle3PWMfffPv+0xbe>
 80033d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033dc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 80033e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f0:	ee17 3a90 	vmov	r3, s15
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	82bb      	strh	r3, [r7, #20]
	uint16_t converted_cnt_c = (int)_round(dc_c * COUNTER_PERIOD);
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003404:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340c:	db0f      	blt.n	800342e <_Z19_writeDutyCycle3PWMfffPv+0xf6>
 800340e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003412:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800341e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003422:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003426:	ee17 3a90 	vmov	r3, s15
 800342a:	b29b      	uxth	r3, r3
 800342c:	e00e      	b.n	800344c <_Z19_writeDutyCycle3PWMfffPv+0x114>
 800342e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003432:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8003474 <_Z19_writeDutyCycle3PWMfffPv+0x13c>
 8003436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800343e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003446:	ee17 3a90 	vmov	r3, s15
 800344a:	b29b      	uxth	r3, r3
 800344c:	827b      	strh	r3, [r7, #18]

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, converted_cnt_a);
 800344e:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <_Z19_writeDutyCycle3PWMfffPv+0x140>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	8afa      	ldrh	r2, [r7, #22]
 8003454:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, converted_cnt_b);
 8003456:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <_Z19_writeDutyCycle3PWMfffPv+0x140>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	8aba      	ldrh	r2, [r7, #20]
 800345c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, converted_cnt_c);
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <_Z19_writeDutyCycle3PWMfffPv+0x140>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	8a7a      	ldrh	r2, [r7, #18]
 8003464:	63da      	str	r2, [r3, #60]	@ 0x3c

  // transform duty cycle from [0,1] to [0,255]
  //analogWrite(((GenericDriverParams*)params)->pins[0], 255.0f*dc_a);
  //analogWrite(((GenericDriverParams*)params)->pins[1], 255.0f*dc_b);
  //analogWrite(((GenericDriverParams*)params)->pins[2], 255.0f*dc_c);
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	4433c000 	.word	0x4433c000
 8003478:	200003e8 	.word	0x200003e8

0800347c <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	4a12      	ldr	r2, [pc, #72]	@ (80034d0 <_ZN6SensorC1Ev+0x54>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a11      	ldr	r2, [pc, #68]	@ (80034d4 <_ZN6SensorC1Ev+0x58>)
 800348e:	605a      	str	r2, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	615a      	str	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	08006db8 	.word	0x08006db8
 80034d4:	38d1b717 	.word	0x38d1b717

080034d8 <_ZN7EncoderC1Eiifi>:
  - encA, encB    - encoder A and B pins
  - cpr           - counts per rotation number (cpm=ppm*4)
  - index pin     - (optional input)
*/

Encoder::Encoder(int _encA, int _encB , float _ppr, int _index){
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6178      	str	r0, [r7, #20]
 80034e0:	6139      	str	r1, [r7, #16]
 80034e2:	60fa      	str	r2, [r7, #12]
 80034e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff ffc5 	bl	800347c <_ZN6SensorC1Ev>
 80034f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003568 <_ZN7EncoderC1Eiifi+0x90>)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  // Encoder measurement structure init
  // hardware pins
  pinA = _encA;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	625a      	str	r2, [r3, #36]	@ 0x24
  pinB = _encB;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	629a      	str	r2, [r3, #40]	@ 0x28
  // counter setup
  pulse_counter = 0;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2200      	movs	r2, #0
 8003510:	639a      	str	r2, [r3, #56]	@ 0x38
  pulse_timestamp = 0;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	63da      	str	r2, [r3, #60]	@ 0x3c

  cpr = _ppr;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34
  A_active = 0;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2200      	movs	r2, #0
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40
  B_active = 0;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
  I_active = 0;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	2200      	movs	r2, #0
 800352e:	649a      	str	r2, [r3, #72]	@ 0x48
  // index pin
  index_pin = _index; // its 0 if not used
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	62da      	str	r2, [r3, #44]	@ 0x2c

  // velocity calculation variables
  prev_Th = 0;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	651a      	str	r2, [r3, #80]	@ 0x50
  pulse_per_second = 0;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54
  prev_pulse_counter = 0;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2200      	movs	r2, #0
 800354a:	659a      	str	r2, [r3, #88]	@ 0x58
  //prev_timestamp_us = _micros();

  // extern pullup as default
  pullup = Pullup::USE_EXTERN;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  // enable quadrature encoder by default
  quadrature = Quadrature::ON;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	08006e3c 	.word	0x08006e3c

0800356c <_ZN7Encoder6updateEv>:
  */
}


// Sensor update function. Safely copy volatile interrupt variables into Sensor base class state variables.
void Encoder::update() {
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	encoder_cnt = TIM2->CNT;
 8003574:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	661a      	str	r2, [r3, #96]	@ 0x60
  interrupts();
  // TODO: numerical precision issue here if the pulse_counter overflows the angle will be lost
  full_rotations = copy_pulse_counter / (int)cpr;
  angle_prev = _2PI * ((copy_pulse_counter) % ((int)cpr)) / ((float)cpr);
  */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <_ZN7Encoder14getSensorAngleEv>:

/*
	Shaft angle calculation
*/
float Encoder::getSensorAngle(){
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  return _2PI * (pulse_counter) / ((float)cpr);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003598:	ee07 3a90 	vmov	s15, r3
 800359c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035a0:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80035c4 <_ZN7Encoder14getSensorAngleEv+0x38>
 80035a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80035ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80035b6:	eeb0 0a67 	vmov.f32	s0, s15
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40c90fdb 	.word	0x40c90fdb

080035c8 <_ZN7Encoder11getVelocityEv>:

/*
  Shaft velocity calculation
  function using mixed time and frequency measurement technique
*/
float Encoder::getVelocity(){
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	deff      	udf	#255	@ 0xff

080035d2 <_ZN7Encoder11needsSearchEv>:
  */
}

// getter for index pin
// return -1 if no index
int Encoder::needsSearch(){
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b082      	sub	sp, #8
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  return hasIndex() && !index_found;
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f813 	bl	8003606 <_ZN7Encoder8hasIndexEv>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <_ZN7Encoder11needsSearchEv+0x2a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <_ZN7Encoder11needsSearchEv+0x2a>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <_ZN7Encoder11needsSearchEv+0x2c>
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_ZN7Encoder8hasIndexEv>:

// private function used to determine if encoder has index
int Encoder::hasIndex(){
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  return index_pin != 0;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	2b00      	cmp	r3, #0
 8003614:	bf14      	ite	ne
 8003616:	2301      	movne	r3, #1
 8003618:	2300      	moveq	r3, #0
 800361a:	b2db      	uxtb	r3, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_ZN7Encoder4initEv>:


// encoder initialisation of the hardware pins
// and calculation variables
void Encoder::init(){
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8003630:	213c      	movs	r1, #60	@ 0x3c
 8003632:	4803      	ldr	r0, [pc, #12]	@ (8003640 <_ZN7Encoder4initEv+0x18>)
 8003634:	f002 f8b8 	bl	80057a8 <HAL_TIM_Encoder_Start>
  if(quadrature == Quadrature::ON) cpr = 4*cpr;

  // we don't call Sensor::init() here because init is handled in Encoder class.

   */
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000434 	.word	0x20000434

08003644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800367c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003648:	f7ff f834 	bl	80026b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800364c:	480c      	ldr	r0, [pc, #48]	@ (8003680 <LoopForever+0x6>)
  ldr r1, =_edata
 800364e:	490d      	ldr	r1, [pc, #52]	@ (8003684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003650:	4a0d      	ldr	r2, [pc, #52]	@ (8003688 <LoopForever+0xe>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003654:	e002      	b.n	800365c <LoopCopyDataInit>

08003656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800365a:	3304      	adds	r3, #4

0800365c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800365c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800365e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003660:	d3f9      	bcc.n	8003656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003662:	4a0a      	ldr	r2, [pc, #40]	@ (800368c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003664:	4c0a      	ldr	r4, [pc, #40]	@ (8003690 <LoopForever+0x16>)
  movs r3, #0
 8003666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003668:	e001      	b.n	800366e <LoopFillZerobss>

0800366a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800366a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800366c:	3204      	adds	r2, #4

0800366e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800366e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003670:	d3fb      	bcc.n	800366a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003672:	f003 fb3b 	bl	8006cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003676:	f7fe fd00 	bl	800207a <main>

0800367a <LoopForever>:

LoopForever:
    b LoopForever
 800367a:	e7fe      	b.n	800367a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800367c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003684:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8003688:	08006e94 	.word	0x08006e94
  ldr r2, =_sbss
 800368c:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8003690:	20000644 	.word	0x20000644

08003694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003694:	e7fe      	b.n	8003694 <ADC1_2_IRQHandler>
	...

08003698 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800369c:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <HAL_Init+0x28>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a07      	ldr	r2, [pc, #28]	@ (80036c0 <HAL_Init+0x28>)
 80036a2:	f043 0310 	orr.w	r3, r3, #16
 80036a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a8:	2003      	movs	r0, #3
 80036aa:	f000 f931 	bl	8003910 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ae:	2000      	movs	r0, #0
 80036b0:	f000 f808 	bl	80036c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b4:	f7fe fece 	bl	8002454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40022000 	.word	0x40022000

080036c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_InitTick+0x54>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <HAL_InitTick+0x58>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4619      	mov	r1, r3
 80036d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036da:	fbb3 f3f1 	udiv	r3, r3, r1
 80036de:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f93b 	bl	800395e <HAL_SYSTICK_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00e      	b.n	8003710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b0f      	cmp	r3, #15
 80036f6:	d80a      	bhi.n	800370e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f8:	2200      	movs	r2, #0
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003700:	f000 f911 	bl	8003926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003704:	4a06      	ldr	r2, [pc, #24]	@ (8003720 <HAL_InitTick+0x5c>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e000      	b.n	8003710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	200000d8 	.word	0x200000d8
 800371c:	20000164 	.word	0x20000164
 8003720:	20000160 	.word	0x20000160

08003724 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003728:	4b06      	ldr	r3, [pc, #24]	@ (8003744 <HAL_IncTick+0x20>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	4b06      	ldr	r3, [pc, #24]	@ (8003748 <HAL_IncTick+0x24>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4413      	add	r3, r2
 8003734:	4a04      	ldr	r2, [pc, #16]	@ (8003748 <HAL_IncTick+0x24>)
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000164 	.word	0x20000164
 8003748:	20000508 	.word	0x20000508

0800374c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003750:	4b03      	ldr	r3, [pc, #12]	@ (8003760 <HAL_GetTick+0x14>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000508 	.word	0x20000508

08003764 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800376c:	f7ff ffee 	bl	800374c <HAL_GetTick>
 8003770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800377c:	d005      	beq.n	800378a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377e:	4b0a      	ldr	r3, [pc, #40]	@ (80037a8 <HAL_Delay+0x44>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800378a:	bf00      	nop
 800378c:	f7ff ffde 	bl	800374c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	429a      	cmp	r2, r3
 800379a:	d8f7      	bhi.n	800378c <HAL_Delay+0x28>
  {
  }
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000164 	.word	0x20000164

080037ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b085      	sub	sp, #20
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037bc:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037c8:	4013      	ands	r3, r2
 80037ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037de:	4a04      	ldr	r2, [pc, #16]	@ (80037f0 <__NVIC_SetPriorityGrouping+0x44>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	60d3      	str	r3, [r2, #12]
}
 80037e4:	bf00      	nop
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <__NVIC_GetPriorityGrouping+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 0307 	and.w	r3, r3, #7
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	4603      	mov	r3, r0
 8003818:	6039      	str	r1, [r7, #0]
 800381a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800381c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db0a      	blt.n	800383a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	490c      	ldr	r1, [pc, #48]	@ (800385c <__NVIC_SetPriority+0x4c>)
 800382a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382e:	0112      	lsls	r2, r2, #4
 8003830:	b2d2      	uxtb	r2, r2
 8003832:	440b      	add	r3, r1
 8003834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003838:	e00a      	b.n	8003850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	b2da      	uxtb	r2, r3
 800383e:	4908      	ldr	r1, [pc, #32]	@ (8003860 <__NVIC_SetPriority+0x50>)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	3b04      	subs	r3, #4
 8003848:	0112      	lsls	r2, r2, #4
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	440b      	add	r3, r1
 800384e:	761a      	strb	r2, [r3, #24]
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000e100 	.word	0xe000e100
 8003860:	e000ed00 	.word	0xe000ed00

08003864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f1c3 0307 	rsb	r3, r3, #7
 800387e:	2b04      	cmp	r3, #4
 8003880:	bf28      	it	cs
 8003882:	2304      	movcs	r3, #4
 8003884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3304      	adds	r3, #4
 800388a:	2b06      	cmp	r3, #6
 800388c:	d902      	bls.n	8003894 <NVIC_EncodePriority+0x30>
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	3b03      	subs	r3, #3
 8003892:	e000      	b.n	8003896 <NVIC_EncodePriority+0x32>
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43da      	mvns	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	401a      	ands	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	43d9      	mvns	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038bc:	4313      	orrs	r3, r2
         );
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	@ 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038dc:	d301      	bcc.n	80038e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038de:	2301      	movs	r3, #1
 80038e0:	e00f      	b.n	8003902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e2:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <SysTick_Config+0x40>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ea:	210f      	movs	r1, #15
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038f0:	f7ff ff8e 	bl	8003810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f4:	4b05      	ldr	r3, [pc, #20]	@ (800390c <SysTick_Config+0x40>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fa:	4b04      	ldr	r3, [pc, #16]	@ (800390c <SysTick_Config+0x40>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	e000e010 	.word	0xe000e010

08003910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff ff47 	bl	80037ac <__NVIC_SetPriorityGrouping>
}
 800391e:	bf00      	nop
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003938:	f7ff ff5c 	bl	80037f4 <__NVIC_GetPriorityGrouping>
 800393c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	6978      	ldr	r0, [r7, #20]
 8003944:	f7ff ff8e 	bl	8003864 <NVIC_EncodePriority>
 8003948:	4602      	mov	r2, r0
 800394a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff5d 	bl	8003810 <__NVIC_SetPriority>
}
 8003956:	bf00      	nop
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ffb0 	bl	80038cc <SysTick_Config>
 800396c:	4603      	mov	r3, r0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003986:	e14e      	b.n	8003c26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8140 	beq.w	8003c20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d005      	beq.n	80039b8 <HAL_GPIO_Init+0x40>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d130      	bne.n	8003a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4013      	ands	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039ee:	2201      	movs	r2, #1
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0201 	and.w	r2, r3, #1
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f003 0303 	and.w	r3, r3, #3
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d017      	beq.n	8003a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	2203      	movs	r2, #3
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43db      	mvns	r3, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d123      	bne.n	8003aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	220f      	movs	r2, #15
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	08da      	lsrs	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3208      	adds	r2, #8
 8003aa4:	6939      	ldr	r1, [r7, #16]
 8003aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 0203 	and.w	r2, r3, #3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 809a 	beq.w	8003c20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aec:	4b55      	ldr	r3, [pc, #340]	@ (8003c44 <HAL_GPIO_Init+0x2cc>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	4a54      	ldr	r2, [pc, #336]	@ (8003c44 <HAL_GPIO_Init+0x2cc>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6193      	str	r3, [r2, #24]
 8003af8:	4b52      	ldr	r3, [pc, #328]	@ (8003c44 <HAL_GPIO_Init+0x2cc>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b04:	4a50      	ldr	r2, [pc, #320]	@ (8003c48 <HAL_GPIO_Init+0x2d0>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4013      	ands	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003b2e:	d013      	beq.n	8003b58 <HAL_GPIO_Init+0x1e0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a46      	ldr	r2, [pc, #280]	@ (8003c4c <HAL_GPIO_Init+0x2d4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00d      	beq.n	8003b54 <HAL_GPIO_Init+0x1dc>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a45      	ldr	r2, [pc, #276]	@ (8003c50 <HAL_GPIO_Init+0x2d8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <HAL_GPIO_Init+0x1d8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a44      	ldr	r2, [pc, #272]	@ (8003c54 <HAL_GPIO_Init+0x2dc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_GPIO_Init+0x1d4>
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e006      	b.n	8003b5a <HAL_GPIO_Init+0x1e2>
 8003b4c:	2305      	movs	r3, #5
 8003b4e:	e004      	b.n	8003b5a <HAL_GPIO_Init+0x1e2>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e002      	b.n	8003b5a <HAL_GPIO_Init+0x1e2>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_GPIO_Init+0x1e2>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	f002 0203 	and.w	r2, r2, #3
 8003b60:	0092      	lsls	r2, r2, #2
 8003b62:	4093      	lsls	r3, r2
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b6a:	4937      	ldr	r1, [pc, #220]	@ (8003c48 <HAL_GPIO_Init+0x2d0>)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	3302      	adds	r3, #2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b78:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003bc6:	4a24      	ldr	r2, [pc, #144]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bcc:	4b22      	ldr	r3, [pc, #136]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003bf0:	4a19      	ldr	r2, [pc, #100]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf6:	4b18      	ldr	r3, [pc, #96]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4013      	ands	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c58 <HAL_GPIO_Init+0x2e0>)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f47f aea9 	bne.w	8003988 <HAL_GPIO_Init+0x10>
  }
}
 8003c36:	bf00      	nop
 8003c38:	bf00      	nop
 8003c3a:	371c      	adds	r7, #28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	48000400 	.word	0x48000400
 8003c50:	48000800 	.word	0x48000800
 8003c54:	48000c00 	.word	0x48000c00
 8003c58:	40010400 	.word	0x40010400

08003c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	807b      	strh	r3, [r7, #2]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c6c:	787b      	ldrb	r3, [r7, #1]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c72:	887a      	ldrh	r2, [r7, #2]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c78:	e002      	b.n	8003c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c7a:	887a      	ldrh	r2, [r7, #2]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f000 bff4 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 816d 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cc8:	4bb4      	ldr	r3, [pc, #720]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 030c 	and.w	r3, r3, #12
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d00c      	beq.n	8003cee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cd4:	4bb1      	ldr	r3, [pc, #708]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 030c 	and.w	r3, r3, #12
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d157      	bne.n	8003d90 <HAL_RCC_OscConfig+0x104>
 8003ce0:	4bae      	ldr	r3, [pc, #696]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cec:	d150      	bne.n	8003d90 <HAL_RCC_OscConfig+0x104>
 8003cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cf2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d0e:	d802      	bhi.n	8003d16 <HAL_RCC_OscConfig+0x8a>
 8003d10:	4ba2      	ldr	r3, [pc, #648]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	e015      	b.n	8003d42 <HAL_RCC_OscConfig+0xb6>
 8003d16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d1a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003d22:	fa93 f3a3 	rbit	r3, r3
 8003d26:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003d2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d2e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003d32:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8003d36:	fa93 f3a3 	rbit	r3, r3
 8003d3a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003d3e:	4b97      	ldr	r3, [pc, #604]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d42:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d46:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003d4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003d4e:	fa92 f2a2 	rbit	r2, r2
 8003d52:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003d56:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003d5a:	fab2 f282 	clz	r2, r2
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	f042 0220 	orr.w	r2, r2, #32
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	f002 021f 	and.w	r2, r2, #31
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8114 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x314>
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 810b 	bne.w	8003fa0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f000 bf85 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003da0:	d106      	bne.n	8003db0 <HAL_RCC_OscConfig+0x124>
 8003da2:	4b7e      	ldr	r3, [pc, #504]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7d      	ldr	r2, [pc, #500]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e036      	b.n	8003e1e <HAL_RCC_OscConfig+0x192>
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10c      	bne.n	8003dda <HAL_RCC_OscConfig+0x14e>
 8003dc0:	4b76      	ldr	r3, [pc, #472]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a75      	ldr	r2, [pc, #468]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b73      	ldr	r3, [pc, #460]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a72      	ldr	r2, [pc, #456]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	e021      	b.n	8003e1e <HAL_RCC_OscConfig+0x192>
 8003dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x17a>
 8003dec:	4b6b      	ldr	r3, [pc, #428]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b68      	ldr	r3, [pc, #416]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a67      	ldr	r2, [pc, #412]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	e00b      	b.n	8003e1e <HAL_RCC_OscConfig+0x192>
 8003e06:	4b65      	ldr	r3, [pc, #404]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a64      	ldr	r2, [pc, #400]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b62      	ldr	r3, [pc, #392]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a61      	ldr	r2, [pc, #388]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e1c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e1e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	f023 020f 	bic.w	r2, r3, #15
 8003e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	495a      	ldr	r1, [pc, #360]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d054      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7ff fc80 	bl	800374c <HAL_GetTick>
 8003e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e52:	f7ff fc7b 	bl	800374c <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b64      	cmp	r3, #100	@ 0x64
 8003e60:	d902      	bls.n	8003e68 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	f000 bf19 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
 8003e68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e6c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e70:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003e74:	fa93 f3a3 	rbit	r3, r3
 8003e78:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003e7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e80:	fab3 f383 	clz	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e88:	d802      	bhi.n	8003e90 <HAL_RCC_OscConfig+0x204>
 8003e8a:	4b44      	ldr	r3, [pc, #272]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	e015      	b.n	8003ebc <HAL_RCC_OscConfig+0x230>
 8003e90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e94:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003ea4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ea8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003eac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003eb8:	4b38      	ldr	r3, [pc, #224]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003ec0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003ec4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003ec8:	fa92 f2a2 	rbit	r2, r2
 8003ecc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003ed0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ed4:	fab2 f282 	clz	r2, r2
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	f042 0220 	orr.w	r2, r2, #32
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	f002 021f 	and.w	r2, r2, #31
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0b0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1c6>
 8003ef0:	e057      	b.n	8003fa2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7ff fc2b 	bl	800374c <HAL_GetTick>
 8003ef6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efc:	f7ff fc26 	bl	800374c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b64      	cmp	r3, #100	@ 0x64
 8003f0a:	d902      	bls.n	8003f12 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	f000 bec4 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
 8003f12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f16:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003f26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	fab3 f383 	clz	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f32:	d802      	bhi.n	8003f3a <HAL_RCC_OscConfig+0x2ae>
 8003f34:	4b19      	ldr	r3, [pc, #100]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	e015      	b.n	8003f66 <HAL_RCC_OscConfig+0x2da>
 8003f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f3e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003f52:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f56:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f62:	4b0e      	ldr	r3, [pc, #56]	@ (8003f9c <HAL_RCC_OscConfig+0x310>)
 8003f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f66:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f6a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003f6e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003f72:	fa92 f2a2 	rbit	r2, r2
 8003f76:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003f7a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003f7e:	fab2 f282 	clz	r2, r2
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f042 0220 	orr.w	r2, r2, #32
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	f002 021f 	and.w	r2, r2, #31
 8003f8e:	2101      	movs	r1, #1
 8003f90:	fa01 f202 	lsl.w	r2, r1, r2
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1b0      	bne.n	8003efc <HAL_RCC_OscConfig+0x270>
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCC_OscConfig+0x316>
 8003f9c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 816c 	beq.w	8004290 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003fb8:	4bcc      	ldr	r3, [pc, #816]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 030c 	and.w	r3, r3, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003fc4:	4bc9      	ldr	r3, [pc, #804]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d16d      	bne.n	80040ac <HAL_RCC_OscConfig+0x420>
 8003fd0:	4bc6      	ldr	r3, [pc, #792]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d167      	bne.n	80040ac <HAL_RCC_OscConfig+0x420>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003fee:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ffa:	d802      	bhi.n	8004002 <HAL_RCC_OscConfig+0x376>
 8003ffc:	4bbb      	ldr	r3, [pc, #748]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	e013      	b.n	800402a <HAL_RCC_OscConfig+0x39e>
 8004002:	2302      	movs	r3, #2
 8004004:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004014:	2302      	movs	r3, #2
 8004016:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800401a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004026:	4bb1      	ldr	r3, [pc, #708]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	2202      	movs	r2, #2
 800402c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004030:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004034:	fa92 f2a2 	rbit	r2, r2
 8004038:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800403c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004040:	fab2 f282 	clz	r2, r2
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	f042 0220 	orr.w	r2, r2, #32
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	f002 021f 	and.w	r2, r2, #31
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f202 	lsl.w	r2, r1, r2
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00a      	beq.n	8004072 <HAL_RCC_OscConfig+0x3e6>
 800405c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004060:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d002      	beq.n	8004072 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f000 be14 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004072:	4b9e      	ldr	r3, [pc, #632]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800407a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800407e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	21f8      	movs	r1, #248	@ 0xf8
 8004088:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004090:	fa91 f1a1 	rbit	r1, r1
 8004094:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004098:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800409c:	fab1 f181 	clz	r1, r1
 80040a0:	b2c9      	uxtb	r1, r1
 80040a2:	408b      	lsls	r3, r1
 80040a4:	4991      	ldr	r1, [pc, #580]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	e0f1      	b.n	8004290 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8083 	beq.w	80041c4 <HAL_RCC_OscConfig+0x538>
 80040be:	2301      	movs	r3, #1
 80040c0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80040c8:	fa93 f3a3 	rbit	r3, r3
 80040cc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80040d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80040de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	461a      	mov	r2, r3
 80040e6:	2301      	movs	r3, #1
 80040e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7ff fb2f 	bl	800374c <HAL_GetTick>
 80040ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f4:	f7ff fb2a 	bl	800374c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d902      	bls.n	800410a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	f000 bdc8 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
 800410a:	2302      	movs	r3, #2
 800410c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800411c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004120:	fab3 f383 	clz	r3, r3
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b3f      	cmp	r3, #63	@ 0x3f
 8004128:	d802      	bhi.n	8004130 <HAL_RCC_OscConfig+0x4a4>
 800412a:	4b70      	ldr	r3, [pc, #448]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	e013      	b.n	8004158 <HAL_RCC_OscConfig+0x4cc>
 8004130:	2302      	movs	r3, #2
 8004132:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004142:	2302      	movs	r3, #2
 8004144:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004148:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004154:	4b65      	ldr	r3, [pc, #404]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8004156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004158:	2202      	movs	r2, #2
 800415a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800415e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004162:	fa92 f2a2 	rbit	r2, r2
 8004166:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800416a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800416e:	fab2 f282 	clz	r2, r2
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	f042 0220 	orr.w	r2, r2, #32
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	f002 021f 	and.w	r2, r2, #31
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0b4      	beq.n	80040f4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418a:	4b58      	ldr	r3, [pc, #352]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004196:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	21f8      	movs	r1, #248	@ 0xf8
 80041a0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80041a8:	fa91 f1a1 	rbit	r1, r1
 80041ac:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80041b0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80041b4:	fab1 f181 	clz	r1, r1
 80041b8:	b2c9      	uxtb	r1, r1
 80041ba:	408b      	lsls	r3, r1
 80041bc:	494b      	ldr	r1, [pc, #300]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
 80041c2:	e065      	b.n	8004290 <HAL_RCC_OscConfig+0x604>
 80041c4:	2301      	movs	r3, #1
 80041c6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80041d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041da:	fab3 f383 	clz	r3, r3
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80041e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	2300      	movs	r3, #0
 80041ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7ff faac 	bl	800374c <HAL_GetTick>
 80041f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f8:	e00a      	b.n	8004210 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fa:	f7ff faa7 	bl	800374c <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d902      	bls.n	8004210 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	f000 bd45 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004210:	2302      	movs	r3, #2
 8004212:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800421a:	fa93 f3a3 	rbit	r3, r3
 800421e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004222:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b3f      	cmp	r3, #63	@ 0x3f
 800422e:	d802      	bhi.n	8004236 <HAL_RCC_OscConfig+0x5aa>
 8004230:	4b2e      	ldr	r3, [pc, #184]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	e013      	b.n	800425e <HAL_RCC_OscConfig+0x5d2>
 8004236:	2302      	movs	r3, #2
 8004238:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004248:	2302      	movs	r3, #2
 800424a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800424e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800425a:	4b24      	ldr	r3, [pc, #144]	@ (80042ec <HAL_RCC_OscConfig+0x660>)
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	2202      	movs	r2, #2
 8004260:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004264:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004268:	fa92 f2a2 	rbit	r2, r2
 800426c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004270:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004274:	fab2 f282 	clz	r2, r2
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	f042 0220 	orr.w	r2, r2, #32
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f002 021f 	and.w	r2, r2, #31
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f202 	lsl.w	r2, r1, r2
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1b4      	bne.n	80041fa <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004294:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 8115 	beq.w	80044d0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042aa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d07e      	beq.n	80043b4 <HAL_RCC_OscConfig+0x728>
 80042b6:	2301      	movs	r3, #1
 80042b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80042c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <HAL_RCC_OscConfig+0x664>)
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	461a      	mov	r2, r3
 80042dc:	2301      	movs	r3, #1
 80042de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e0:	f7ff fa34 	bl	800374c <HAL_GetTick>
 80042e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e8:	e00f      	b.n	800430a <HAL_RCC_OscConfig+0x67e>
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042f4:	f7ff fa2a 	bl	800374c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d902      	bls.n	800430a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	f000 bcc8 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
 800430a:	2302      	movs	r3, #2
 800430c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800431c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004320:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004324:	2202      	movs	r2, #2
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800432c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	fa93 f2a3 	rbit	r2, r3
 8004336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800433a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004348:	2202      	movs	r2, #2
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	fa93 f2a3 	rbit	r2, r3
 800435a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004362:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004364:	4bb0      	ldr	r3, [pc, #704]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 8004366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004368:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800436c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004370:	2102      	movs	r1, #2
 8004372:	6019      	str	r1, [r3, #0]
 8004374:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004378:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	fa93 f1a3 	rbit	r1, r3
 8004382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004386:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800438a:	6019      	str	r1, [r3, #0]
  return result;
 800438c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004390:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	f003 031f 	and.w	r3, r3, #31
 80043a6:	2101      	movs	r1, #1
 80043a8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0a0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x668>
 80043b2:	e08d      	b.n	80044d0 <HAL_RCC_OscConfig+0x844>
 80043b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043b8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043bc:	2201      	movs	r2, #1
 80043be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	fa93 f2a3 	rbit	r2, r3
 80043ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043d6:	601a      	str	r2, [r3, #0]
  return result;
 80043d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043dc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80043e0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e2:	fab3 f383 	clz	r3, r3
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b90      	ldr	r3, [pc, #576]	@ (800462c <HAL_RCC_OscConfig+0x9a0>)
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	461a      	mov	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f6:	f7ff f9a9 	bl	800374c <HAL_GetTick>
 80043fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043fe:	e00a      	b.n	8004416 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004400:	f7ff f9a4 	bl	800374c <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d902      	bls.n	8004416 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	f000 bc42 	b.w	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800441e:	2202      	movs	r2, #2
 8004420:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004426:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	fa93 f2a3 	rbit	r2, r3
 8004430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004434:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800443e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004442:	2202      	movs	r2, #2
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800444a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	fa93 f2a3 	rbit	r2, r3
 8004454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004458:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004462:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004466:	2202      	movs	r2, #2
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	fa93 f2a3 	rbit	r2, r3
 8004478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800447c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004480:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004482:	4b69      	ldr	r3, [pc, #420]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 8004484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800448a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800448e:	2102      	movs	r1, #2
 8004490:	6019      	str	r1, [r3, #0]
 8004492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004496:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fa93 f1a3 	rbit	r1, r3
 80044a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80044a8:	6019      	str	r1, [r3, #0]
  return result;
 80044aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	fab3 f383 	clz	r3, r3
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	2101      	movs	r1, #1
 80044c6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d197      	bne.n	8004400 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 819e 	beq.w	8004822 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d116      	bne.n	8004526 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004502:	61d3      	str	r3, [r2, #28]
 8004504:	4b48      	ldr	r3, [pc, #288]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800450c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004510:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800451a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800451e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004520:	2301      	movs	r3, #1
 8004522:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004526:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <HAL_RCC_OscConfig+0x9a4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11a      	bne.n	8004568 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004532:	4b3f      	ldr	r3, [pc, #252]	@ (8004630 <HAL_RCC_OscConfig+0x9a4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3e      	ldr	r2, [pc, #248]	@ (8004630 <HAL_RCC_OscConfig+0x9a4>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453e:	f7ff f905 	bl	800374c <HAL_GetTick>
 8004542:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	e009      	b.n	800455c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7ff f900 	bl	800374c <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b64      	cmp	r3, #100	@ 0x64
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e39e      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455c:	4b34      	ldr	r3, [pc, #208]	@ (8004630 <HAL_RCC_OscConfig+0x9a4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ef      	beq.n	8004548 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800456c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HAL_RCC_OscConfig+0x8fa>
 8004578:	4b2b      	ldr	r3, [pc, #172]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	4a2a      	ldr	r2, [pc, #168]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	6213      	str	r3, [r2, #32]
 8004584:	e035      	b.n	80045f2 <HAL_RCC_OscConfig+0x966>
 8004586:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800458a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10c      	bne.n	80045b0 <HAL_RCC_OscConfig+0x924>
 8004596:	4b24      	ldr	r3, [pc, #144]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	4a23      	ldr	r2, [pc, #140]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	6213      	str	r3, [r2, #32]
 80045a2:	4b21      	ldr	r3, [pc, #132]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4a20      	ldr	r2, [pc, #128]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	6213      	str	r3, [r2, #32]
 80045ae:	e020      	b.n	80045f2 <HAL_RCC_OscConfig+0x966>
 80045b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d10c      	bne.n	80045da <HAL_RCC_OscConfig+0x94e>
 80045c0:	4b19      	ldr	r3, [pc, #100]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a18      	ldr	r2, [pc, #96]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	4b16      	ldr	r3, [pc, #88]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4a15      	ldr	r2, [pc, #84]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6213      	str	r3, [r2, #32]
 80045d8:	e00b      	b.n	80045f2 <HAL_RCC_OscConfig+0x966>
 80045da:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a12      	ldr	r2, [pc, #72]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004628 <HAL_RCC_OscConfig+0x99c>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8087 	beq.w	8004712 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004604:	f7ff f8a2 	bl	800374c <HAL_GetTick>
 8004608:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460c:	e012      	b.n	8004634 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7ff f89d 	bl	800374c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461e:	4293      	cmp	r3, r2
 8004620:	d908      	bls.n	8004634 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e339      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004626:	bf00      	nop
 8004628:	40021000 	.word	0x40021000
 800462c:	10908120 	.word	0x10908120
 8004630:	40007000 	.word	0x40007000
 8004634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004638:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800463c:	2202      	movs	r2, #2
 800463e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004644:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	fa93 f2a3 	rbit	r2, r3
 800464e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004652:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800465c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004660:	2202      	movs	r2, #2
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004668:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	fa93 f2a3 	rbit	r2, r3
 8004672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004676:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800467a:	601a      	str	r2, [r3, #0]
  return result;
 800467c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004680:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004684:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <HAL_RCC_OscConfig+0xa10>
 8004696:	4b98      	ldr	r3, [pc, #608]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	e013      	b.n	80046c4 <HAL_RCC_OscConfig+0xa38>
 800469c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80046a4:	2202      	movs	r2, #2
 80046a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ac:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	fa93 f2a3 	rbit	r2, r3
 80046b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	4b8d      	ldr	r3, [pc, #564]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046cc:	2102      	movs	r1, #2
 80046ce:	6011      	str	r1, [r2, #0]
 80046d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046d4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80046d8:	6812      	ldr	r2, [r2, #0]
 80046da:	fa92 f1a2 	rbit	r1, r2
 80046de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046e2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046e6:	6011      	str	r1, [r2, #0]
  return result;
 80046e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80046ec:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	fab2 f282 	clz	r2, r2
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	f002 021f 	and.w	r2, r2, #31
 8004702:	2101      	movs	r1, #1
 8004704:	fa01 f202 	lsl.w	r2, r1, r2
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	f43f af7f 	beq.w	800460e <HAL_RCC_OscConfig+0x982>
 8004710:	e07d      	b.n	800480e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004712:	f7ff f81b 	bl	800374c <HAL_GetTick>
 8004716:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471a:	e00b      	b.n	8004734 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471c:	f7ff f816 	bl	800374c <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e2b2      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004734:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004738:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800473c:	2202      	movs	r2, #2
 800473e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004744:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	fa93 f2a3 	rbit	r2, r3
 800474e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004752:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800475c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004760:	2202      	movs	r2, #2
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004768:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	fa93 f2a3 	rbit	r2, r3
 8004772:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004776:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800477a:	601a      	str	r2, [r3, #0]
  return result;
 800477c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004780:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004784:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004786:	fab3 f383 	clz	r3, r3
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <HAL_RCC_OscConfig+0xb10>
 8004796:	4b58      	ldr	r3, [pc, #352]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	e013      	b.n	80047c4 <HAL_RCC_OscConfig+0xb38>
 800479c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80047a4:	2202      	movs	r2, #2
 80047a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ac:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	fa93 f2a3 	rbit	r2, r3
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	4b4d      	ldr	r3, [pc, #308]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047c8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047cc:	2102      	movs	r1, #2
 80047ce:	6011      	str	r1, [r2, #0]
 80047d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047d4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	fa92 f1a2 	rbit	r1, r2
 80047de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047e6:	6011      	str	r1, [r2, #0]
  return result;
 80047e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047ec:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	fab2 f282 	clz	r2, r2
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	f002 021f 	and.w	r2, r2, #31
 8004802:	2101      	movs	r1, #1
 8004804:	fa01 f202 	lsl.w	r2, r1, r2
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d186      	bne.n	800471c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800480e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004816:	4b38      	ldr	r3, [pc, #224]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4a37      	ldr	r2, [pc, #220]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 800481c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004820:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004826:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8232 	beq.w	8004c98 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004834:	4b30      	ldr	r3, [pc, #192]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	f000 8201 	beq.w	8004c44 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b02      	cmp	r3, #2
 8004850:	f040 8157 	bne.w	8004b02 <HAL_RCC_OscConfig+0xe76>
 8004854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004858:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800485c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004862:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004866:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	fa93 f2a3 	rbit	r2, r3
 8004870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004874:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004878:	601a      	str	r2, [r3, #0]
  return result;
 800487a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800487e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004882:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004884:	fab3 f383 	clz	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800488e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	461a      	mov	r2, r3
 8004896:	2300      	movs	r3, #0
 8004898:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489a:	f7fe ff57 	bl	800374c <HAL_GetTick>
 800489e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a2:	e009      	b.n	80048b8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fe ff52 	bl	800374c <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1f0      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
 80048b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048bc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80048c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ca:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	fa93 f2a3 	rbit	r2, r3
 80048d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048dc:	601a      	str	r2, [r3, #0]
  return result;
 80048de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80048f0:	d804      	bhi.n	80048fc <HAL_RCC_OscConfig+0xc70>
 80048f2:	4b01      	ldr	r3, [pc, #4]	@ (80048f8 <HAL_RCC_OscConfig+0xc6c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	e029      	b.n	800494c <HAL_RCC_OscConfig+0xcc0>
 80048f8:	40021000 	.word	0x40021000
 80048fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004900:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	fa93 f2a3 	rbit	r2, r3
 8004918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800491c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004926:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800492a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004934:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	fa93 f2a3 	rbit	r2, r3
 800493e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004942:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	4bc3      	ldr	r3, [pc, #780]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 800494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004950:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004954:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004958:	6011      	str	r1, [r2, #0]
 800495a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800495e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	fa92 f1a2 	rbit	r1, r2
 8004968:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800496c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004970:	6011      	str	r1, [r2, #0]
  return result;
 8004972:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004976:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800497a:	6812      	ldr	r2, [r2, #0]
 800497c:	fab2 f282 	clz	r2, r2
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	f042 0220 	orr.w	r2, r2, #32
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	f002 021f 	and.w	r2, r2, #31
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f202 	lsl.w	r2, r1, r2
 8004992:	4013      	ands	r3, r2
 8004994:	2b00      	cmp	r3, #0
 8004996:	d185      	bne.n	80048a4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4baf      	ldr	r3, [pc, #700]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80049ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	430b      	orrs	r3, r1
 80049ba:	49a7      	ldr	r1, [pc, #668]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	604b      	str	r3, [r1, #4]
 80049c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	fa93 f2a3 	rbit	r2, r3
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049e4:	601a      	str	r2, [r3, #0]
  return result;
 80049e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80049ee:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f0:	fab3 f383 	clz	r3, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80049fa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	461a      	mov	r2, r3
 8004a02:	2301      	movs	r3, #1
 8004a04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a06:	f7fe fea1 	bl	800374c <HAL_GetTick>
 8004a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a0e:	e009      	b.n	8004a24 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a10:	f7fe fe9c 	bl	800374c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e13a      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004a24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a28:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	fa93 f2a3 	rbit	r2, r3
 8004a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a44:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a48:	601a      	str	r2, [r3, #0]
  return result;
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004a52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a54:	fab3 f383 	clz	r3, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a5c:	d802      	bhi.n	8004a64 <HAL_RCC_OscConfig+0xdd8>
 8004a5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	e027      	b.n	8004ab4 <HAL_RCC_OscConfig+0xe28>
 8004a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a68:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a6c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a76:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	fa93 f2a3 	rbit	r2, r3
 8004a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a84:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004a88:	601a      	str	r2, [r3, #0]
 8004a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004a92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	fa93 f2a3 	rbit	r2, r3
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	4b69      	ldr	r3, [pc, #420]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ab8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004abc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004ac0:	6011      	str	r1, [r2, #0]
 8004ac2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ac6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	fa92 f1a2 	rbit	r1, r2
 8004ad0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ad4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ad8:	6011      	str	r1, [r2, #0]
  return result;
 8004ada:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ade:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	fab2 f282 	clz	r2, r2
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f042 0220 	orr.w	r2, r2, #32
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	f002 021f 	and.w	r2, r2, #31
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f202 	lsl.w	r2, r1, r2
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d087      	beq.n	8004a10 <HAL_RCC_OscConfig+0xd84>
 8004b00:	e0ca      	b.n	8004c98 <HAL_RCC_OscConfig+0x100c>
 8004b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b06:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b14:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	fa93 f2a3 	rbit	r2, r3
 8004b1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b22:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b26:	601a      	str	r2, [r3, #0]
  return result;
 8004b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004b30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004b3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	461a      	mov	r2, r3
 8004b44:	2300      	movs	r3, #0
 8004b46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fe fe00 	bl	800374c <HAL_GetTick>
 8004b4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b52:	f7fe fdfb 	bl	800374c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e099      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004b66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b6a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b78:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	fa93 f2a3 	rbit	r2, r3
 8004b82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b86:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b8a:	601a      	str	r2, [r3, #0]
  return result;
 8004b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b90:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b96:	fab3 f383 	clz	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004b9e:	d802      	bhi.n	8004ba6 <HAL_RCC_OscConfig+0xf1a>
 8004ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	e027      	b.n	8004bf6 <HAL_RCC_OscConfig+0xf6a>
 8004ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004baa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	fa93 f2a3 	rbit	r2, r3
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004bd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	fa93 f2a3 	rbit	r2, r3
 8004be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bec:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	4b19      	ldr	r3, [pc, #100]	@ (8004c58 <HAL_RCC_OscConfig+0xfcc>)
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004bfa:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004bfe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004c02:	6011      	str	r1, [r2, #0]
 8004c04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c08:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	fa92 f1a2 	rbit	r1, r2
 8004c12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c16:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c1a:	6011      	str	r1, [r2, #0]
  return result;
 8004c1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c20:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004c24:	6812      	ldr	r2, [r2, #0]
 8004c26:	fab2 f282 	clz	r2, r2
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	f042 0220 	orr.w	r2, r2, #32
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	f002 021f 	and.w	r2, r2, #31
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d187      	bne.n	8004b52 <HAL_RCC_OscConfig+0xec6>
 8004c42:	e029      	b.n	8004c98 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69db      	ldr	r3, [r3, #28]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d103      	bne.n	8004c5c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e020      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
 8004c58:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <HAL_RCC_OscConfig+0x1018>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c80:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d001      	beq.n	8004c98 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e000      	b.n	8004c9a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000

08004ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b09e      	sub	sp, #120	@ 0x78
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d101      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e154      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b89      	ldr	r3, [pc, #548]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d910      	bls.n	8004cf0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b86      	ldr	r3, [pc, #536]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f023 0207 	bic.w	r2, r3, #7
 8004cd6:	4984      	ldr	r1, [pc, #528]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cde:	4b82      	ldr	r3, [pc, #520]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e13c      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d008      	beq.n	8004d0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cfc:	4b7b      	ldr	r3, [pc, #492]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4978      	ldr	r1, [pc, #480]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 80cd 	beq.w	8004eb6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d137      	bne.n	8004d94 <HAL_RCC_ClockConfig+0xec>
 8004d24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d3c:	d802      	bhi.n	8004d44 <HAL_RCC_ClockConfig+0x9c>
 8004d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	e00f      	b.n	8004d64 <HAL_RCC_ClockConfig+0xbc>
 8004d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d4c:	fa93 f3a3 	rbit	r3, r3
 8004d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d52:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004d56:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d5a:	fa93 f3a3 	rbit	r3, r3
 8004d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d60:	4b62      	ldr	r3, [pc, #392]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004d68:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d6c:	fa92 f2a2 	rbit	r2, r2
 8004d70:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004d72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d74:	fab2 f282 	clz	r2, r2
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	f042 0220 	orr.w	r2, r2, #32
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f002 021f 	and.w	r2, r2, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d171      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0ea      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d137      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x164>
 8004d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004da0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004da4:	fa93 f3a3 	rbit	r3, r3
 8004da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dac:	fab3 f383 	clz	r3, r3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b3f      	cmp	r3, #63	@ 0x3f
 8004db4:	d802      	bhi.n	8004dbc <HAL_RCC_ClockConfig+0x114>
 8004db6:	4b4d      	ldr	r3, [pc, #308]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	e00f      	b.n	8004ddc <HAL_RCC_ClockConfig+0x134>
 8004dbc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dc4:	fa93 f3a3 	rbit	r3, r3
 8004dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dd2:	fa93 f3a3 	rbit	r3, r3
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd8:	4b44      	ldr	r3, [pc, #272]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004de0:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004de2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004de4:	fa92 f2a2 	rbit	r2, r2
 8004de8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004dea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004dec:	fab2 f282 	clz	r2, r2
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	f042 0220 	orr.w	r2, r2, #32
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	f002 021f 	and.w	r2, r2, #31
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d135      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0ae      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b3f      	cmp	r3, #63	@ 0x3f
 8004e22:	d802      	bhi.n	8004e2a <HAL_RCC_ClockConfig+0x182>
 8004e24:	4b31      	ldr	r3, [pc, #196]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	e00d      	b.n	8004e46 <HAL_RCC_ClockConfig+0x19e>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e30:	fa93 f3a3 	rbit	r3, r3
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	2302      	movs	r3, #2
 8004e38:	623b      	str	r3, [r7, #32]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	4b2a      	ldr	r3, [pc, #168]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	2202      	movs	r2, #2
 8004e48:	61ba      	str	r2, [r7, #24]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	fa92 f2a2 	rbit	r2, r2
 8004e50:	617a      	str	r2, [r7, #20]
  return result;
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	fab2 f282 	clz	r2, r2
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	f042 0220 	orr.w	r2, r2, #32
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	f002 021f 	and.w	r2, r2, #31
 8004e64:	2101      	movs	r1, #1
 8004e66:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e07a      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e74:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f023 0203 	bic.w	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	491a      	ldr	r1, [pc, #104]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e86:	f7fe fc61 	bl	800374c <HAL_GetTick>
 8004e8a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8c:	e00a      	b.n	8004ea4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8e:	f7fe fc5d 	bl	800374c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d901      	bls.n	8004ea4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e062      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea4:	4b11      	ldr	r3, [pc, #68]	@ (8004eec <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 020c 	and.w	r2, r3, #12
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d1eb      	bne.n	8004e8e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0307 	and.w	r3, r3, #7
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d215      	bcs.n	8004ef0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f023 0207 	bic.w	r2, r3, #7
 8004ecc:	4906      	ldr	r1, [pc, #24]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed4:	4b04      	ldr	r3, [pc, #16]	@ (8004ee8 <HAL_RCC_ClockConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d006      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e041      	b.n	8004f6a <HAL_RCC_ClockConfig+0x2c2>
 8004ee6:	bf00      	nop
 8004ee8:	40022000 	.word	0x40022000
 8004eec:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <HAL_RCC_ClockConfig+0x2cc>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	491a      	ldr	r1, [pc, #104]	@ (8004f74 <HAL_RCC_ClockConfig+0x2cc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d009      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f1a:	4b16      	ldr	r3, [pc, #88]	@ (8004f74 <HAL_RCC_ClockConfig+0x2cc>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4912      	ldr	r1, [pc, #72]	@ (8004f74 <HAL_RCC_ClockConfig+0x2cc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f2e:	f000 f829 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f32:	4601      	mov	r1, r0
 8004f34:	4b0f      	ldr	r3, [pc, #60]	@ (8004f74 <HAL_RCC_ClockConfig+0x2cc>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f3c:	22f0      	movs	r2, #240	@ 0xf0
 8004f3e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	fa92 f2a2 	rbit	r2, r2
 8004f46:	60fa      	str	r2, [r7, #12]
  return result;
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	fab2 f282 	clz	r2, r2
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	40d3      	lsrs	r3, r2
 8004f52:	4a09      	ldr	r2, [pc, #36]	@ (8004f78 <HAL_RCC_ClockConfig+0x2d0>)
 8004f54:	5cd3      	ldrb	r3, [r2, r3]
 8004f56:	fa21 f303 	lsr.w	r3, r1, r3
 8004f5a:	4a08      	ldr	r2, [pc, #32]	@ (8004f7c <HAL_RCC_ClockConfig+0x2d4>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f5e:	4b08      	ldr	r3, [pc, #32]	@ (8004f80 <HAL_RCC_ClockConfig+0x2d8>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fbae 	bl	80036c4 <HAL_InitTick>
  
  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3778      	adds	r7, #120	@ 0x78
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40021000 	.word	0x40021000
 8004f78:	08006d74 	.word	0x08006d74
 8004f7c:	200000d8 	.word	0x200000d8
 8004f80:	20000160 	.word	0x20000160

08004f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	2300      	movs	r3, #0
 8004f98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d002      	beq.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x30>
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_GetSysClockFreq+0x36>
 8004fb2:	e026      	b.n	8005002 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fb6:	613b      	str	r3, [r7, #16]
      break;
 8004fb8:	e026      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0c9b      	lsrs	r3, r3, #18
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	4a17      	ldr	r2, [pc, #92]	@ (8005020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004fc4:	5cd3      	ldrb	r3, [r2, r3]
 8004fc6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004fc8:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <HAL_RCC_GetSysClockFreq+0x94>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	4a14      	ldr	r2, [pc, #80]	@ (8005024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004fd2:	5cd3      	ldrb	r3, [r2, r3]
 8004fd4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004fe0:	4a0e      	ldr	r2, [pc, #56]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	fb02 f303 	mul.w	r3, r2, r3
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e004      	b.n	8004ffc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8005028 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	613b      	str	r3, [r7, #16]
      break;
 8005000:	e002      	b.n	8005008 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005002:	4b06      	ldr	r3, [pc, #24]	@ (800501c <HAL_RCC_GetSysClockFreq+0x98>)
 8005004:	613b      	str	r3, [r7, #16]
      break;
 8005006:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005008:	693b      	ldr	r3, [r7, #16]
}
 800500a:	4618      	mov	r0, r3
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000
 800501c:	007a1200 	.word	0x007a1200
 8005020:	08006e60 	.word	0x08006e60
 8005024:	08006e70 	.word	0x08006e70
 8005028:	003d0900 	.word	0x003d0900

0800502c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800502c:	b480      	push	{r7}
 800502e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005030:	4b03      	ldr	r3, [pc, #12]	@ (8005040 <HAL_RCC_GetHCLKFreq+0x14>)
 8005032:	681b      	ldr	r3, [r3, #0]
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	200000d8 	.word	0x200000d8

08005044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800504a:	f7ff ffef 	bl	800502c <HAL_RCC_GetHCLKFreq>
 800504e:	4601      	mov	r1, r0
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005058:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800505c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	fa92 f2a2 	rbit	r2, r2
 8005064:	603a      	str	r2, [r7, #0]
  return result;
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	fab2 f282 	clz	r2, r2
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	40d3      	lsrs	r3, r2
 8005070:	4a04      	ldr	r2, [pc, #16]	@ (8005084 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005072:	5cd3      	ldrb	r3, [r2, r3]
 8005074:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	08006d84 	.word	0x08006d84

08005088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800508e:	f7ff ffcd 	bl	800502c <HAL_RCC_GetHCLKFreq>
 8005092:	4601      	mov	r1, r0
 8005094:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800509c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80050a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	fa92 f2a2 	rbit	r2, r2
 80050a8:	603a      	str	r2, [r7, #0]
  return result;
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	fab2 f282 	clz	r2, r2
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	40d3      	lsrs	r3, r2
 80050b4:	4a04      	ldr	r2, [pc, #16]	@ (80050c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050b6:	5cd3      	ldrb	r3, [r2, r3]
 80050b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000
 80050c8:	08006d84 	.word	0x08006d84

080050cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b092      	sub	sp, #72	@ 0x48
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050dc:	2300      	movs	r3, #0
 80050de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80cb 	beq.w	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f0:	4b85      	ldr	r3, [pc, #532]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10e      	bne.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fc:	4b82      	ldr	r3, [pc, #520]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	4a81      	ldr	r2, [pc, #516]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005106:	61d3      	str	r3, [r2, #28]
 8005108:	4b7f      	ldr	r3, [pc, #508]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005110:	60bb      	str	r3, [r7, #8]
 8005112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b7c      	ldr	r3, [pc, #496]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005126:	4b79      	ldr	r3, [pc, #484]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a78      	ldr	r2, [pc, #480]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005130:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fe fb0b 	bl	800374c <HAL_GetTick>
 8005136:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fe fb07 	bl	800374c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	@ 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e0d9      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b6f      	ldr	r3, [pc, #444]	@ (800530c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005158:	4b6b      	ldr	r3, [pc, #428]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005160:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d07b      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005170:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005172:	429a      	cmp	r2, r3
 8005174:	d074      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005176:	4b64      	ldr	r3, [pc, #400]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005184:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005188:	fa93 f3a3 	rbit	r3, r3
 800518c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800518e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005190:	fab3 f383 	clz	r3, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	461a      	mov	r2, r3
 8005198:	4b5d      	ldr	r3, [pc, #372]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	461a      	mov	r2, r3
 80051a0:	2301      	movs	r3, #1
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051b4:	fab3 f383 	clz	r3, r3
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b54      	ldr	r3, [pc, #336]	@ (8005310 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80051be:	4413      	add	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	461a      	mov	r2, r3
 80051c4:	2300      	movs	r3, #0
 80051c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80051ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d043      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fe fab8 	bl	800374c <HAL_GetTick>
 80051dc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051de:	e00a      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fe fab4 	bl	800374c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e084      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80051f6:	2302      	movs	r3, #2
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fc:	fa93 f3a3 	rbit	r3, r3
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
 8005202:	2302      	movs	r3, #2
 8005204:	623b      	str	r3, [r7, #32]
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	fa93 f3a3 	rbit	r3, r3
 800520c:	61fb      	str	r3, [r7, #28]
  return result;
 800520e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	fab3 f383 	clz	r3, r3
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005220:	4b39      	ldr	r3, [pc, #228]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	e007      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8005226:	2302      	movs	r3, #2
 8005228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	fa93 f3a3 	rbit	r3, r3
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	4b35      	ldr	r3, [pc, #212]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	2202      	movs	r2, #2
 8005238:	613a      	str	r2, [r7, #16]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	fa92 f2a2 	rbit	r2, r2
 8005240:	60fa      	str	r2, [r7, #12]
  return result;
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	fab2 f282 	clz	r2, r2
 8005248:	b2d2      	uxtb	r2, r2
 800524a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	f002 021f 	and.w	r2, r2, #31
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f202 	lsl.w	r2, r1, r2
 800525a:	4013      	ands	r3, r2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0bf      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005260:	4b29      	ldr	r3, [pc, #164]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4926      	ldr	r1, [pc, #152]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800526e:	4313      	orrs	r3, r2
 8005270:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005272:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005276:	2b01      	cmp	r3, #1
 8005278:	d105      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800527a:	4b23      	ldr	r3, [pc, #140]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	4a22      	ldr	r2, [pc, #136]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005284:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005292:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	f023 0203 	bic.w	r2, r3, #3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	491a      	ldr	r1, [pc, #104]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052b0:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b4:	f023 0210 	bic.w	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4912      	ldr	r1, [pc, #72]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d008      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80052ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	490b      	ldr	r1, [pc, #44]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80052ec:	4b06      	ldr	r3, [pc, #24]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	4903      	ldr	r1, [pc, #12]	@ (8005308 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3748      	adds	r7, #72	@ 0x48
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40021000 	.word	0x40021000
 800530c:	40007000 	.word	0x40007000
 8005310:	10908100 	.word	0x10908100

08005314 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e049      	b.n	80053ba <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f841 	bl	80053c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 fc44 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e049      	b.n	800547c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fd f84d 	bl	800249c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f000 fbe3 	bl	8005be0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d109      	bne.n	80054a8 <HAL_TIM_PWM_Start+0x24>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	bf14      	ite	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	2300      	moveq	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e03c      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d109      	bne.n	80054c2 <HAL_TIM_PWM_Start+0x3e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e02f      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start+0x58>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x72>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x8c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x9e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e088      	b.n	800563c <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xb6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	e023      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xc6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005548:	e01b      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xd6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005558:	e013      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b0c      	cmp	r3, #12
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0xe6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005568:	e00b      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b10      	cmp	r3, #16
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xf6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005578:	e003      	b.n	8005582 <HAL_TIM_PWM_Start+0xfe>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2202      	movs	r2, #2
 800557e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2201      	movs	r2, #1
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fe52 	bl	8006234 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a2b      	ldr	r2, [pc, #172]	@ (8005644 <HAL_TIM_PWM_Start+0x1c0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_TIM_PWM_Start+0x134>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <HAL_TIM_PWM_Start+0x1c4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_TIM_PWM_Start+0x134>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a28      	ldr	r2, [pc, #160]	@ (800564c <HAL_TIM_PWM_Start+0x1c8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIM_PWM_Start+0x134>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a27      	ldr	r2, [pc, #156]	@ (8005650 <HAL_TIM_PWM_Start+0x1cc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <HAL_TIM_PWM_Start+0x138>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_TIM_PWM_Start+0x13a>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d007      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005644 <HAL_TIM_PWM_Start+0x1c0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_TIM_PWM_Start+0x176>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d009      	beq.n	80055fa <HAL_TIM_PWM_Start+0x176>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005654 <HAL_TIM_PWM_Start+0x1d0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_PWM_Start+0x176>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a14      	ldr	r2, [pc, #80]	@ (8005648 <HAL_TIM_PWM_Start+0x1c4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d115      	bne.n	8005626 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	4b15      	ldr	r3, [pc, #84]	@ (8005658 <HAL_TIM_PWM_Start+0x1d4>)
 8005602:	4013      	ands	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d015      	beq.n	8005638 <HAL_TIM_PWM_Start+0x1b4>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005612:	d011      	beq.n	8005638 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	e008      	b.n	8005638 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e000      	b.n	800563a <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800
 8005654:	40000400 	.word	0x40000400
 8005658:	00010007 	.word	0x00010007

0800565c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e097      	b.n	80057a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d106      	bne.n	800568a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7fc ff29 	bl	80024dc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80056a0:	f023 0307 	bic.w	r3, r3, #7
 80056a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 fa95 	bl	8005be0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056de:	f023 0303 	bic.w	r3, r3, #3
 80056e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	4313      	orrs	r3, r2
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80056fc:	f023 030c 	bic.w	r3, r3, #12
 8005700:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005708:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800570c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	4313      	orrs	r3, r2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	011a      	lsls	r2, r3, #4
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	031b      	lsls	r3, r3, #12
 800572c:	4313      	orrs	r3, r2
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800573a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	4313      	orrs	r3, r2
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	693a      	ldr	r2, [r7, #16]
 8005764:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d110      	bne.n	80057fa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d102      	bne.n	80057e4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80057de:	7b7b      	ldrb	r3, [r7, #13]
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d001      	beq.n	80057e8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e069      	b.n	80058bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057f8:	e031      	b.n	800585e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d110      	bne.n	8005822 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005800:	7bbb      	ldrb	r3, [r7, #14]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d102      	bne.n	800580c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005806:	7b3b      	ldrb	r3, [r7, #12]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e055      	b.n	80058bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005820:	e01d      	b.n	800585e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d108      	bne.n	800583a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d105      	bne.n	800583a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800582e:	7b7b      	ldrb	r3, [r7, #13]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d102      	bne.n	800583a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005834:	7b3b      	ldrb	r3, [r7, #12]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e03e      	b.n	80058bc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_TIM_Encoder_Start+0xc4>
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d008      	beq.n	800587c <HAL_TIM_Encoder_Start+0xd4>
 800586a:	e00f      	b.n	800588c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	2100      	movs	r1, #0
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fcdd 	bl	8006234 <TIM_CCxChannelCmd>
      break;
 800587a:	e016      	b.n	80058aa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2201      	movs	r2, #1
 8005882:	2104      	movs	r1, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fcd5 	bl	8006234 <TIM_CCxChannelCmd>
      break;
 800588a:	e00e      	b.n	80058aa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2201      	movs	r2, #1
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fccd 	bl	8006234 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2201      	movs	r2, #1
 80058a0:	2104      	movs	r1, #4
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fcc6 	bl	8006234 <TIM_CCxChannelCmd>
      break;
 80058a8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80058de:	2302      	movs	r3, #2
 80058e0:	e066      	b.n	80059b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b14      	cmp	r3, #20
 80058ee:	d857      	bhi.n	80059a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80058f0:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	080059a1 	.word	0x080059a1
 8005900:	080059a1 	.word	0x080059a1
 8005904:	080059a1 	.word	0x080059a1
 8005908:	0800595b 	.word	0x0800595b
 800590c:	080059a1 	.word	0x080059a1
 8005910:	080059a1 	.word	0x080059a1
 8005914:	080059a1 	.word	0x080059a1
 8005918:	08005969 	.word	0x08005969
 800591c:	080059a1 	.word	0x080059a1
 8005920:	080059a1 	.word	0x080059a1
 8005924:	080059a1 	.word	0x080059a1
 8005928:	08005977 	.word	0x08005977
 800592c:	080059a1 	.word	0x080059a1
 8005930:	080059a1 	.word	0x080059a1
 8005934:	080059a1 	.word	0x080059a1
 8005938:	08005985 	.word	0x08005985
 800593c:	080059a1 	.word	0x080059a1
 8005940:	080059a1 	.word	0x080059a1
 8005944:	080059a1 	.word	0x080059a1
 8005948:	08005993 	.word	0x08005993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f9c8 	bl	8005ce8 <TIM_OC1_SetConfig>
      break;
 8005958:	e025      	b.n	80059a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fa47 	bl	8005df4 <TIM_OC2_SetConfig>
      break;
 8005966:	e01e      	b.n	80059a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fac0 	bl	8005ef4 <TIM_OC3_SetConfig>
      break;
 8005974:	e017      	b.n	80059a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68b9      	ldr	r1, [r7, #8]
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fb37 	bl	8005ff0 <TIM_OC4_SetConfig>
      break;
 8005982:	e010      	b.n	80059a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 fb94 	bl	80060b8 <TIM_OC5_SetConfig>
      break;
 8005990:	e009      	b.n	80059a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fbeb 	bl	8006174 <TIM_OC6_SetConfig>
      break;
 800599e:	e002      	b.n	80059a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	75fb      	strb	r3, [r7, #23]
      break;
 80059a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3718      	adds	r7, #24
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e0ff      	b.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b14      	cmp	r3, #20
 80059e2:	f200 80f0 	bhi.w	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059e6:	a201      	add	r2, pc, #4	@ (adr r2, 80059ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ec:	08005a41 	.word	0x08005a41
 80059f0:	08005bc7 	.word	0x08005bc7
 80059f4:	08005bc7 	.word	0x08005bc7
 80059f8:	08005bc7 	.word	0x08005bc7
 80059fc:	08005a81 	.word	0x08005a81
 8005a00:	08005bc7 	.word	0x08005bc7
 8005a04:	08005bc7 	.word	0x08005bc7
 8005a08:	08005bc7 	.word	0x08005bc7
 8005a0c:	08005ac3 	.word	0x08005ac3
 8005a10:	08005bc7 	.word	0x08005bc7
 8005a14:	08005bc7 	.word	0x08005bc7
 8005a18:	08005bc7 	.word	0x08005bc7
 8005a1c:	08005b03 	.word	0x08005b03
 8005a20:	08005bc7 	.word	0x08005bc7
 8005a24:	08005bc7 	.word	0x08005bc7
 8005a28:	08005bc7 	.word	0x08005bc7
 8005a2c:	08005b45 	.word	0x08005b45
 8005a30:	08005bc7 	.word	0x08005bc7
 8005a34:	08005bc7 	.word	0x08005bc7
 8005a38:	08005bc7 	.word	0x08005bc7
 8005a3c:	08005b85 	.word	0x08005b85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f94e 	bl	8005ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f042 0208 	orr.w	r2, r2, #8
 8005a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699a      	ldr	r2, [r3, #24]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0204 	bic.w	r2, r2, #4
 8005a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6999      	ldr	r1, [r3, #24]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	619a      	str	r2, [r3, #24]
      break;
 8005a7e:	e0a5      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f9b4 	bl	8005df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699a      	ldr	r2, [r3, #24]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6999      	ldr	r1, [r3, #24]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	021a      	lsls	r2, r3, #8
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	619a      	str	r2, [r3, #24]
      break;
 8005ac0:	e084      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fa13 	bl	8005ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0208 	orr.w	r2, r2, #8
 8005adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69da      	ldr	r2, [r3, #28]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0204 	bic.w	r2, r2, #4
 8005aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69d9      	ldr	r1, [r3, #28]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	691a      	ldr	r2, [r3, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	61da      	str	r2, [r3, #28]
      break;
 8005b00:	e064      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fa71 	bl	8005ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69da      	ldr	r2, [r3, #28]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69d9      	ldr	r1, [r3, #28]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	021a      	lsls	r2, r3, #8
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	61da      	str	r2, [r3, #28]
      break;
 8005b42:	e043      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fab4 	bl	80060b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0208 	orr.w	r2, r2, #8
 8005b5e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0204 	bic.w	r2, r2, #4
 8005b6e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b82:	e023      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 faf2 	bl	8006174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005bc4:	e002      	b.n	8005bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop

08005be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a38      	ldr	r2, [pc, #224]	@ (8005cd4 <TIM_Base_SetConfig+0xf4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0x28>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0x28>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a35      	ldr	r2, [pc, #212]	@ (8005cd8 <TIM_Base_SetConfig+0xf8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d108      	bne.n	8005c1a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd4 <TIM_Base_SetConfig+0xf4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <TIM_Base_SetConfig+0x6a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c28:	d00f      	beq.n	8005c4a <TIM_Base_SetConfig+0x6a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005cd8 <TIM_Base_SetConfig+0xf8>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00b      	beq.n	8005c4a <TIM_Base_SetConfig+0x6a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a29      	ldr	r2, [pc, #164]	@ (8005cdc <TIM_Base_SetConfig+0xfc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d007      	beq.n	8005c4a <TIM_Base_SetConfig+0x6a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ce0 <TIM_Base_SetConfig+0x100>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_Base_SetConfig+0x6a>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a27      	ldr	r2, [pc, #156]	@ (8005ce4 <TIM_Base_SetConfig+0x104>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d108      	bne.n	8005c5c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a14      	ldr	r2, [pc, #80]	@ (8005cd4 <TIM_Base_SetConfig+0xf4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0xc0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a14      	ldr	r2, [pc, #80]	@ (8005cdc <TIM_Base_SetConfig+0xfc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0xc0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a13      	ldr	r2, [pc, #76]	@ (8005ce0 <TIM_Base_SetConfig+0x100>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0xc0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a12      	ldr	r2, [pc, #72]	@ (8005ce4 <TIM_Base_SetConfig+0x104>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d103      	bne.n	8005ca8 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d105      	bne.n	8005cc6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]
  }
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40012c00 	.word	0x40012c00
 8005cd8:	40000400 	.word	0x40000400
 8005cdc:	40014000 	.word	0x40014000
 8005ce0:	40014400 	.word	0x40014400
 8005ce4:	40014800 	.word	0x40014800

08005ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	f023 0201 	bic.w	r2, r3, #1
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0303 	bic.w	r3, r3, #3
 8005d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 0302 	bic.w	r3, r3, #2
 8005d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a28      	ldr	r2, [pc, #160]	@ (8005de4 <TIM_OC1_SetConfig+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_OC1_SetConfig+0x78>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a27      	ldr	r2, [pc, #156]	@ (8005de8 <TIM_OC1_SetConfig+0x100>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_OC1_SetConfig+0x78>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a26      	ldr	r2, [pc, #152]	@ (8005dec <TIM_OC1_SetConfig+0x104>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_OC1_SetConfig+0x78>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a25      	ldr	r2, [pc, #148]	@ (8005df0 <TIM_OC1_SetConfig+0x108>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d10c      	bne.n	8005d7a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0308 	bic.w	r3, r3, #8
 8005d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f023 0304 	bic.w	r3, r3, #4
 8005d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	@ (8005de4 <TIM_OC1_SetConfig+0xfc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00b      	beq.n	8005d9a <TIM_OC1_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <TIM_OC1_SetConfig+0x100>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d007      	beq.n	8005d9a <TIM_OC1_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a17      	ldr	r2, [pc, #92]	@ (8005dec <TIM_OC1_SetConfig+0x104>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d003      	beq.n	8005d9a <TIM_OC1_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a16      	ldr	r2, [pc, #88]	@ (8005df0 <TIM_OC1_SetConfig+0x108>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d111      	bne.n	8005dbe <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40014400 	.word	0x40014400
 8005df0:	40014800 	.word	0x40014800

08005df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f023 0320 	bic.w	r3, r3, #32
 8005e42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a24      	ldr	r2, [pc, #144]	@ (8005ee4 <TIM_OC2_SetConfig+0xf0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10d      	bne.n	8005e74 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee4 <TIM_OC2_SetConfig+0xf0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_OC2_SetConfig+0xa0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ee8 <TIM_OC2_SetConfig+0xf4>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_OC2_SetConfig+0xa0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a19      	ldr	r2, [pc, #100]	@ (8005eec <TIM_OC2_SetConfig+0xf8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC2_SetConfig+0xa0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <TIM_OC2_SetConfig+0xfc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d113      	bne.n	8005ebc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e9a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ea2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr
 8005ee2:	bf00      	nop
 8005ee4:	40012c00 	.word	0x40012c00
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a23      	ldr	r2, [pc, #140]	@ (8005fe0 <TIM_OC3_SetConfig+0xec>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d10d      	bne.n	8005f72 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f70:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe0 <TIM_OC3_SetConfig+0xec>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <TIM_OC3_SetConfig+0x9e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a19      	ldr	r2, [pc, #100]	@ (8005fe4 <TIM_OC3_SetConfig+0xf0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d007      	beq.n	8005f92 <TIM_OC3_SetConfig+0x9e>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a18      	ldr	r2, [pc, #96]	@ (8005fe8 <TIM_OC3_SetConfig+0xf4>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d003      	beq.n	8005f92 <TIM_OC3_SetConfig+0x9e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <TIM_OC3_SetConfig+0xf8>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d113      	bne.n	8005fba <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	621a      	str	r2, [r3, #32]
}
 8005fd4:	bf00      	nop
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800602a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800603e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	031b      	lsls	r3, r3, #12
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <TIM_OC4_SetConfig+0xb8>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00b      	beq.n	800606c <TIM_OC4_SetConfig+0x7c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a15      	ldr	r2, [pc, #84]	@ (80060ac <TIM_OC4_SetConfig+0xbc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <TIM_OC4_SetConfig+0x7c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a14      	ldr	r2, [pc, #80]	@ (80060b0 <TIM_OC4_SetConfig+0xc0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_OC4_SetConfig+0x7c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a13      	ldr	r2, [pc, #76]	@ (80060b4 <TIM_OC4_SetConfig+0xc4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d109      	bne.n	8006080 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006072:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	019b      	lsls	r3, r3, #6
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40014000 	.word	0x40014000
 80060b0:	40014400 	.word	0x40014400
 80060b4:	40014800 	.word	0x40014800

080060b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a15      	ldr	r2, [pc, #84]	@ (8006164 <TIM_OC5_SetConfig+0xac>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00b      	beq.n	800612a <TIM_OC5_SetConfig+0x72>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a14      	ldr	r2, [pc, #80]	@ (8006168 <TIM_OC5_SetConfig+0xb0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d007      	beq.n	800612a <TIM_OC5_SetConfig+0x72>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a13      	ldr	r2, [pc, #76]	@ (800616c <TIM_OC5_SetConfig+0xb4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d003      	beq.n	800612a <TIM_OC5_SetConfig+0x72>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a12      	ldr	r2, [pc, #72]	@ (8006170 <TIM_OC5_SetConfig+0xb8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d109      	bne.n	800613e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	621a      	str	r2, [r3, #32]
}
 8006158:	bf00      	nop
 800615a:	371c      	adds	r7, #28
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	40012c00 	.word	0x40012c00
 8006168:	40014000 	.word	0x40014000
 800616c:	40014400 	.word	0x40014400
 8006170:	40014800 	.word	0x40014800

08006174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	051b      	lsls	r3, r3, #20
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a16      	ldr	r2, [pc, #88]	@ (8006224 <TIM_OC6_SetConfig+0xb0>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d00b      	beq.n	80061e8 <TIM_OC6_SetConfig+0x74>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a15      	ldr	r2, [pc, #84]	@ (8006228 <TIM_OC6_SetConfig+0xb4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d007      	beq.n	80061e8 <TIM_OC6_SetConfig+0x74>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a14      	ldr	r2, [pc, #80]	@ (800622c <TIM_OC6_SetConfig+0xb8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_OC6_SetConfig+0x74>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <TIM_OC6_SetConfig+0xbc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d109      	bne.n	80061fc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	029b      	lsls	r3, r3, #10
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40014000 	.word	0x40014000
 800622c:	40014400 	.word	0x40014400
 8006230:	40014800 	.word	0x40014800

08006234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2201      	movs	r2, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1a      	ldr	r2, [r3, #32]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	6879      	ldr	r1, [r7, #4]
 8006268:	fa01 f303 	lsl.w	r3, r1, r3
 800626c:	431a      	orrs	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	621a      	str	r2, [r3, #32]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006290:	2b01      	cmp	r3, #1
 8006292:	d101      	bne.n	8006298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006294:	2302      	movs	r3, #2
 8006296:	e054      	b.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a24      	ldr	r2, [pc, #144]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d108      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a17      	ldr	r2, [pc, #92]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d00e      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006300:	d009      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a13      	ldr	r2, [pc, #76]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d004      	beq.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a11      	ldr	r2, [pc, #68]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d10c      	bne.n	8006330 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800631c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40012c00 	.word	0x40012c00
 8006354:	40000400 	.word	0x40000400
 8006358:	40014000 	.word	0x40014000

0800635c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006374:	2302      	movs	r3, #2
 8006376:	e060      	b.n	800643a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a14      	ldr	r2, [pc, #80]	@ (8006448 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d115      	bne.n	8006428 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006406:	051b      	lsls	r3, r3, #20
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40012c00 	.word	0x40012c00

0800644c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d101      	bne.n	800645e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e040      	b.n	80064e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d106      	bne.n	8006474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f7fc f8ac 	bl	80025cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2224      	movs	r2, #36	@ 0x24
 8006478:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	2b00      	cmp	r3, #0
 8006490:	d002      	beq.n	8006498 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f95e 	bl	8006754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f825 	bl	80064e8 <UART_SetConfig>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d101      	bne.n	80064a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e01b      	b.n	80064e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689a      	ldr	r2, [r3, #8]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9dd 	bl	8006898 <UART_CheckIdleState>
 80064de:	4603      	mov	r3, r0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b088      	sub	sp, #32
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b8a      	ldr	r3, [pc, #552]	@ (800673c <UART_SetConfig+0x254>)
 8006514:	4013      	ands	r3, r2
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	6979      	ldr	r1, [r7, #20]
 800651c:	430b      	orrs	r3, r1
 800651e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68da      	ldr	r2, [r3, #12]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	430a      	orrs	r2, r1
 8006558:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a78      	ldr	r2, [pc, #480]	@ (8006740 <UART_SetConfig+0x258>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d120      	bne.n	80065a6 <UART_SetConfig+0xbe>
 8006564:	4b77      	ldr	r3, [pc, #476]	@ (8006744 <UART_SetConfig+0x25c>)
 8006566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006568:	f003 0303 	and.w	r3, r3, #3
 800656c:	2b03      	cmp	r3, #3
 800656e:	d817      	bhi.n	80065a0 <UART_SetConfig+0xb8>
 8006570:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <UART_SetConfig+0x90>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	08006589 	.word	0x08006589
 800657c:	08006595 	.word	0x08006595
 8006580:	0800659b 	.word	0x0800659b
 8006584:	0800658f 	.word	0x0800658f
 8006588:	2300      	movs	r3, #0
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e01d      	b.n	80065ca <UART_SetConfig+0xe2>
 800658e:	2302      	movs	r3, #2
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e01a      	b.n	80065ca <UART_SetConfig+0xe2>
 8006594:	2304      	movs	r3, #4
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e017      	b.n	80065ca <UART_SetConfig+0xe2>
 800659a:	2308      	movs	r3, #8
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e014      	b.n	80065ca <UART_SetConfig+0xe2>
 80065a0:	2310      	movs	r3, #16
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e011      	b.n	80065ca <UART_SetConfig+0xe2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a67      	ldr	r2, [pc, #412]	@ (8006748 <UART_SetConfig+0x260>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d102      	bne.n	80065b6 <UART_SetConfig+0xce>
 80065b0:	2300      	movs	r3, #0
 80065b2:	77fb      	strb	r3, [r7, #31]
 80065b4:	e009      	b.n	80065ca <UART_SetConfig+0xe2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a64      	ldr	r2, [pc, #400]	@ (800674c <UART_SetConfig+0x264>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d102      	bne.n	80065c6 <UART_SetConfig+0xde>
 80065c0:	2300      	movs	r3, #0
 80065c2:	77fb      	strb	r3, [r7, #31]
 80065c4:	e001      	b.n	80065ca <UART_SetConfig+0xe2>
 80065c6:	2310      	movs	r3, #16
 80065c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065d2:	d15a      	bne.n	800668a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80065d4:	7ffb      	ldrb	r3, [r7, #31]
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d827      	bhi.n	800662a <UART_SetConfig+0x142>
 80065da:	a201      	add	r2, pc, #4	@ (adr r2, 80065e0 <UART_SetConfig+0xf8>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006605 	.word	0x08006605
 80065e4:	0800660d 	.word	0x0800660d
 80065e8:	08006615 	.word	0x08006615
 80065ec:	0800662b 	.word	0x0800662b
 80065f0:	0800661b 	.word	0x0800661b
 80065f4:	0800662b 	.word	0x0800662b
 80065f8:	0800662b 	.word	0x0800662b
 80065fc:	0800662b 	.word	0x0800662b
 8006600:	08006623 	.word	0x08006623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006604:	f7fe fd1e 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 8006608:	61b8      	str	r0, [r7, #24]
        break;
 800660a:	e013      	b.n	8006634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800660c:	f7fe fd3c 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 8006610:	61b8      	str	r0, [r7, #24]
        break;
 8006612:	e00f      	b.n	8006634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006614:	4b4e      	ldr	r3, [pc, #312]	@ (8006750 <UART_SetConfig+0x268>)
 8006616:	61bb      	str	r3, [r7, #24]
        break;
 8006618:	e00c      	b.n	8006634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800661a:	f7fe fcb3 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 800661e:	61b8      	str	r0, [r7, #24]
        break;
 8006620:	e008      	b.n	8006634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006626:	61bb      	str	r3, [r7, #24]
        break;
 8006628:	e004      	b.n	8006634 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	77bb      	strb	r3, [r7, #30]
        break;
 8006632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d074      	beq.n	8006724 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	005a      	lsls	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	441a      	add	r2, r3
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	fbb2 f3f3 	udiv	r3, r2, r3
 800664e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d916      	bls.n	8006684 <UART_SetConfig+0x19c>
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800665c:	d212      	bcs.n	8006684 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	b29b      	uxth	r3, r3
 8006662:	f023 030f 	bic.w	r3, r3, #15
 8006666:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	b29b      	uxth	r3, r3
 800666e:	f003 0307 	and.w	r3, r3, #7
 8006672:	b29a      	uxth	r2, r3
 8006674:	89fb      	ldrh	r3, [r7, #14]
 8006676:	4313      	orrs	r3, r2
 8006678:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	89fa      	ldrh	r2, [r7, #14]
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	e04f      	b.n	8006724 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	77bb      	strb	r3, [r7, #30]
 8006688:	e04c      	b.n	8006724 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800668a:	7ffb      	ldrb	r3, [r7, #31]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d828      	bhi.n	80066e2 <UART_SetConfig+0x1fa>
 8006690:	a201      	add	r2, pc, #4	@ (adr r2, 8006698 <UART_SetConfig+0x1b0>)
 8006692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006696:	bf00      	nop
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066c5 	.word	0x080066c5
 80066a0:	080066cd 	.word	0x080066cd
 80066a4:	080066e3 	.word	0x080066e3
 80066a8:	080066d3 	.word	0x080066d3
 80066ac:	080066e3 	.word	0x080066e3
 80066b0:	080066e3 	.word	0x080066e3
 80066b4:	080066e3 	.word	0x080066e3
 80066b8:	080066db 	.word	0x080066db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066bc:	f7fe fcc2 	bl	8005044 <HAL_RCC_GetPCLK1Freq>
 80066c0:	61b8      	str	r0, [r7, #24]
        break;
 80066c2:	e013      	b.n	80066ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c4:	f7fe fce0 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 80066c8:	61b8      	str	r0, [r7, #24]
        break;
 80066ca:	e00f      	b.n	80066ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066cc:	4b20      	ldr	r3, [pc, #128]	@ (8006750 <UART_SetConfig+0x268>)
 80066ce:	61bb      	str	r3, [r7, #24]
        break;
 80066d0:	e00c      	b.n	80066ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066d2:	f7fe fc57 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 80066d6:	61b8      	str	r0, [r7, #24]
        break;
 80066d8:	e008      	b.n	80066ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066de:	61bb      	str	r3, [r7, #24]
        break;
 80066e0:	e004      	b.n	80066ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	77bb      	strb	r3, [r7, #30]
        break;
 80066ea:	bf00      	nop
    }

    if (pclk != 0U)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d018      	beq.n	8006724 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	085a      	lsrs	r2, r3, #1
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	441a      	add	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	fbb2 f3f3 	udiv	r3, r2, r3
 8006704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	2b0f      	cmp	r3, #15
 800670a:	d909      	bls.n	8006720 <UART_SetConfig+0x238>
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006712:	d205      	bcs.n	8006720 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	b29a      	uxth	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60da      	str	r2, [r3, #12]
 800671e:	e001      	b.n	8006724 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006730:	7fbb      	ldrb	r3, [r7, #30]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	efff69f3 	.word	0xefff69f3
 8006740:	40013800 	.word	0x40013800
 8006744:	40021000 	.word	0x40021000
 8006748:	40004400 	.word	0x40004400
 800674c:	40004800 	.word	0x40004800
 8006750:	007a1200 	.word	0x007a1200

08006754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	f003 0304 	and.w	r3, r3, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	f003 0320 	and.w	r3, r3, #32
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01a      	beq.n	800686a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006852:	d10a      	bne.n	800686a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]
  }
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b098      	sub	sp, #96	@ 0x60
 800689c:	af02      	add	r7, sp, #8
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068a8:	f7fc ff50 	bl	800374c <HAL_GetTick>
 80068ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d12e      	bne.n	800691a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c4:	2200      	movs	r2, #0
 80068c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f88c 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d021      	beq.n	800691a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068de:	e853 3f00 	ldrex	r3, [r3]
 80068e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068fc:	e841 2300 	strex	r3, r2, [r1]
 8006900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1e6      	bne.n	80068d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e062      	b.n	80069e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b04      	cmp	r3, #4
 8006926:	d149      	bne.n	80069bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006928:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006930:	2200      	movs	r2, #0
 8006932:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f856 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d03c      	beq.n	80069bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	623b      	str	r3, [r7, #32]
   return(result);
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006960:	633b      	str	r3, [r7, #48]	@ 0x30
 8006962:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	60fb      	str	r3, [r7, #12]
   return(result);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3308      	adds	r3, #8
 8006992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006994:	61fa      	str	r2, [r7, #28]
 8006996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	617b      	str	r3, [r7, #20]
   return(result);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e5      	bne.n	8006974 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e011      	b.n	80069e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2220      	movs	r2, #32
 80069c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3758      	adds	r7, #88	@ 0x58
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f8:	e04f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a00:	d04b      	beq.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a02:	f7fc fea3 	bl	800374c <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d302      	bcc.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e04e      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d037      	beq.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2b80      	cmp	r3, #128	@ 0x80
 8006a2e:	d034      	beq.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2b40      	cmp	r3, #64	@ 0x40
 8006a34:	d031      	beq.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d110      	bne.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2208      	movs	r2, #8
 8006a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f838 	bl	8006ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2208      	movs	r2, #8
 8006a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e029      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a74:	d111      	bne.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 f81e 	bl	8006ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e00f      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	bf0c      	ite	eq
 8006aaa:	2301      	moveq	r3, #1
 8006aac:	2300      	movne	r3, #0
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d0a0      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b095      	sub	sp, #84	@ 0x54
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad2:	e853 3f00 	ldrex	r3, [r3]
 8006ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e6      	bne.n	8006aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3308      	adds	r3, #8
 8006b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f023 0301 	bic.w	r3, r3, #1
 8006b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b24:	e841 2300 	strex	r3, r2, [r1]
 8006b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1e5      	bne.n	8006afc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d118      	bne.n	8006b6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 0310 	bic.w	r3, r3, #16
 8006b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5a:	6979      	ldr	r1, [r7, #20]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	e841 2300 	strex	r3, r2, [r1]
 8006b62:	613b      	str	r3, [r7, #16]
   return(result);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1e6      	bne.n	8006b38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006b7e:	bf00      	nop
 8006b80:	3754      	adds	r7, #84	@ 0x54
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
	...

08006b8c <fmodf>:
 8006b8c:	b508      	push	{r3, lr}
 8006b8e:	ed2d 8b02 	vpush	{d8}
 8006b92:	eef0 8a40 	vmov.f32	s17, s0
 8006b96:	eeb0 8a60 	vmov.f32	s16, s1
 8006b9a:	f000 f817 	bl	8006bcc <__ieee754_fmodf>
 8006b9e:	eef4 8a48 	vcmp.f32	s17, s16
 8006ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba6:	d60c      	bvs.n	8006bc2 <fmodf+0x36>
 8006ba8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006bc8 <fmodf+0x3c>
 8006bac:	eeb4 8a68 	vcmp.f32	s16, s17
 8006bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb4:	d105      	bne.n	8006bc2 <fmodf+0x36>
 8006bb6:	f000 f893 	bl	8006ce0 <__errno>
 8006bba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006bbe:	2321      	movs	r3, #33	@ 0x21
 8006bc0:	6003      	str	r3, [r0, #0]
 8006bc2:	ecbd 8b02 	vpop	{d8}
 8006bc6:	bd08      	pop	{r3, pc}
 8006bc8:	00000000 	.word	0x00000000

08006bcc <__ieee754_fmodf>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	ee10 6a90 	vmov	r6, s1
 8006bd2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006bd6:	1e5a      	subs	r2, r3, #1
 8006bd8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006bdc:	d206      	bcs.n	8006bec <__ieee754_fmodf+0x20>
 8006bde:	ee10 4a10 	vmov	r4, s0
 8006be2:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8006be6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006bea:	d304      	bcc.n	8006bf6 <__ieee754_fmodf+0x2a>
 8006bec:	ee60 0a20 	vmul.f32	s1, s0, s1
 8006bf0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	dbfc      	blt.n	8006bf4 <__ieee754_fmodf+0x28>
 8006bfa:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8006bfe:	d105      	bne.n	8006c0c <__ieee754_fmodf+0x40>
 8006c00:	4b32      	ldr	r3, [pc, #200]	@ (8006ccc <__ieee754_fmodf+0x100>)
 8006c02:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8006c06:	ed93 0a00 	vldr	s0, [r3]
 8006c0a:	e7f3      	b.n	8006bf4 <__ieee754_fmodf+0x28>
 8006c0c:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8006c10:	d146      	bne.n	8006ca0 <__ieee754_fmodf+0xd4>
 8006c12:	020a      	lsls	r2, r1, #8
 8006c14:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	dc3e      	bgt.n	8006c9a <__ieee754_fmodf+0xce>
 8006c1c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8006c20:	bf01      	itttt	eq
 8006c22:	021a      	lsleq	r2, r3, #8
 8006c24:	fab2 f282 	clzeq	r2, r2
 8006c28:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8006c2c:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8006c30:	bf16      	itet	ne
 8006c32:	15da      	asrne	r2, r3, #23
 8006c34:	3282      	addeq	r2, #130	@ 0x82
 8006c36:	3a7f      	subne	r2, #127	@ 0x7f
 8006c38:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8006c3c:	bfbb      	ittet	lt
 8006c3e:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8006c42:	1a24      	sublt	r4, r4, r0
 8006c44:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8006c48:	40a1      	lsllt	r1, r4
 8006c4a:	bfa8      	it	ge
 8006c4c:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8006c50:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8006c54:	bfb5      	itete	lt
 8006c56:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8006c5a:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8006c5e:	1aa4      	sublt	r4, r4, r2
 8006c60:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8006c64:	bfb8      	it	lt
 8006c66:	fa03 f404 	lsllt.w	r4, r3, r4
 8006c6a:	1a80      	subs	r0, r0, r2
 8006c6c:	1b0b      	subs	r3, r1, r4
 8006c6e:	b9d0      	cbnz	r0, 8006ca6 <__ieee754_fmodf+0xda>
 8006c70:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8006c74:	bf28      	it	cs
 8006c76:	460b      	movcs	r3, r1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0c1      	beq.n	8006c00 <__ieee754_fmodf+0x34>
 8006c7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c80:	db19      	blt.n	8006cb6 <__ieee754_fmodf+0xea>
 8006c82:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8006c86:	db19      	blt.n	8006cbc <__ieee754_fmodf+0xf0>
 8006c88:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8006c8c:	327f      	adds	r2, #127	@ 0x7f
 8006c8e:	432b      	orrs	r3, r5
 8006c90:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006c94:	ee00 3a10 	vmov	s0, r3
 8006c98:	e7ac      	b.n	8006bf4 <__ieee754_fmodf+0x28>
 8006c9a:	3801      	subs	r0, #1
 8006c9c:	0052      	lsls	r2, r2, #1
 8006c9e:	e7bb      	b.n	8006c18 <__ieee754_fmodf+0x4c>
 8006ca0:	15c8      	asrs	r0, r1, #23
 8006ca2:	387f      	subs	r0, #127	@ 0x7f
 8006ca4:	e7ba      	b.n	8006c1c <__ieee754_fmodf+0x50>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da02      	bge.n	8006cb0 <__ieee754_fmodf+0xe4>
 8006caa:	0049      	lsls	r1, r1, #1
 8006cac:	3801      	subs	r0, #1
 8006cae:	e7dd      	b.n	8006c6c <__ieee754_fmodf+0xa0>
 8006cb0:	d0a6      	beq.n	8006c00 <__ieee754_fmodf+0x34>
 8006cb2:	0059      	lsls	r1, r3, #1
 8006cb4:	e7fa      	b.n	8006cac <__ieee754_fmodf+0xe0>
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	3a01      	subs	r2, #1
 8006cba:	e7df      	b.n	8006c7c <__ieee754_fmodf+0xb0>
 8006cbc:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8006cc0:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8006cc4:	3282      	adds	r2, #130	@ 0x82
 8006cc6:	4113      	asrs	r3, r2
 8006cc8:	432b      	orrs	r3, r5
 8006cca:	e7e3      	b.n	8006c94 <__ieee754_fmodf+0xc8>
 8006ccc:	08006e80 	.word	0x08006e80

08006cd0 <memset>:
 8006cd0:	4402      	add	r2, r0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d100      	bne.n	8006cda <memset+0xa>
 8006cd8:	4770      	bx	lr
 8006cda:	f803 1b01 	strb.w	r1, [r3], #1
 8006cde:	e7f9      	b.n	8006cd4 <memset+0x4>

08006ce0 <__errno>:
 8006ce0:	4b01      	ldr	r3, [pc, #4]	@ (8006ce8 <__errno+0x8>)
 8006ce2:	6818      	ldr	r0, [r3, #0]
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	20000168 	.word	0x20000168

08006cec <__libc_init_array>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4d0d      	ldr	r5, [pc, #52]	@ (8006d24 <__libc_init_array+0x38>)
 8006cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8006d28 <__libc_init_array+0x3c>)
 8006cf2:	1b64      	subs	r4, r4, r5
 8006cf4:	10a4      	asrs	r4, r4, #2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	d109      	bne.n	8006d10 <__libc_init_array+0x24>
 8006cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8006d2c <__libc_init_array+0x40>)
 8006cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8006d30 <__libc_init_array+0x44>)
 8006d00:	f000 f818 	bl	8006d34 <_init>
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	2600      	movs	r6, #0
 8006d0a:	42a6      	cmp	r6, r4
 8006d0c:	d105      	bne.n	8006d1a <__libc_init_array+0x2e>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d14:	4798      	blx	r3
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7ee      	b.n	8006cf8 <__libc_init_array+0xc>
 8006d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1e:	4798      	blx	r3
 8006d20:	3601      	adds	r6, #1
 8006d22:	e7f2      	b.n	8006d0a <__libc_init_array+0x1e>
 8006d24:	08006e88 	.word	0x08006e88
 8006d28:	08006e88 	.word	0x08006e88
 8006d2c:	08006e88 	.word	0x08006e88
 8006d30:	08006e90 	.word	0x08006e90

08006d34 <_init>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr

08006d40 <_fini>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr


simple_foc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a74  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002bfc  08002bfc  00003bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c34  08002c34  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002c34  08002c34  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002c34  08002c34  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00003c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c38  08002c38  00003c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c76d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000175c  00000000  00000000  000107a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  00011f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000090b  00000000  00000000  00012a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030a9  00000000  00000000  0001338b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d263  00000000  00000000  00016434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0ac3  00000000  00000000  00023697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c415a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003084  00000000  00000000  000c41a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000c7224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002be4 	.word	0x08002be4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002be4 	.word	0x08002be4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fa14 	bl	80005f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f814 	bl	80001fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8d2 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8a0 	bl	800031c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80001dc:	f000 f84a 	bl	8000274 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80001e0:	213c      	movs	r1, #60	@ 0x3c
 80001e2:	4804      	ldr	r0, [pc, #16]	@ (80001f4 <main+0x2c>)
 80001e4:	f001 ff8c 	bl	8002100 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  encoder_cnt = TIM2 -> CNT;
 80001e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001ee:	4a02      	ldr	r2, [pc, #8]	@ (80001f8 <main+0x30>)
 80001f0:	6013      	str	r3, [r2, #0]
 80001f2:	e7f9      	b.n	80001e8 <main+0x20>
 80001f4:	20000028 	.word	0x20000028
 80001f8:	200000fc 	.word	0x200000fc

080001fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b090      	sub	sp, #64	@ 0x40
 8000200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000202:	f107 0318 	add.w	r3, r7, #24
 8000206:	2228      	movs	r2, #40	@ 0x28
 8000208:	2100      	movs	r1, #0
 800020a:	4618      	mov	r0, r3
 800020c:	f002 fcbd 	bl	8002b8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000210:	1d3b      	adds	r3, r7, #4
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000222:	2301      	movs	r3, #1
 8000224:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000226:	2310      	movs	r3, #16
 8000228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022a:	2300      	movs	r3, #0
 800022c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fc9e 	bl	8000b74 <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023e:	f000 f8c1 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fc98 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000266:	f000 f8ad 	bl	80003c4 <Error_Handler>
  }
}
 800026a:	bf00      	nop
 800026c:	3740      	adds	r7, #64	@ 0x40
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b08c      	sub	sp, #48	@ 0x30
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	2224      	movs	r2, #36	@ 0x24
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 fc81 	bl	8002b8a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000292:	4b21      	ldr	r3, [pc, #132]	@ (8000318 <MX_TIM2_Init+0xa4>)
 8000294:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000298:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800029a:	4b1f      	ldr	r3, [pc, #124]	@ (8000318 <MX_TIM2_Init+0xa4>)
 800029c:	2200      	movs	r2, #0
 800029e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000318 <MX_TIM2_Init+0xa4>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80002a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000318 <MX_TIM2_Init+0xa4>)
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80002ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <MX_TIM2_Init+0xa4>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <MX_TIM2_Init+0xa4>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80002ba:	2303      	movs	r3, #3
 80002bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80002c2:	2301      	movs	r3, #1
 80002c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80002ce:	2300      	movs	r3, #0
 80002d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80002d2:	2301      	movs	r3, #1
 80002d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <MX_TIM2_Init+0xa4>)
 80002e6:	f001 fe65 	bl	8001fb4 <HAL_TIM_Encoder_Init>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80002f0:	f000 f868 	bl	80003c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f4:	2300      	movs	r3, #0
 80002f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002fc:	463b      	mov	r3, r7
 80002fe:	4619      	mov	r1, r3
 8000300:	4805      	ldr	r0, [pc, #20]	@ (8000318 <MX_TIM2_Init+0xa4>)
 8000302:	f002 f835 	bl	8002370 <HAL_TIMEx_MasterConfigSynchronization>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800030c:	f000 f85a 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	3730      	adds	r7, #48	@ 0x30
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000028 	.word	0x20000028

0800031c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000320:	4b14      	ldr	r3, [pc, #80]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000322:	4a15      	ldr	r2, [pc, #84]	@ (8000378 <MX_USART2_UART_Init+0x5c>)
 8000324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000326:	4b13      	ldr	r3, [pc, #76]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000328:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800032c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000342:	220c      	movs	r2, #12
 8000344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000354:	2200      	movs	r2, #0
 8000356:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 800035a:	2200      	movs	r2, #0
 800035c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_USART2_UART_Init+0x58>)
 8000360:	f002 f874 	bl	800244c <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800036a:	f000 f82b 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000074 	.word	0x20000074
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000382:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_GPIO_Init+0x44>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	4a0e      	ldr	r2, [pc, #56]	@ (80003c0 <MX_GPIO_Init+0x44>)
 8000388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800038c:	6153      	str	r3, [r2, #20]
 800038e:	4b0c      	ldr	r3, [pc, #48]	@ (80003c0 <MX_GPIO_Init+0x44>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b09      	ldr	r3, [pc, #36]	@ (80003c0 <MX_GPIO_Init+0x44>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	4a08      	ldr	r2, [pc, #32]	@ (80003c0 <MX_GPIO_Init+0x44>)
 80003a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a4:	6153      	str	r3, [r2, #20]
 80003a6:	4b06      	ldr	r3, [pc, #24]	@ (80003c0 <MX_GPIO_Init+0x44>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <HAL_MspInit+0x44>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a0e      	ldr	r2, [pc, #56]	@ (8000414 <HAL_MspInit+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <HAL_MspInit+0x44>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <HAL_MspInit+0x44>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <HAL_MspInit+0x44>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <HAL_MspInit+0x44>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	bf00      	nop
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	@ 0x28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000438:	d128      	bne.n	800048c <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800043a:	4b16      	ldr	r3, [pc, #88]	@ (8000494 <HAL_TIM_Encoder_MspInit+0x7c>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a15      	ldr	r2, [pc, #84]	@ (8000494 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b0d      	ldr	r3, [pc, #52]	@ (8000494 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800046a:	2303      	movs	r3, #3
 800046c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	2302      	movs	r3, #2
 8000470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2300      	movs	r3, #0
 8000478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800047a:	2301      	movs	r3, #1
 800047c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	4619      	mov	r1, r3
 8000484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000488:	f000 fa02 	bl	8000890 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800048c:	bf00      	nop
 800048e:	3728      	adds	r7, #40	@ 0x28
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000

08000498 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	@ 0x28
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	2200      	movs	r2, #0
 80004a6:	601a      	str	r2, [r3, #0]
 80004a8:	605a      	str	r2, [r3, #4]
 80004aa:	609a      	str	r2, [r3, #8]
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a18      	ldr	r2, [pc, #96]	@ (8000518 <HAL_UART_MspInit+0x80>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d129      	bne.n	800050e <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <HAL_UART_MspInit+0x84>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a17      	ldr	r2, [pc, #92]	@ (800051c <HAL_UART_MspInit+0x84>)
 80004c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <HAL_UART_MspInit+0x84>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <HAL_UART_MspInit+0x84>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a11      	ldr	r2, [pc, #68]	@ (800051c <HAL_UART_MspInit+0x84>)
 80004d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <HAL_UART_MspInit+0x84>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80004ea:	f248 0304 	movw	r3, #32772	@ 0x8004
 80004ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80004fc:	2307      	movs	r3, #7
 80004fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	4619      	mov	r1, r3
 8000506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050a:	f000 f9c1 	bl	8000890 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800050e:	bf00      	nop
 8000510:	3728      	adds	r7, #40	@ 0x28
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40004400 	.word	0x40004400
 800051c:	40021000 	.word	0x40021000

08000520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000524:	bf00      	nop
 8000526:	e7fd      	b.n	8000524 <NMI_Handler+0x4>

08000528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800052c:	bf00      	nop
 800052e:	e7fd      	b.n	800052c <HardFault_Handler+0x4>

08000530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <MemManage_Handler+0x4>

08000538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <UsageFault_Handler+0x4>

08000548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000572:	b580      	push	{r7, lr}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000576:	f000 f885 	bl	8000684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <SystemInit+0x20>)
 8000586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800058a:	4a05      	ldr	r2, [pc, #20]	@ (80005a0 <SystemInit+0x20>)
 800058c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000ed00 	.word	0xe000ed00

080005a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005dc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a8:	f7ff ffea 	bl	8000580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ac:	480c      	ldr	r0, [pc, #48]	@ (80005e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ae:	490d      	ldr	r1, [pc, #52]	@ (80005e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b0:	4a0d      	ldr	r2, [pc, #52]	@ (80005e8 <LoopForever+0xe>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b4:	e002      	b.n	80005bc <LoopCopyDataInit>

080005b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ba:	3304      	adds	r3, #4

080005bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c0:	d3f9      	bcc.n	80005b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005c2:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80005c4:	4c0a      	ldr	r4, [pc, #40]	@ (80005f0 <LoopForever+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c8:	e001      	b.n	80005ce <LoopFillZerobss>

080005ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005cc:	3204      	adds	r2, #4

080005ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d0:	d3fb      	bcc.n	80005ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005d2:	f002 fae3 	bl	8002b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005d6:	f7ff fdf7 	bl	80001c8 <main>

080005da <LoopForever>:

LoopForever:
    b LoopForever
 80005da:	e7fe      	b.n	80005da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005dc:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005e8:	08002c3c 	.word	0x08002c3c
  ldr r2, =_sbss
 80005ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f0:	20000104 	.word	0x20000104

080005f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005f4:	e7fe      	b.n	80005f4 <ADC1_2_IRQHandler>
	...

080005f8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <HAL_Init+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <HAL_Init+0x28>)
 8000602:	f043 0310 	orr.w	r3, r3, #16
 8000606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000608:	2003      	movs	r0, #3
 800060a:	f000 f90d 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060e:	2000      	movs	r0, #0
 8000610:	f000 f808 	bl	8000624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000614:	f7ff fedc 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40022000 	.word	0x40022000

08000624 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_InitTick+0x54>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <HAL_InitTick+0x58>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800063a:	fbb3 f3f1 	udiv	r3, r3, r1
 800063e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f917 	bl	8000876 <HAL_SYSTICK_Config>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	e00e      	b.n	8000670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b0f      	cmp	r3, #15
 8000656:	d80a      	bhi.n	800066e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000658:	2200      	movs	r2, #0
 800065a:	6879      	ldr	r1, [r7, #4]
 800065c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000660:	f000 f8ed 	bl	800083e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000664:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <HAL_InitTick+0x5c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800066a:	2300      	movs	r3, #0
 800066c:	e000      	b.n	8000670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800066e:	2301      	movs	r3, #1
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000000 	.word	0x20000000
 800067c:	20000008 	.word	0x20000008
 8000680:	20000004 	.word	0x20000004

08000684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <HAL_IncTick+0x20>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	461a      	mov	r2, r3
 800068e:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <HAL_IncTick+0x24>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4413      	add	r3, r2
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_IncTick+0x24>)
 8000696:	6013      	str	r3, [r2, #0]
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000008 	.word	0x20000008
 80006a8:	20000100 	.word	0x20000100

080006ac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;  
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000100 	.word	0x20000100

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	@ (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	@ (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	@ 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	@ 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000808:	f7ff ff8e 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	@ (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff47 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000850:	f7ff ff5c 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	68b9      	ldr	r1, [r7, #8]
 800085a:	6978      	ldr	r0, [r7, #20]
 800085c:	f7ff ff8e 	bl	800077c <NVIC_EncodePriority>
 8000860:	4602      	mov	r2, r0
 8000862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff ff5d 	bl	8000728 <__NVIC_SetPriority>
}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ffb0 	bl	80007e4 <SysTick_Config>
 8000884:	4603      	mov	r3, r0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000890:	b480      	push	{r7}
 8000892:	b087      	sub	sp, #28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089e:	e14e      	b.n	8000b3e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	2101      	movs	r1, #1
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	f000 8140 	beq.w	8000b38 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d005      	beq.n	80008d0 <HAL_GPIO_Init+0x40>
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f003 0303 	and.w	r3, r3, #3
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d130      	bne.n	8000932 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	2203      	movs	r2, #3
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4013      	ands	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68da      	ldr	r2, [r3, #12]
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	693a      	ldr	r2, [r7, #16]
 80008fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000906:	2201      	movs	r2, #1
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	091b      	lsrs	r3, r3, #4
 800091c:	f003 0201 	and.w	r2, r3, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b03      	cmp	r3, #3
 800093c:	d017      	beq.n	800096e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	4313      	orrs	r3, r2
 8000966:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	2b02      	cmp	r3, #2
 8000978:	d123      	bne.n	80009c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	08da      	lsrs	r2, r3, #3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3208      	adds	r2, #8
 8000982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000986:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	220f      	movs	r2, #15
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	691a      	ldr	r2, [r3, #16]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	08da      	lsrs	r2, r3, #3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3208      	adds	r2, #8
 80009bc:	6939      	ldr	r1, [r7, #16]
 80009be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f003 0203 	and.w	r2, r3, #3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 809a 	beq.w	8000b38 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a04:	4b55      	ldr	r3, [pc, #340]	@ (8000b5c <HAL_GPIO_Init+0x2cc>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a54      	ldr	r2, [pc, #336]	@ (8000b5c <HAL_GPIO_Init+0x2cc>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b52      	ldr	r3, [pc, #328]	@ (8000b5c <HAL_GPIO_Init+0x2cc>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a1c:	4a50      	ldr	r2, [pc, #320]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a46:	d013      	beq.n	8000a70 <HAL_GPIO_Init+0x1e0>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a46      	ldr	r2, [pc, #280]	@ (8000b64 <HAL_GPIO_Init+0x2d4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00d      	beq.n	8000a6c <HAL_GPIO_Init+0x1dc>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a45      	ldr	r2, [pc, #276]	@ (8000b68 <HAL_GPIO_Init+0x2d8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d007      	beq.n	8000a68 <HAL_GPIO_Init+0x1d8>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a44      	ldr	r2, [pc, #272]	@ (8000b6c <HAL_GPIO_Init+0x2dc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_Init+0x1d4>
 8000a60:	2303      	movs	r3, #3
 8000a62:	e006      	b.n	8000a72 <HAL_GPIO_Init+0x1e2>
 8000a64:	2305      	movs	r3, #5
 8000a66:	e004      	b.n	8000a72 <HAL_GPIO_Init+0x1e2>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e002      	b.n	8000a72 <HAL_GPIO_Init+0x1e2>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <HAL_GPIO_Init+0x1e2>
 8000a70:	2300      	movs	r3, #0
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	f002 0203 	and.w	r2, r2, #3
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a82:	4937      	ldr	r1, [pc, #220]	@ (8000b60 <HAL_GPIO_Init+0x2d0>)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3302      	adds	r3, #2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a90:	4b37      	ldr	r3, [pc, #220]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aba:	4b2d      	ldr	r3, [pc, #180]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ade:	4a24      	ldr	r2, [pc, #144]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ae4:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b08:	4a19      	ldr	r2, [pc, #100]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b32:	4a0f      	ldr	r2, [pc, #60]	@ (8000b70 <HAL_GPIO_Init+0x2e0>)
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa22 f303 	lsr.w	r3, r2, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f47f aea9 	bne.w	80008a0 <HAL_GPIO_Init+0x10>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	bf00      	nop
 8000b52:	371c      	adds	r7, #28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	40010400 	.word	0x40010400

08000b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d102      	bne.n	8000b9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	f000 bff4 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000b9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 816d 	beq.w	8000e8a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bb0:	4bb4      	ldr	r3, [pc, #720]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d00c      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbc:	4bb1      	ldr	r3, [pc, #708]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d157      	bne.n	8000c78 <HAL_RCC_OscConfig+0x104>
 8000bc8:	4bae      	ldr	r3, [pc, #696]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bd4:	d150      	bne.n	8000c78 <HAL_RCC_OscConfig+0x104>
 8000bd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bda:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bde:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000be2:	fa93 f3a3 	rbit	r3, r3
 8000be6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000bea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bee:	fab3 f383 	clz	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bf6:	d802      	bhi.n	8000bfe <HAL_RCC_OscConfig+0x8a>
 8000bf8:	4ba2      	ldr	r3, [pc, #648]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	e015      	b.n	8000c2a <HAL_RCC_OscConfig+0xb6>
 8000bfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c02:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c16:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c1a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000c1e:	fa93 f3a3 	rbit	r3, r3
 8000c22:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000c26:	4b97      	ldr	r3, [pc, #604]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c2e:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000c32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c36:	fa92 f2a2 	rbit	r2, r2
 8000c3a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000c3e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000c42:	fab2 f282 	clz	r2, r2
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	f042 0220 	orr.w	r2, r2, #32
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	f002 021f 	and.w	r2, r2, #31
 8000c52:	2101      	movs	r1, #1
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	4013      	ands	r3, r2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 8114 	beq.w	8000e88 <HAL_RCC_OscConfig+0x314>
 8000c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	f040 810b 	bne.w	8000e88 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	f000 bf85 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c88:	d106      	bne.n	8000c98 <HAL_RCC_OscConfig+0x124>
 8000c8a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a7d      	ldr	r2, [pc, #500]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e036      	b.n	8000d06 <HAL_RCC_OscConfig+0x192>
 8000c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000c9c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x14e>
 8000ca8:	4b76      	ldr	r3, [pc, #472]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a75      	ldr	r2, [pc, #468]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b73      	ldr	r3, [pc, #460]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a72      	ldr	r2, [pc, #456]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	e021      	b.n	8000d06 <HAL_RCC_OscConfig+0x192>
 8000cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cd2:	d10c      	bne.n	8000cee <HAL_RCC_OscConfig+0x17a>
 8000cd4:	4b6b      	ldr	r3, [pc, #428]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b68      	ldr	r3, [pc, #416]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a67      	ldr	r2, [pc, #412]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	e00b      	b.n	8000d06 <HAL_RCC_OscConfig+0x192>
 8000cee:	4b65      	ldr	r3, [pc, #404]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a64      	ldr	r2, [pc, #400]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf8:	6013      	str	r3, [r2, #0]
 8000cfa:	4b62      	ldr	r3, [pc, #392]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a61      	ldr	r2, [pc, #388]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d06:	4b5f      	ldr	r3, [pc, #380]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d0a:	f023 020f 	bic.w	r2, r3, #15
 8000d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	495a      	ldr	r1, [pc, #360]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d054      	beq.n	8000dda <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fcbc 	bl	80006ac <HAL_GetTick>
 8000d34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d38:	e00a      	b.n	8000d50 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3a:	f7ff fcb7 	bl	80006ac <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	@ 0x64
 8000d48:	d902      	bls.n	8000d50 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	f000 bf19 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
 8000d50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d54:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d58:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000d64:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d68:	fab3 f383 	clz	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d70:	d802      	bhi.n	8000d78 <HAL_RCC_OscConfig+0x204>
 8000d72:	4b44      	ldr	r3, [pc, #272]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	e015      	b.n	8000da4 <HAL_RCC_OscConfig+0x230>
 8000d78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d7c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d80:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000d84:	fa93 f3a3 	rbit	r3, r3
 8000d88:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000d8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d90:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000d94:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000d98:	fa93 f3a3 	rbit	r3, r3
 8000d9c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000da0:	4b38      	ldr	r3, [pc, #224]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da8:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000dac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000db0:	fa92 f2a2 	rbit	r2, r2
 8000db4:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000db8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	f042 0220 	orr.w	r2, r2, #32
 8000dc6:	b2d2      	uxtb	r2, r2
 8000dc8:	f002 021f 	and.w	r2, r2, #31
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0b0      	beq.n	8000d3a <HAL_RCC_OscConfig+0x1c6>
 8000dd8:	e057      	b.n	8000e8a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dda:	f7ff fc67 	bl	80006ac <HAL_GetTick>
 8000dde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000de2:	e00a      	b.n	8000dfa <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de4:	f7ff fc62 	bl	80006ac <HAL_GetTick>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b64      	cmp	r3, #100	@ 0x64
 8000df2:	d902      	bls.n	8000dfa <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f000 bec4 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
 8000dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfe:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e02:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000e06:	fa93 f3a3 	rbit	r3, r3
 8000e0a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000e0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e12:	fab3 f383 	clz	r3, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e1a:	d802      	bhi.n	8000e22 <HAL_RCC_OscConfig+0x2ae>
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	e015      	b.n	8000e4e <HAL_RCC_OscConfig+0x2da>
 8000e22:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e26:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e3a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <HAL_RCC_OscConfig+0x310>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e52:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000e56:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000e5a:	fa92 f2a2 	rbit	r2, r2
 8000e5e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000e62:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000e66:	fab2 f282 	clz	r2, r2
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	f042 0220 	orr.w	r2, r2, #32
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	f002 021f 	and.w	r2, r2, #31
 8000e76:	2101      	movs	r1, #1
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1b0      	bne.n	8000de4 <HAL_RCC_OscConfig+0x270>
 8000e82:	e002      	b.n	8000e8a <HAL_RCC_OscConfig+0x316>
 8000e84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e8e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 816c 	beq.w	8001178 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ea0:	4bcc      	ldr	r3, [pc, #816]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 030c 	and.w	r3, r3, #12
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00b      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eac:	4bc9      	ldr	r3, [pc, #804]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 030c 	and.w	r3, r3, #12
 8000eb4:	2b08      	cmp	r3, #8
 8000eb6:	d16d      	bne.n	8000f94 <HAL_RCC_OscConfig+0x420>
 8000eb8:	4bc6      	ldr	r3, [pc, #792]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d167      	bne.n	8000f94 <HAL_RCC_OscConfig+0x420>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ece:	fa93 f3a3 	rbit	r3, r3
 8000ed2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000ed6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	fab3 f383 	clz	r3, r3
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ee2:	d802      	bhi.n	8000eea <HAL_RCC_OscConfig+0x376>
 8000ee4:	4bbb      	ldr	r3, [pc, #748]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	e013      	b.n	8000f12 <HAL_RCC_OscConfig+0x39e>
 8000eea:	2302      	movs	r3, #2
 8000eec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ef0:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000ef4:	fa93 f3a3 	rbit	r3, r3
 8000ef8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f02:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000f06:	fa93 f3a3 	rbit	r3, r3
 8000f0a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f0e:	4bb1      	ldr	r3, [pc, #708]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f12:	2202      	movs	r2, #2
 8000f14:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000f18:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f1c:	fa92 f2a2 	rbit	r2, r2
 8000f20:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000f24:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000f28:	fab2 f282 	clz	r2, r2
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	f002 021f 	and.w	r2, r2, #31
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00a      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3e6>
 8000f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d002      	beq.n	8000f5a <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	f000 be14 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5a:	4b9e      	ldr	r3, [pc, #632]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	21f8      	movs	r1, #248	@ 0xf8
 8000f70:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f74:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000f78:	fa91 f1a1 	rbit	r1, r1
 8000f7c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000f80:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000f84:	fab1 f181 	clz	r1, r1
 8000f88:	b2c9      	uxtb	r1, r1
 8000f8a:	408b      	lsls	r3, r1
 8000f8c:	4991      	ldr	r1, [pc, #580]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	e0f1      	b.n	8001178 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 8083 	beq.w	80010ac <HAL_RCC_OscConfig+0x538>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8000fb0:	fa93 f3a3 	rbit	r3, r3
 8000fb4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8000fb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fbc:	fab3 f383 	clz	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8000fc6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	2301      	movs	r3, #1
 8000fd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fb6b 	bl	80006ac <HAL_GetTick>
 8000fd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fda:	e00a      	b.n	8000ff2 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fdc:	f7ff fb66 	bl	80006ac <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d902      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	f000 bdc8 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ff8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000ffc:	fa93 f3a3 	rbit	r3, r3
 8001000:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001004:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	b2db      	uxtb	r3, r3
 800100e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001010:	d802      	bhi.n	8001018 <HAL_RCC_OscConfig+0x4a4>
 8001012:	4b70      	ldr	r3, [pc, #448]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	e013      	b.n	8001040 <HAL_RCC_OscConfig+0x4cc>
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001030:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800103c:	4b65      	ldr	r3, [pc, #404]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001040:	2202      	movs	r2, #2
 8001042:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001046:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800104a:	fa92 f2a2 	rbit	r2, r2
 800104e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001052:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001056:	fab2 f282 	clz	r2, r2
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	f042 0220 	orr.w	r2, r2, #32
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	f002 021f 	and.w	r2, r2, #31
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0b4      	beq.n	8000fdc <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001072:	4b58      	ldr	r3, [pc, #352]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800107a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800107e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	21f8      	movs	r1, #248	@ 0xf8
 8001088:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001090:	fa91 f1a1 	rbit	r1, r1
 8001094:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001098:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800109c:	fab1 f181 	clz	r1, r1
 80010a0:	b2c9      	uxtb	r1, r1
 80010a2:	408b      	lsls	r3, r1
 80010a4:	494b      	ldr	r1, [pc, #300]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
 80010aa:	e065      	b.n	8001178 <HAL_RCC_OscConfig+0x604>
 80010ac:	2301      	movs	r3, #1
 80010ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80010be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80010cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	461a      	mov	r2, r3
 80010d4:	2300      	movs	r3, #0
 80010d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d8:	f7ff fae8 	bl	80006ac <HAL_GetTick>
 80010dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e0:	e00a      	b.n	80010f8 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e2:	f7ff fae3 	bl	80006ac <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d902      	bls.n	80010f8 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	f000 bd45 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001102:	fa93 f3a3 	rbit	r3, r3
 8001106:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800110a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	fab3 f383 	clz	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b3f      	cmp	r3, #63	@ 0x3f
 8001116:	d802      	bhi.n	800111e <HAL_RCC_OscConfig+0x5aa>
 8001118:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	e013      	b.n	8001146 <HAL_RCC_OscConfig+0x5d2>
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001124:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001128:	fa93 f3a3 	rbit	r3, r3
 800112c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001130:	2302      	movs	r3, #2
 8001132:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001136:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001142:	4b24      	ldr	r3, [pc, #144]	@ (80011d4 <HAL_RCC_OscConfig+0x660>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	2202      	movs	r2, #2
 8001148:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800114c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001150:	fa92 f2a2 	rbit	r2, r2
 8001154:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001158:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	f042 0220 	orr.w	r2, r2, #32
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	f002 021f 	and.w	r2, r2, #31
 800116c:	2101      	movs	r1, #1
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1b4      	bne.n	80010e2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800117c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 8115 	beq.w	80013b8 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800118e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d07e      	beq.n	800129c <HAL_RCC_OscConfig+0x728>
 800119e:	2301      	movs	r3, #1
 80011a0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80011b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011b4:	fab3 f383 	clz	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <HAL_RCC_OscConfig+0x664>)
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	461a      	mov	r2, r3
 80011c4:	2301      	movs	r3, #1
 80011c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c8:	f7ff fa70 	bl	80006ac <HAL_GetTick>
 80011cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d0:	e00f      	b.n	80011f2 <HAL_RCC_OscConfig+0x67e>
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011dc:	f7ff fa66 	bl	80006ac <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d902      	bls.n	80011f2 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	f000 bcc8 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
 80011f2:	2302      	movs	r3, #2
 80011f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80011fc:	fa93 f3a3 	rbit	r3, r3
 8001200:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001208:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800120c:	2202      	movs	r2, #2
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001214:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	fa93 f2a3 	rbit	r2, r3
 800121e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800122c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001230:	2202      	movs	r2, #2
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	fa93 f2a3 	rbit	r2, r3
 8001242:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001246:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800124a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124c:	4bb0      	ldr	r3, [pc, #704]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 800124e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001254:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001258:	2102      	movs	r1, #2
 800125a:	6019      	str	r1, [r3, #0]
 800125c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001260:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	fa93 f1a3 	rbit	r1, r3
 800126a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800126e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001272:	6019      	str	r1, [r3, #0]
  return result;
 8001274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001278:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	fab3 f383 	clz	r3, r3
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001288:	b2db      	uxtb	r3, r3
 800128a:	f003 031f 	and.w	r3, r3, #31
 800128e:	2101      	movs	r1, #1
 8001290:	fa01 f303 	lsl.w	r3, r1, r3
 8001294:	4013      	ands	r3, r2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0a0      	beq.n	80011dc <HAL_RCC_OscConfig+0x668>
 800129a:	e08d      	b.n	80013b8 <HAL_RCC_OscConfig+0x844>
 800129c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012a4:	2201      	movs	r2, #1
 80012a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	fa93 f2a3 	rbit	r2, r3
 80012b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012ba:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012be:	601a      	str	r2, [r3, #0]
  return result;
 80012c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80012c8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b90      	ldr	r3, [pc, #576]	@ (8001514 <HAL_RCC_OscConfig+0x9a0>)
 80012d4:	4413      	add	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	461a      	mov	r2, r3
 80012da:	2300      	movs	r3, #0
 80012dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff f9e5 	bl	80006ac <HAL_GetTick>
 80012e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e6:	e00a      	b.n	80012fe <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e8:	f7ff f9e0 	bl	80006ac <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d902      	bls.n	80012fe <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f000 bc42 	b.w	8001b82 <HAL_RCC_OscConfig+0x100e>
 80012fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001302:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001306:	2202      	movs	r2, #2
 8001308:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800130e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fa93 f2a3 	rbit	r2, r3
 8001318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001326:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800132a:	2202      	movs	r2, #2
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001332:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	fa93 f2a3 	rbit	r2, r3
 800133c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001340:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800134a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800134e:	2202      	movs	r2, #2
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001356:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	fa93 f2a3 	rbit	r2, r3
 8001360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001364:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001368:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136a:	4b69      	ldr	r3, [pc, #420]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 800136c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800136e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001372:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001376:	2102      	movs	r1, #2
 8001378:	6019      	str	r1, [r3, #0]
 800137a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	fa93 f1a3 	rbit	r1, r3
 8001388:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800138c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001390:	6019      	str	r1, [r3, #0]
  return result;
 8001392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001396:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	fab3 f383 	clz	r3, r3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 031f 	and.w	r3, r3, #31
 80013ac:	2101      	movs	r1, #1
 80013ae:	fa01 f303 	lsl.w	r3, r1, r3
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d197      	bne.n	80012e8 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 819e 	beq.w	800170a <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d116      	bne.n	800140e <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	61d3      	str	r3, [r2, #28]
 80013ec:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80013f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001402:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001406:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001408:	2301      	movs	r3, #1
 800140a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140e:	4b42      	ldr	r3, [pc, #264]	@ (8001518 <HAL_RCC_OscConfig+0x9a4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d11a      	bne.n	8001450 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141a:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <HAL_RCC_OscConfig+0x9a4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a3e      	ldr	r2, [pc, #248]	@ (8001518 <HAL_RCC_OscConfig+0x9a4>)
 8001420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001424:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001426:	f7ff f941 	bl	80006ac <HAL_GetTick>
 800142a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142e:	e009      	b.n	8001444 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001430:	f7ff f93c 	bl	80006ac <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b64      	cmp	r3, #100	@ 0x64
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e39e      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001444:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <HAL_RCC_OscConfig+0x9a4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ef      	beq.n	8001430 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001454:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d106      	bne.n	800146e <HAL_RCC_OscConfig+0x8fa>
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4a2a      	ldr	r2, [pc, #168]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6213      	str	r3, [r2, #32]
 800146c:	e035      	b.n	80014da <HAL_RCC_OscConfig+0x966>
 800146e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001472:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x924>
 800147e:	4b24      	ldr	r3, [pc, #144]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a23      	ldr	r2, [pc, #140]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a20      	ldr	r2, [pc, #128]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	e020      	b.n	80014da <HAL_RCC_OscConfig+0x966>
 8001498:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x94e>
 80014a8:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a15      	ldr	r2, [pc, #84]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e00b      	b.n	80014da <HAL_RCC_OscConfig+0x966>
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6213      	str	r3, [r2, #32]
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <HAL_RCC_OscConfig+0x99c>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8087 	beq.w	80015fa <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff f8de 	bl	80006ac <HAL_GetTick>
 80014f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e012      	b.n	800151c <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff f8d9 	bl	80006ac <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001506:	4293      	cmp	r3, r2
 8001508:	d908      	bls.n	800151c <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e339      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	10908120 	.word	0x10908120
 8001518:	40007000 	.word	0x40007000
 800151c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001520:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	fa93 f2a3 	rbit	r2, r3
 8001536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001544:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001548:	2202      	movs	r2, #2
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001550:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	fa93 f2a3 	rbit	r2, r3
 800155a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800155e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001562:	601a      	str	r2, [r3, #0]
  return result;
 8001564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001568:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800156c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	fab3 f383 	clz	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_RCC_OscConfig+0xa10>
 800157e:	4b98      	ldr	r3, [pc, #608]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	e013      	b.n	80015ac <HAL_RCC_OscConfig+0xa38>
 8001584:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001588:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001594:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	fa93 f2a3 	rbit	r2, r3
 800159e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	4b8d      	ldr	r3, [pc, #564]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 80015aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015b0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80015b4:	2102      	movs	r1, #2
 80015b6:	6011      	str	r1, [r2, #0]
 80015b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	fa92 f1a2 	rbit	r1, r2
 80015c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015ca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015ce:	6011      	str	r1, [r2, #0]
  return result;
 80015d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80015d4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	fab2 f282 	clz	r2, r2
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	f002 021f 	and.w	r2, r2, #31
 80015ea:	2101      	movs	r1, #1
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	4013      	ands	r3, r2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f43f af7f 	beq.w	80014f6 <HAL_RCC_OscConfig+0x982>
 80015f8:	e07d      	b.n	80016f6 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fa:	f7ff f857 	bl	80006ac <HAL_GetTick>
 80015fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	e00b      	b.n	800161c <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff f852 	bl	80006ac <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001614:	4293      	cmp	r3, r2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e2b2      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
 800161c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001620:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001624:	2202      	movs	r2, #2
 8001626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	fa93 f2a3 	rbit	r2, r3
 8001636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001644:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001648:	2202      	movs	r2, #2
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001650:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f2a3 	rbit	r2, r3
 800165a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800165e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001662:	601a      	str	r2, [r3, #0]
  return result;
 8001664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001668:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800166c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	fab3 f383 	clz	r3, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d102      	bne.n	8001684 <HAL_RCC_OscConfig+0xb10>
 800167e:	4b58      	ldr	r3, [pc, #352]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	e013      	b.n	80016ac <HAL_RCC_OscConfig+0xb38>
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800168c:	2202      	movs	r2, #2
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001694:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	fa93 f2a3 	rbit	r2, r3
 800169e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b4d      	ldr	r3, [pc, #308]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016b0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80016b4:	2102      	movs	r1, #2
 80016b6:	6011      	str	r1, [r2, #0]
 80016b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016bc:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	fa92 f1a2 	rbit	r1, r2
 80016c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016ca:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016ce:	6011      	str	r1, [r2, #0]
  return result;
 80016d0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80016d4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	f002 021f 	and.w	r2, r2, #31
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f202 	lsl.w	r2, r1, r2
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d186      	bne.n	8001604 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016f6:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d105      	bne.n	800170a <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fe:	4b38      	ldr	r3, [pc, #224]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	4a37      	ldr	r2, [pc, #220]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 8001704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001708:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800170a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8232 	beq.w	8001b80 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800171c:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b08      	cmp	r3, #8
 8001726:	f000 8201 	beq.w	8001b2c <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800172e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	2b02      	cmp	r3, #2
 8001738:	f040 8157 	bne.w	80019ea <HAL_RCC_OscConfig+0xe76>
 800173c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001740:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001748:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	fa93 f2a3 	rbit	r2, r3
 8001758:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800175c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001760:	601a      	str	r2, [r3, #0]
  return result;
 8001762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001766:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800176a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	fab3 f383 	clz	r3, r3
 8001770:	b2db      	uxtb	r3, r3
 8001772:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001776:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	461a      	mov	r2, r3
 800177e:	2300      	movs	r3, #0
 8001780:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7fe ff93 	bl	80006ac <HAL_GetTick>
 8001786:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	e009      	b.n	80017a0 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178c:	f7fe ff8e 	bl	80006ac <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e1f0      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
 80017a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80017a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	fa93 f2a3 	rbit	r2, r3
 80017bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017c4:	601a      	str	r2, [r3, #0]
  return result;
 80017c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80017ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	fab3 f383 	clz	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80017d8:	d804      	bhi.n	80017e4 <HAL_RCC_OscConfig+0xc70>
 80017da:	4b01      	ldr	r3, [pc, #4]	@ (80017e0 <HAL_RCC_OscConfig+0xc6c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	e029      	b.n	8001834 <HAL_RCC_OscConfig+0xcc0>
 80017e0:	40021000 	.word	0x40021000
 80017e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80017f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	fa93 f2a3 	rbit	r2, r3
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800180e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001812:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fa93 f2a3 	rbit	r2, r3
 8001826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800182a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	4bc3      	ldr	r3, [pc, #780]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 8001832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001838:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800183c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001840:	6011      	str	r1, [r2, #0]
 8001842:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001846:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800184a:	6812      	ldr	r2, [r2, #0]
 800184c:	fa92 f1a2 	rbit	r1, r2
 8001850:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001854:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001858:	6011      	str	r1, [r2, #0]
  return result;
 800185a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800185e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	fab2 f282 	clz	r2, r2
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	f042 0220 	orr.w	r2, r2, #32
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f002 021f 	and.w	r2, r2, #31
 8001874:	2101      	movs	r1, #1
 8001876:	fa01 f202 	lsl.w	r2, r1, r2
 800187a:	4013      	ands	r3, r2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d185      	bne.n	800178c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4baf      	ldr	r3, [pc, #700]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001898:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	49a7      	ldr	r1, [pc, #668]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
 80018a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ac:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80018b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ba:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fa93 f2a3 	rbit	r2, r3
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018cc:	601a      	str	r2, [r3, #0]
  return result;
 80018ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80018d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d8:	fab3 f383 	clz	r3, r3
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	461a      	mov	r2, r3
 80018ea:	2301      	movs	r3, #1
 80018ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7fe fedd 	bl	80006ac <HAL_GetTick>
 80018f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f6:	e009      	b.n	800190c <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe fed8 	bl	80006ac <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e13a      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
 800190c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001910:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001914:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001918:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800191e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001930:	601a      	str	r2, [r3, #0]
  return result;
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800193a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b3f      	cmp	r3, #63	@ 0x3f
 8001944:	d802      	bhi.n	800194c <HAL_RCC_OscConfig+0xdd8>
 8001946:	4b7e      	ldr	r3, [pc, #504]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	e027      	b.n	800199c <HAL_RCC_OscConfig+0xe28>
 800194c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001950:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001954:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001958:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	fa93 f2a3 	rbit	r2, r3
 8001968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001976:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800197a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001984:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	fa93 f2a3 	rbit	r2, r3
 800198e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001992:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b69      	ldr	r3, [pc, #420]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019a0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80019a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80019a8:	6011      	str	r1, [r2, #0]
 80019aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019ae:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	fa92 f1a2 	rbit	r1, r2
 80019b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019c0:	6011      	str	r1, [r2, #0]
  return result;
 80019c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80019c6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	fab2 f282 	clz	r2, r2
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	f042 0220 	orr.w	r2, r2, #32
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f002 021f 	and.w	r2, r2, #31
 80019dc:	2101      	movs	r1, #1
 80019de:	fa01 f202 	lsl.w	r2, r1, r2
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d087      	beq.n	80018f8 <HAL_RCC_OscConfig+0xd84>
 80019e8:	e0ca      	b.n	8001b80 <HAL_RCC_OscConfig+0x100c>
 80019ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ee:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80019f2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	fa93 f2a3 	rbit	r2, r3
 8001a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a0e:	601a      	str	r2, [r3, #0]
  return result;
 8001a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a14:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001a18:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	fab3 f383 	clz	r3, r3
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a24:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe fe3c 	bl	80006ac <HAL_GetTick>
 8001a34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7fe fe37 	bl	80006ac <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e099      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
 8001a4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a52:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a60:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a72:	601a      	str	r2, [r3, #0]
  return result;
 8001a74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a78:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001a7c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a86:	d802      	bhi.n	8001a8e <HAL_RCC_OscConfig+0xf1a>
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	e027      	b.n	8001ade <HAL_RCC_OscConfig+0xf6a>
 8001a8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a92:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001a96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001abc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ac6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	fa93 f2a3 	rbit	r2, r3
 8001ad0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ad4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_RCC_OscConfig+0xfcc>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ae2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001ae6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001aea:	6011      	str	r1, [r2, #0]
 8001aec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001af0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	fa92 f1a2 	rbit	r1, r2
 8001afa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001afe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b02:	6011      	str	r1, [r2, #0]
  return result;
 8001b04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b08:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	fab2 f282 	clz	r2, r2
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	f042 0220 	orr.w	r2, r2, #32
 8001b18:	b2d2      	uxtb	r2, r2
 8001b1a:	f002 021f 	and.w	r2, r2, #31
 8001b1e:	2101      	movs	r1, #1
 8001b20:	fa01 f202 	lsl.w	r2, r1, r2
 8001b24:	4013      	ands	r3, r2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d187      	bne.n	8001a3a <HAL_RCC_OscConfig+0xec6>
 8001b2a:	e029      	b.n	8001b80 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d103      	bne.n	8001b44 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e020      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
 8001b40:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_RCC_OscConfig+0x1018>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b4c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001b68:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b09e      	sub	sp, #120	@ 0x78
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e154      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b89      	ldr	r3, [pc, #548]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d910      	bls.n	8001bd8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b86      	ldr	r3, [pc, #536]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4984      	ldr	r1, [pc, #528]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b82      	ldr	r3, [pc, #520]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e13c      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be4:	4b7b      	ldr	r3, [pc, #492]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4978      	ldr	r1, [pc, #480]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 80cd 	beq.w	8001d9e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d137      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xec>
 8001c0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c10:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c24:	d802      	bhi.n	8001c2c <HAL_RCC_ClockConfig+0x9c>
 8001c26:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_ClockConfig+0xbc>
 8001c2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c34:	fa93 f3a3 	rbit	r3, r3
 8001c38:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c42:	fa93 f3a3 	rbit	r3, r3
 8001c46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c48:	4b62      	ldr	r3, [pc, #392]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c50:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001c52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001c54:	fa92 f2a2 	rbit	r2, r2
 8001c58:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001c5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d171      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0ea      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d137      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0x164>
 8001c84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c9c:	d802      	bhi.n	8001ca4 <HAL_RCC_ClockConfig+0x114>
 8001c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x134>
 8001ca4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001cc0:	4b44      	ldr	r3, [pc, #272]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cc8:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001cca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001ccc:	fa92 f2a2 	rbit	r2, r2
 8001cd0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cd4:	fab2 f282 	clz	r2, r2
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	f042 0220 	orr.w	r2, r2, #32
 8001cde:	b2d2      	uxtb	r2, r2
 8001ce0:	f002 021f 	and.w	r2, r2, #31
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d135      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0ae      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d0a:	d802      	bhi.n	8001d12 <HAL_RCC_ClockConfig+0x182>
 8001d0c:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e00d      	b.n	8001d2e <HAL_RCC_ClockConfig+0x19e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1e:	2302      	movs	r3, #2
 8001d20:	623b      	str	r3, [r7, #32]
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2202      	movs	r2, #2
 8001d30:	61ba      	str	r2, [r7, #24]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	fa92 f2a2 	rbit	r2, r2
 8001d38:	617a      	str	r2, [r7, #20]
  return result;
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e07a      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 0203 	bic.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	491a      	ldr	r1, [pc, #104]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d6e:	f7fe fc9d 	bl	80006ac <HAL_GetTick>
 8001d72:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d74:	e00a      	b.n	8001d8c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d76:	f7fe fc99 	bl	80006ac <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e062      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 020c 	and.w	r2, r3, #12
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d1eb      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d215      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 0207 	bic.w	r2, r3, #7
 8001db4:	4906      	ldr	r1, [pc, #24]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <HAL_RCC_ClockConfig+0x240>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d006      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e041      	b.n	8001e52 <HAL_RCC_ClockConfig+0x2c2>
 8001dce:	bf00      	nop
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <HAL_RCC_ClockConfig+0x2cc>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	491a      	ldr	r1, [pc, #104]	@ (8001e5c <HAL_RCC_ClockConfig+0x2cc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <HAL_RCC_ClockConfig+0x2cc>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4912      	ldr	r1, [pc, #72]	@ (8001e5c <HAL_RCC_ClockConfig+0x2cc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e16:	f000 f829 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <HAL_RCC_ClockConfig+0x2cc>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e24:	22f0      	movs	r2, #240	@ 0xf0
 8001e26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	fa92 f2a2 	rbit	r2, r2
 8001e2e:	60fa      	str	r2, [r7, #12]
  return result;
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	fab2 f282 	clz	r2, r2
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	40d3      	lsrs	r3, r2
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_RCC_ClockConfig+0x2d0>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001e42:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_RCC_ClockConfig+0x2d4>)
 8001e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_RCC_ClockConfig+0x2d8>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fbea 	bl	8000624 <HAL_InitTick>
  
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3778      	adds	r7, #120	@ 0x78
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	08002bfc 	.word	0x08002bfc
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004

08001e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001e86:	4b1e      	ldr	r3, [pc, #120]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x36>
 8001e9a:	e026      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e9e:	613b      	str	r3, [r7, #16]
      break;
 8001ea0:	e026      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	0c9b      	lsrs	r3, r3, #18
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a17      	ldr	r2, [pc, #92]	@ (8001f08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eac:	5cd3      	ldrb	r3, [r2, r3]
 8001eae:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	4a14      	ldr	r2, [pc, #80]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001eba:	5cd3      	ldrb	r3, [r2, r3]
 8001ebc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e004      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
      break;
 8001ee8:	e002      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eec:	613b      	str	r3, [r7, #16]
      break;
 8001eee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ef0:	693b      	ldr	r3, [r7, #16]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	007a1200 	.word	0x007a1200
 8001f08:	08002c14 	.word	0x08002c14
 8001f0c:	08002c24 	.word	0x08002c24
 8001f10:	003d0900 	.word	0x003d0900

08001f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f18:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000000 	.word	0x20000000

08001f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f32:	f7ff ffef 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f36:	4601      	mov	r1, r0
 8001f38:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f40:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001f44:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	fa92 f2a2 	rbit	r2, r2
 8001f4c:	603a      	str	r2, [r7, #0]
  return result;
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	fab2 f282 	clz	r2, r2
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	40d3      	lsrs	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	@ (8001f6c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f5a:	5cd3      	ldrb	r3, [r2, r3]
 8001f5c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	08002c0c 	.word	0x08002c0c

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f76:	f7ff ffcd 	bl	8001f14 <HAL_RCC_GetHCLKFreq>
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8001f84:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8001f88:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	fa92 f2a2 	rbit	r2, r2
 8001f90:	603a      	str	r2, [r7, #0]
  return result;
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	fab2 f282 	clz	r2, r2
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	40d3      	lsrs	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f9e:	5cd3      	ldrb	r3, [r2, r3]
 8001fa0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	08002c0c 	.word	0x08002c0c

08001fb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e097      	b.n	80020f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d106      	bne.n	8001fe2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7fe fa1b 	bl	8000418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8001ff8:	f023 0307 	bic.w	r3, r3, #7
 8001ffc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f000 f907 	bl	800221c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002036:	f023 0303 	bic.w	r3, r3, #3
 800203a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	4313      	orrs	r3, r2
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002054:	f023 030c 	bic.w	r3, r3, #12
 8002058:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002060:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	4313      	orrs	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	011a      	lsls	r2, r3, #4
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	031b      	lsls	r3, r3, #12
 8002084:	4313      	orrs	r3, r2
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002092:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800209a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	4313      	orrs	r3, r2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002110:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002118:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002120:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002128:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d110      	bne.n	8002152 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d102      	bne.n	800213c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002136:	7b7b      	ldrb	r3, [r7, #13]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d001      	beq.n	8002140 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e069      	b.n	8002214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002150:	e031      	b.n	80021b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b04      	cmp	r3, #4
 8002156:	d110      	bne.n	800217a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002158:	7bbb      	ldrb	r3, [r7, #14]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800215e:	7b3b      	ldrb	r3, [r7, #12]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d001      	beq.n	8002168 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e055      	b.n	8002214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002178:	e01d      	b.n	80021b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d108      	bne.n	8002192 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d105      	bne.n	8002192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002186:	7b7b      	ldrb	r3, [r7, #13]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d001      	beq.n	8002196 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e03e      	b.n	8002214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2202      	movs	r2, #2
 80021a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2202      	movs	r2, #2
 80021b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_TIM_Encoder_Start+0xc4>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d008      	beq.n	80021d4 <HAL_TIM_Encoder_Start+0xd4>
 80021c2:	e00f      	b.n	80021e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f8a9 	bl	8002324 <TIM_CCxChannelCmd>
      break;
 80021d2:	e016      	b.n	8002202 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2201      	movs	r2, #1
 80021da:	2104      	movs	r1, #4
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 f8a1 	bl	8002324 <TIM_CCxChannelCmd>
      break;
 80021e2:	e00e      	b.n	8002202 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	2100      	movs	r1, #0
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f899 	bl	8002324 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	2104      	movs	r1, #4
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f892 	bl	8002324 <TIM_CCxChannelCmd>
      break;
 8002200:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a38      	ldr	r2, [pc, #224]	@ (8002310 <TIM_Base_SetConfig+0xf4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <TIM_Base_SetConfig+0x28>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0x28>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a35      	ldr	r2, [pc, #212]	@ (8002314 <TIM_Base_SetConfig+0xf8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800224a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2d      	ldr	r2, [pc, #180]	@ (8002310 <TIM_Base_SetConfig+0xf4>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <TIM_Base_SetConfig+0x6a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d00f      	beq.n	8002286 <TIM_Base_SetConfig+0x6a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2a      	ldr	r2, [pc, #168]	@ (8002314 <TIM_Base_SetConfig+0xf8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00b      	beq.n	8002286 <TIM_Base_SetConfig+0x6a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a29      	ldr	r2, [pc, #164]	@ (8002318 <TIM_Base_SetConfig+0xfc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d007      	beq.n	8002286 <TIM_Base_SetConfig+0x6a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a28      	ldr	r2, [pc, #160]	@ (800231c <TIM_Base_SetConfig+0x100>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d003      	beq.n	8002286 <TIM_Base_SetConfig+0x6a>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a27      	ldr	r2, [pc, #156]	@ (8002320 <TIM_Base_SetConfig+0x104>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d108      	bne.n	8002298 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800228c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	4313      	orrs	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <TIM_Base_SetConfig+0xf4>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00b      	beq.n	80022dc <TIM_Base_SetConfig+0xc0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a14      	ldr	r2, [pc, #80]	@ (8002318 <TIM_Base_SetConfig+0xfc>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d007      	beq.n	80022dc <TIM_Base_SetConfig+0xc0>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a13      	ldr	r2, [pc, #76]	@ (800231c <TIM_Base_SetConfig+0x100>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <TIM_Base_SetConfig+0xc0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <TIM_Base_SetConfig+0x104>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d103      	bne.n	80022e4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f023 0201 	bic.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]
  }
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40000400 	.word	0x40000400
 8002318:	40014000 	.word	0x40014000
 800231c:	40014400 	.word	0x40014400
 8002320:	40014800 	.word	0x40014800

08002324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2201      	movs	r2, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a1a      	ldr	r2, [r3, #32]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	43db      	mvns	r3, r3
 8002346:	401a      	ands	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a1a      	ldr	r2, [r3, #32]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	fa01 f303 	lsl.w	r3, r1, r3
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	621a      	str	r2, [r3, #32]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002384:	2302      	movs	r3, #2
 8002386:	e054      	b.n	8002432 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d108      	bne.n	80023c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80023b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a17      	ldr	r2, [pc, #92]	@ (8002440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00e      	beq.n	8002406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f0:	d009      	beq.n	8002406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d004      	beq.n	8002406 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a11      	ldr	r2, [pc, #68]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10c      	bne.n	8002420 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800240c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	4313      	orrs	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40012c00 	.word	0x40012c00
 8002444:	40000400 	.word	0x40000400
 8002448:	40014000 	.word	0x40014000

0800244c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e040      	b.n	80024e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe f812 	bl	8000498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2224      	movs	r2, #36	@ 0x24
 8002478:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f95e 	bl	8002754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f825 	bl	80024e8 <UART_SetConfig>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e01b      	b.n	80024e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f9dd 	bl	8002898 <UART_CheckIdleState>
 80024de:	4603      	mov	r3, r0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b8a      	ldr	r3, [pc, #552]	@ (800273c <UART_SetConfig+0x254>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	430b      	orrs	r3, r1
 800251e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	4313      	orrs	r3, r2
 8002544:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	430a      	orrs	r2, r1
 8002558:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a78      	ldr	r2, [pc, #480]	@ (8002740 <UART_SetConfig+0x258>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d120      	bne.n	80025a6 <UART_SetConfig+0xbe>
 8002564:	4b77      	ldr	r3, [pc, #476]	@ (8002744 <UART_SetConfig+0x25c>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d817      	bhi.n	80025a0 <UART_SetConfig+0xb8>
 8002570:	a201      	add	r2, pc, #4	@ (adr r2, 8002578 <UART_SetConfig+0x90>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	08002589 	.word	0x08002589
 800257c:	08002595 	.word	0x08002595
 8002580:	0800259b 	.word	0x0800259b
 8002584:	0800258f 	.word	0x0800258f
 8002588:	2300      	movs	r3, #0
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e01d      	b.n	80025ca <UART_SetConfig+0xe2>
 800258e:	2302      	movs	r3, #2
 8002590:	77fb      	strb	r3, [r7, #31]
 8002592:	e01a      	b.n	80025ca <UART_SetConfig+0xe2>
 8002594:	2304      	movs	r3, #4
 8002596:	77fb      	strb	r3, [r7, #31]
 8002598:	e017      	b.n	80025ca <UART_SetConfig+0xe2>
 800259a:	2308      	movs	r3, #8
 800259c:	77fb      	strb	r3, [r7, #31]
 800259e:	e014      	b.n	80025ca <UART_SetConfig+0xe2>
 80025a0:	2310      	movs	r3, #16
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e011      	b.n	80025ca <UART_SetConfig+0xe2>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a67      	ldr	r2, [pc, #412]	@ (8002748 <UART_SetConfig+0x260>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d102      	bne.n	80025b6 <UART_SetConfig+0xce>
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
 80025b4:	e009      	b.n	80025ca <UART_SetConfig+0xe2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a64      	ldr	r2, [pc, #400]	@ (800274c <UART_SetConfig+0x264>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d102      	bne.n	80025c6 <UART_SetConfig+0xde>
 80025c0:	2300      	movs	r3, #0
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e001      	b.n	80025ca <UART_SetConfig+0xe2>
 80025c6:	2310      	movs	r3, #16
 80025c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025d2:	d15a      	bne.n	800268a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d827      	bhi.n	800262a <UART_SetConfig+0x142>
 80025da:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <UART_SetConfig+0xf8>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	08002605 	.word	0x08002605
 80025e4:	0800260d 	.word	0x0800260d
 80025e8:	08002615 	.word	0x08002615
 80025ec:	0800262b 	.word	0x0800262b
 80025f0:	0800261b 	.word	0x0800261b
 80025f4:	0800262b 	.word	0x0800262b
 80025f8:	0800262b 	.word	0x0800262b
 80025fc:	0800262b 	.word	0x0800262b
 8002600:	08002623 	.word	0x08002623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002604:	f7ff fc92 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 8002608:	61b8      	str	r0, [r7, #24]
        break;
 800260a:	e013      	b.n	8002634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800260c:	f7ff fcb0 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002610:	61b8      	str	r0, [r7, #24]
        break;
 8002612:	e00f      	b.n	8002634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002614:	4b4e      	ldr	r3, [pc, #312]	@ (8002750 <UART_SetConfig+0x268>)
 8002616:	61bb      	str	r3, [r7, #24]
        break;
 8002618:	e00c      	b.n	8002634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800261a:	f7ff fc27 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 800261e:	61b8      	str	r0, [r7, #24]
        break;
 8002620:	e008      	b.n	8002634 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002626:	61bb      	str	r3, [r7, #24]
        break;
 8002628:	e004      	b.n	8002634 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	77bb      	strb	r3, [r7, #30]
        break;
 8002632:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d074      	beq.n	8002724 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	005a      	lsls	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	fbb2 f3f3 	udiv	r3, r2, r3
 800264e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b0f      	cmp	r3, #15
 8002654:	d916      	bls.n	8002684 <UART_SetConfig+0x19c>
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800265c:	d212      	bcs.n	8002684 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	b29b      	uxth	r3, r3
 8002662:	f023 030f 	bic.w	r3, r3, #15
 8002666:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	b29b      	uxth	r3, r3
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	b29a      	uxth	r2, r3
 8002674:	89fb      	ldrh	r3, [r7, #14]
 8002676:	4313      	orrs	r3, r2
 8002678:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	89fa      	ldrh	r2, [r7, #14]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	e04f      	b.n	8002724 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	77bb      	strb	r3, [r7, #30]
 8002688:	e04c      	b.n	8002724 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	2b08      	cmp	r3, #8
 800268e:	d828      	bhi.n	80026e2 <UART_SetConfig+0x1fa>
 8002690:	a201      	add	r2, pc, #4	@ (adr r2, 8002698 <UART_SetConfig+0x1b0>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026bd 	.word	0x080026bd
 800269c:	080026c5 	.word	0x080026c5
 80026a0:	080026cd 	.word	0x080026cd
 80026a4:	080026e3 	.word	0x080026e3
 80026a8:	080026d3 	.word	0x080026d3
 80026ac:	080026e3 	.word	0x080026e3
 80026b0:	080026e3 	.word	0x080026e3
 80026b4:	080026e3 	.word	0x080026e3
 80026b8:	080026db 	.word	0x080026db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026bc:	f7ff fc36 	bl	8001f2c <HAL_RCC_GetPCLK1Freq>
 80026c0:	61b8      	str	r0, [r7, #24]
        break;
 80026c2:	e013      	b.n	80026ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80026c4:	f7ff fc54 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 80026c8:	61b8      	str	r0, [r7, #24]
        break;
 80026ca:	e00f      	b.n	80026ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80026cc:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <UART_SetConfig+0x268>)
 80026ce:	61bb      	str	r3, [r7, #24]
        break;
 80026d0:	e00c      	b.n	80026ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026d2:	f7ff fbcb 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 80026d6:	61b8      	str	r0, [r7, #24]
        break;
 80026d8:	e008      	b.n	80026ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026de:	61bb      	str	r3, [r7, #24]
        break;
 80026e0:	e004      	b.n	80026ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	77bb      	strb	r3, [r7, #30]
        break;
 80026ea:	bf00      	nop
    }

    if (pclk != 0U)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d018      	beq.n	8002724 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	085a      	lsrs	r2, r3, #1
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	441a      	add	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b0f      	cmp	r3, #15
 800270a:	d909      	bls.n	8002720 <UART_SetConfig+0x238>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002712:	d205      	bcs.n	8002720 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	e001      	b.n	8002724 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002730:	7fbb      	ldrb	r3, [r7, #30]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	efff69f3 	.word	0xefff69f3
 8002740:	40013800 	.word	0x40013800
 8002744:	40021000 	.word	0x40021000
 8002748:	40004400 	.word	0x40004400
 800274c:	40004800 	.word	0x40004800
 8002750:	007a1200 	.word	0x007a1200

08002754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01a      	beq.n	800286a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002852:	d10a      	bne.n	800286a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	430a      	orrs	r2, r1
 8002868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00a      	beq.n	800288c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	605a      	str	r2, [r3, #4]
  }
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b098      	sub	sp, #96	@ 0x60
 800289c:	af02      	add	r7, sp, #8
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028a8:	f7fd ff00 	bl	80006ac <HAL_GetTick>
 80028ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d12e      	bne.n	800291a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c4:	2200      	movs	r2, #0
 80028c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f88c 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d021      	beq.n	800291a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028de:	e853 3f00 	ldrex	r3, [r3]
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80028f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e6      	bne.n	80028d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e062      	b.n	80029e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d149      	bne.n	80029bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002928:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002930:	2200      	movs	r2, #0
 8002932:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f856 	bl	80029e8 <UART_WaitOnFlagUntilTimeout>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d03c      	beq.n	80029bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	e853 3f00 	ldrex	r3, [r3]
 800294e:	623b      	str	r3, [r7, #32]
   return(result);
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002960:	633b      	str	r3, [r7, #48]	@ 0x30
 8002962:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e6      	bne.n	8002942 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3308      	adds	r3, #8
 800297a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	60fb      	str	r3, [r7, #12]
   return(result);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3308      	adds	r3, #8
 8002992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002994:	61fa      	str	r2, [r7, #28]
 8002996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	69b9      	ldr	r1, [r7, #24]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	617b      	str	r3, [r7, #20]
   return(result);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e5      	bne.n	8002974 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2220      	movs	r2, #32
 80029ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e011      	b.n	80029e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3758      	adds	r7, #88	@ 0x58
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	4613      	mov	r3, r2
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029f8:	e04f      	b.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a00:	d04b      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fd fe53 	bl	80006ac <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e04e      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d037      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b80      	cmp	r3, #128	@ 0x80
 8002a2e:	d034      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b40      	cmp	r3, #64	@ 0x40
 8002a34:	d031      	beq.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d110      	bne.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f838 	bl	8002ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2208      	movs	r2, #8
 8002a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e029      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a74:	d111      	bne.n	8002a9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f81e 	bl	8002ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e00f      	b.n	8002aba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69da      	ldr	r2, [r3, #28]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d0a0      	beq.n	80029fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b095      	sub	sp, #84	@ 0x54
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad2:	e853 3f00 	ldrex	r3, [r3]
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002af0:	e841 2300 	strex	r3, r2, [r1]
 8002af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e6      	bne.n	8002aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3308      	adds	r3, #8
 8002b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	e853 3f00 	ldrex	r3, [r3]
 8002b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f023 0301 	bic.w	r3, r3, #1
 8002b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	3308      	adds	r3, #8
 8002b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b24:	e841 2300 	strex	r3, r2, [r1]
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e5      	bne.n	8002afc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d118      	bne.n	8002b6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f023 0310 	bic.w	r3, r3, #16
 8002b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b56:	61bb      	str	r3, [r7, #24]
 8002b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	6979      	ldr	r1, [r7, #20]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	e841 2300 	strex	r3, r2, [r1]
 8002b62:	613b      	str	r3, [r7, #16]
   return(result);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e6      	bne.n	8002b38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002b7e:	bf00      	nop
 8002b80:	3754      	adds	r7, #84	@ 0x54
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <memset>:
 8002b8a:	4402      	add	r2, r0
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d100      	bne.n	8002b94 <memset+0xa>
 8002b92:	4770      	bx	lr
 8002b94:	f803 1b01 	strb.w	r1, [r3], #1
 8002b98:	e7f9      	b.n	8002b8e <memset+0x4>
	...

08002b9c <__libc_init_array>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bd4 <__libc_init_array+0x38>)
 8002ba0:	4c0d      	ldr	r4, [pc, #52]	@ (8002bd8 <__libc_init_array+0x3c>)
 8002ba2:	1b64      	subs	r4, r4, r5
 8002ba4:	10a4      	asrs	r4, r4, #2
 8002ba6:	2600      	movs	r6, #0
 8002ba8:	42a6      	cmp	r6, r4
 8002baa:	d109      	bne.n	8002bc0 <__libc_init_array+0x24>
 8002bac:	4d0b      	ldr	r5, [pc, #44]	@ (8002bdc <__libc_init_array+0x40>)
 8002bae:	4c0c      	ldr	r4, [pc, #48]	@ (8002be0 <__libc_init_array+0x44>)
 8002bb0:	f000 f818 	bl	8002be4 <_init>
 8002bb4:	1b64      	subs	r4, r4, r5
 8002bb6:	10a4      	asrs	r4, r4, #2
 8002bb8:	2600      	movs	r6, #0
 8002bba:	42a6      	cmp	r6, r4
 8002bbc:	d105      	bne.n	8002bca <__libc_init_array+0x2e>
 8002bbe:	bd70      	pop	{r4, r5, r6, pc}
 8002bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc4:	4798      	blx	r3
 8002bc6:	3601      	adds	r6, #1
 8002bc8:	e7ee      	b.n	8002ba8 <__libc_init_array+0xc>
 8002bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bce:	4798      	blx	r3
 8002bd0:	3601      	adds	r6, #1
 8002bd2:	e7f2      	b.n	8002bba <__libc_init_array+0x1e>
 8002bd4:	08002c34 	.word	0x08002c34
 8002bd8:	08002c34 	.word	0x08002c34
 8002bdc:	08002c34 	.word	0x08002c34
 8002be0:	08002c38 	.word	0x08002c38

08002be4 <_init>:
 8002be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be6:	bf00      	nop
 8002be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bea:	bc08      	pop	{r3}
 8002bec:	469e      	mov	lr, r3
 8002bee:	4770      	bx	lr

08002bf0 <_fini>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

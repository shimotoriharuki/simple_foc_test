
simple_foc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005864  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  080059ec  080059ec  000069ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b28  08005b28  000071b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005b28  08005b28  000071b8  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005b28  08005b28  000071b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b28  08005b28  00006b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  08005b34  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000071b8  2**0
                  CONTENTS
 10 .bss          00000440  200001b8  200001b8  000071b8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005f8  200005f8  000071b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000071b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145fd  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b7  00000000  00000000  0001b7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001e9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b8e  00000000  00000000  0001f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f8eb  00000000  00000000  0002042e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013200  00000000  00000000  0003fd19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab5e3  00000000  00000000  00052f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe4fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000403c  00000000  00000000  000fe540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0010257c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001b8 	.word	0x200001b8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059d4 	.word	0x080059d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001bc 	.word	0x200001bc
 80001c4:	080059d4 	.word	0x080059d4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	ed87 0a01 	vstr	s0, [r7, #4]
 800079e:	edd7 7a01 	vldr	s15, [r7, #4]
 80007a2:	eef0 7ae7 	vabs.f32	s15, s15
 80007a6:	eeb0 0a67 	vmov.f32	s0, s15
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <_ZN9BLDCMotorC1Eifff>:
// BLDCMotor( int pp , float R)
// - pp            - pole pair number
// - R             - motor phase resistance
// - KV            - motor kv rating (rmp/v)
// - L             - motor phase inductance
BLDCMotor::BLDCMotor(int pp, float _R, float _KV, float _inductance)
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6178      	str	r0, [r7, #20]
 80007bc:	6139      	str	r1, [r7, #16]
 80007be:	ed87 0a03 	vstr	s0, [r7, #12]
 80007c2:	edc7 0a02 	vstr	s1, [r7, #8]
 80007c6:	ed87 1a01 	vstr	s2, [r7, #4]
: FOCMotor()
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fe31 	bl	8002434 <_ZN8FOCMotorC1Ev>
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <_ZN9BLDCMotorC1Eifff+0x68>)
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	601a      	str	r2, [r3, #0]
{
  // save pole pairs number
  pole_pairs = pp;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  // save phase resistance number
  phase_resistance = _R;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	649a      	str	r2, [r3, #72]	@ 0x48
  // save back emf constant KV = 1/KV
  // 1/sqrt(2) - rms value
  KV_rating = NOT_SET;
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <_ZN9BLDCMotorC1Eifff+0x6c>)
 80007e8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (_isset(_KV))
 80007ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80007ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000824 <_ZN9BLDCMotorC1Eifff+0x70>
 80007f2:	eef4 7a47 	vcmp.f32	s15, s14
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007fa:	d002      	beq.n	8000802 <_ZN9BLDCMotorC1Eifff+0x4e>
    KV_rating = _KV;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68ba      	ldr	r2, [r7, #8]
 8000800:	651a      	str	r2, [r3, #80]	@ 0x50
  // save phase inductance
  phase_inductance = _inductance;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	655a      	str	r2, [r3, #84]	@ 0x54

  // torque control type is voltage by default
  torque_controller = TorqueControlType::voltage;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4618      	mov	r0, r3
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	080059f4 	.word	0x080059f4
 8000820:	c640e400 	.word	0xc640e400
 8000824:	c640e400 	.word	0xc640e400

08000828 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>:


/**
	Link the driver which controls the motor
*/
void BLDCMotor::linkDriver(BLDCDriver* _driver) {
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  driver = _driver;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <_ZN9BLDCMotor4initEv>:

// init hardware pins
int BLDCMotor::init() {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if (!driver || !driver->initialized) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <_ZN9BLDCMotor4initEv+0x24>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000860:	7c1b      	ldrb	r3, [r3, #16]
 8000862:	f083 0301 	eor.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d005      	beq.n	8000878 <_ZN9BLDCMotor4initEv+0x30>
    motor_status = FOCMotorStatus::motor_init_failed;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	220f      	movs	r2, #15
 8000870:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    //SIMPLEFOC_DEBUG("MOT: Init not possible, driver not initialized");
    return 0;
 8000874:	2300      	movs	r3, #0
 8000876:	e070      	b.n	800095a <_ZN9BLDCMotor4initEv+0x112>
  }
  motor_status = FOCMotorStatus::motor_initializing;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2201      	movs	r2, #1
 800087c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  //SIMPLEFOC_DEBUG("MOT: Init");

  // sanity check for the voltage limit configuration
  if(voltage_limit > driver->voltage_limit) voltage_limit =  driver->voltage_limit;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800088c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000898:	dd05      	ble.n	80008a6 <_ZN9BLDCMotor4initEv+0x5e>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	659a      	str	r2, [r3, #88]	@ 0x58
  // constrain voltage for sensor alignment
  if(voltage_sensor_align > voltage_limit) voltage_sensor_align = voltage_limit;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80008b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd03      	ble.n	80008c4 <_ZN9BLDCMotor4initEv+0x7c>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	641a      	str	r2, [r3, #64]	@ 0x40

  // update the controller limits
  if(current_sense){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d008      	beq.n	80008e0 <_ZN9BLDCMotor4initEv+0x98>
    // current control loop controls voltage
    PID_current_q.limit = voltage_limit;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	67da      	str	r2, [r3, #124]	@ 0x7c
    PID_current_d.limit = voltage_limit;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  }
  if(_isset(phase_resistance) || torque_controller != TorqueControlType::voltage){
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80008e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000964 <_ZN9BLDCMotor4initEv+0x11c>
 80008ea:	eef4 7a47 	vcmp.f32	s15, s14
 80008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f2:	d104      	bne.n	80008fe <_ZN9BLDCMotor4initEv+0xb6>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <_ZN9BLDCMotor4initEv+0xc2>
    // velocity control loop controls current
    PID_velocity.limit = current_limit;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 8000908:	e004      	b.n	8000914 <_ZN9BLDCMotor4initEv+0xcc>
  }else{
    // velocity control loop controls the voltage
    PID_velocity.limit = voltage_limit;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  }
  P_angle.limit = velocity_limit;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

  // if using open loop control, set a CW as the default direction if not already set
  if ((controller==MotionControlType::angle_openloop
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000924:	2b04      	cmp	r3, #4
 8000926:	d004      	beq.n	8000932 <_ZN9BLDCMotor4initEv+0xea>
     ||controller==MotionControlType::velocity_openloop)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800092e:	2b03      	cmp	r3, #3
 8000930:	d108      	bne.n	8000944 <_ZN9BLDCMotor4initEv+0xfc>
     && (sensor_direction == Direction::UNKNOWN)) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000938:	2b00      	cmp	r3, #0
 800093a:	d103      	bne.n	8000944 <_ZN9BLDCMotor4initEv+0xfc>
      sensor_direction = Direction::CW;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
  }

  //_delay(500);
  // enable motor
  //SIMPLEFOC_DEBUG("MOT: Enable driver.");
  enable();
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	3308      	adds	r3, #8
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	4798      	blx	r3
  //_delay(500);
  motor_status = FOCMotorStatus::motor_uncalibrated;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2202      	movs	r2, #2
 8000954:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  return 1;
 8000958:	2301      	movs	r3, #1
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	c640e400 	.word	0xc640e400

08000968 <_ZN9BLDCMotor7disableEv>:


// disable motor driver
void BLDCMotor::disable()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  // disable the current sense
  if(current_sense) current_sense->disable();
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000976:	2b00      	cmp	r3, #0
 8000978:	d00a      	beq.n	8000990 <_ZN9BLDCMotor7disableEv+0x28>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	3314      	adds	r3, #20
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4610      	mov	r0, r2
 800098e:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	3310      	adds	r3, #16
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80009dc <_ZN9BLDCMotor7disableEv+0x74>
 80009a6:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80009dc <_ZN9BLDCMotor7disableEv+0x74>
 80009aa:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80009dc <_ZN9BLDCMotor7disableEv+0x74>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4798      	blx	r3
  // disable the driver
  driver->disable();
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009b8:	461a      	mov	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3308      	adds	r3, #8
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4610      	mov	r0, r2
 80009c8:	4798      	blx	r3
  // motor status update
  enabled = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	00000000 	.word	0x00000000

080009e0 <_ZN9BLDCMotor6enableEv>:
// enable motor driver
void BLDCMotor::enable()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  // enable the driver
  driver->enable();
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009ee:	461a      	mov	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3304      	adds	r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4610      	mov	r0, r2
 80009fe:	4798      	blx	r3
  // set zero to PWM
  driver->setPwm(0, 0, 0);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	3310      	adds	r3, #16
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000a7c <_ZN9BLDCMotor6enableEv+0x9c>
 8000a16:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8000a7c <_ZN9BLDCMotor6enableEv+0x9c>
 8000a1a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8000a7c <_ZN9BLDCMotor6enableEv+0x9c>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4798      	blx	r3
  // enable the current sense
  if(current_sense) current_sense->enable();
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d00a      	beq.n	8000a42 <_ZN9BLDCMotor6enableEv+0x62>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f8d3 2154 	ldr.w	r2, [r3, #340]	@ 0x154
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3310      	adds	r3, #16
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4798      	blx	r3
  // reset the pids
  PID_velocity.reset();
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	33cc      	adds	r3, #204	@ 0xcc
 8000a46:	4618      	mov	r0, r3
 8000a48:	f002 f92e 	bl	8002ca8 <_ZN13PIDController5resetEv>
  P_angle.reset();
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	33f0      	adds	r3, #240	@ 0xf0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 f929 	bl	8002ca8 <_ZN13PIDController5resetEv>
  PID_current_q.reset();
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	336c      	adds	r3, #108	@ 0x6c
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 f924 	bl	8002ca8 <_ZN13PIDController5resetEv>
  PID_current_d.reset();
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3390      	adds	r3, #144	@ 0x90
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 f91f 	bl	8002ca8 <_ZN13PIDController5resetEv>
  // motor status update
  enabled = 1;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	00000000 	.word	0x00000000

08000a80 <_ZN9BLDCMotor7initFOCEv>:

/**
  FOC functions
*/
// FOC initialization function
int  BLDCMotor::initFOC() {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  int exit_flag = 1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]

  motor_status = FOCMotorStatus::motor_calibrating;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2203      	movs	r2, #3
 8000a90:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

  // align motor if necessary
  // alignment necessary for encoders!
  // sensor and motor alignment - can be skipped
  // by setting motor.sensor_direction and motor.zero_electric_angle
  if(sensor){
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d03c      	beq.n	8000b18 <_ZN9BLDCMotor7initFOCEv+0x98>
    exit_flag *= alignSensor();
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f88e 	bl	8000bc0 <_ZN9BLDCMotor11alignSensorEv>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	fb02 f303 	mul.w	r3, r2, r3
 8000aac:	60fb      	str	r3, [r7, #12]
    // added the shaft_angle update
    sensor->update();
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3314      	adds	r3, #20
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	4798      	blx	r3
    shaft_angle = shaftAngle();
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 fdc1 	bl	800264e <_ZN8FOCMotor10shaftAngleEv>
 8000acc:	eef0 7a40 	vmov.f32	s15, s0
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	edc3 7a03 	vstr	s15, [r3, #12]

    // aligning the current sensor - can be skipped
    // checks if driver phases are the same as current sense phases
    // and checks the direction of measuremnt.
    if(exit_flag){
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d02c      	beq.n	8000b36 <_ZN9BLDCMotor7initFOCEv+0xb6>
      if(current_sense){ 
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d027      	beq.n	8000b36 <_ZN9BLDCMotor7initFOCEv+0xb6>
        if (!current_sense->initialized) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000aec:	7b1b      	ldrb	r3, [r3, #12]
 8000aee:	f083 0301 	eor.w	r3, r3, #1
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d006      	beq.n	8000b06 <_ZN9BLDCMotor7initFOCEv+0x86>
          motor_status = FOCMotorStatus::motor_calib_failed;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	220e      	movs	r2, #14
 8000afc:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
          //SIMPLEFOC_DEBUG("MOT: Init FOC error, current sense not initialized");
          exit_flag = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e017      	b.n	8000b36 <_ZN9BLDCMotor7initFOCEv+0xb6>
        }else{
          exit_flag *= alignCurrentSense();
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f82c 	bl	8000b64 <_ZN9BLDCMotor17alignCurrentSenseEv>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	fb02 f303 	mul.w	r3, r2, r3
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	e00e      	b.n	8000b36 <_ZN9BLDCMotor7initFOCEv+0xb6>
      //else { SIMPLEFOC_DEBUG("MOT: No current sense."); }
    }

  } else {
    //SIMPLEFOC_DEBUG("MOT: No sensor.");
    if ((controller == MotionControlType::angle_openloop || controller == MotionControlType::velocity_openloop)){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d004      	beq.n	8000b2c <_ZN9BLDCMotor7initFOCEv+0xac>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d102      	bne.n	8000b32 <_ZN9BLDCMotor7initFOCEv+0xb2>
      exit_flag = 1;    
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	e001      	b.n	8000b36 <_ZN9BLDCMotor7initFOCEv+0xb6>
      //SIMPLEFOC_DEBUG("MOT: Openloop only!");
    }else{
      exit_flag = 0; // no FOC without sensor
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
    }
  }

  if(exit_flag){
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d004      	beq.n	8000b46 <_ZN9BLDCMotor7initFOCEv+0xc6>
    //SIMPLEFOC_DEBUG("MOT: Ready.");
    motor_status = FOCMotorStatus::motor_ready;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2204      	movs	r2, #4
 8000b40:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 8000b44:	e009      	b.n	8000b5a <_ZN9BLDCMotor7initFOCEv+0xda>
  }else{
    //SIMPLEFOC_DEBUG("MOT: Init FOC failed.");
    motor_status = FOCMotorStatus::motor_calib_failed;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	220e      	movs	r2, #14
 8000b4a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    disable();
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	3304      	adds	r3, #4
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	4798      	blx	r3
  }

  return exit_flag;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZN9BLDCMotor17alignCurrentSenseEv>:

// Calibarthe the motor and current sense phases
int BLDCMotor::alignCurrentSense() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; // success
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]

  //SIMPLEFOC_DEBUG("MOT: Align current sense.");

  // align current sense and the driver
  exit_flag = current_sense->driverAlign(voltage_sensor_align, modulation_centered);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f8d3 0154 	ldr.w	r0, [r3, #340]	@ 0x154
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3304      	adds	r3, #4
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	edd2 7a10 	vldr	s15, [r2, #64]	@ 0x40
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	f992 2067 	ldrsb.w	r2, [r2, #103]	@ 0x67
 8000b8e:	2a00      	cmp	r2, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2201      	movne	r2, #1
 8000b94:	2200      	moveq	r2, #0
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	4611      	mov	r1, r2
 8000b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b9e:	4798      	blx	r3
 8000ba0:	60f8      	str	r0, [r7, #12]
  if(!exit_flag){
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d101      	bne.n	8000bac <_ZN9BLDCMotor17alignCurrentSenseEv+0x48>
    // error in current sense - phase either not measured or bad connection
    //SIMPLEFOC_DEBUG("MOT: Align error!");
    exit_flag = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  }else{
    // output the alignment status flag
    //SIMPLEFOC_DEBUG("MOT: Success: ", exit_flag);
  }

  return exit_flag > 0;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bfcc      	ite	gt
 8000bb2:	2301      	movgt	r3, #1
 8000bb4:	2300      	movle	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_ZN9BLDCMotor11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int BLDCMotor::alignSensor() {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  int exit_flag = 1; //success
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //SIMPLEFOC_DEBUG("MOT: Align sensor.");

  // check if sensor needs zero search
  if(sensor->needsSearch()) exit_flag = absoluteZeroSearch();
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4610      	mov	r0, r2
 8000be0:	4798      	blx	r3
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d003      	beq.n	8000bfa <_ZN9BLDCMotor11alignSensorEv+0x3a>
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f000 f940 	bl	8000e78 <_ZN9BLDCMotor18absoluteZeroSearchEv>
 8000bf8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  // stop init if not found index
  if(!exit_flag) return exit_flag;
 8000bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <_ZN9BLDCMotor11alignSensorEv+0x44>
 8000c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c02:	e129      	b.n	8000e58 <_ZN9BLDCMotor11alignSensorEv+0x298>

  // v2.3.3 fix for R_AVR_7_PCREL against symbol" bug for AVR boards
  // TODO figure out why this works
  float voltage_align = voltage_sensor_align;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	623b      	str	r3, [r7, #32]

  // if unknown natural direction
  if(sensor_direction==Direction::UNKNOWN){
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f040 80e5 	bne.w	8000de0 <_ZN9BLDCMotor11alignSensorEv+0x220>

    // find natural direction
    // move one electrical revolution forward
    for (int i = 0; i <=500; i++ ) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c1a:	e02c      	b.n	8000c76 <_ZN9BLDCMotor11alignSensorEv+0xb6>
      float angle = _3PI_2 + _2PI * i / 500.0f;
 8000c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c26:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8000e60 <_ZN9BLDCMotor11alignSensorEv+0x2a0>
 8000c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c2e:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000e64 <_ZN9BLDCMotor11alignSensorEv+0x2a4>
 8000c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c36:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8000e68 <_ZN9BLDCMotor11alignSensorEv+0x2a8>
 8000c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c3e:	edc7 7a03 	vstr	s15, [r7, #12]
      setPhaseVoltage(voltage_align, 0,  angle);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3318      	adds	r3, #24
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	ed97 1a03 	vldr	s2, [r7, #12]
 8000c4e:	eddf 0a87 	vldr	s1, [pc, #540]	@ 8000e6c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000c52:	ed97 0a08 	vldr	s0, [r7, #32]
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	4798      	blx	r3
	    sensor->update();
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3314      	adds	r3, #20
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	4798      	blx	r3
    for (int i = 0; i <=500; i++ ) {
 8000c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c72:	3301      	adds	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c78:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c7c:	ddce      	ble.n	8000c1c <_ZN9BLDCMotor11alignSensorEv+0x5c>
      //_delay(2);
    }
    // take and angle in the middle
    sensor->update();
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	3314      	adds	r3, #20
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4610      	mov	r0, r2
 8000c92:	4798      	blx	r3
    float mid_angle = sensor->getAngle();
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4610      	mov	r0, r2
 8000ca8:	4798      	blx	r3
 8000caa:	ed87 0a07 	vstr	s0, [r7, #28]
    // move one electrical revolution backwards
    for (int i = 500; i >=0; i-- ) {
 8000cae:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cb4:	e02c      	b.n	8000d10 <_ZN9BLDCMotor11alignSensorEv+0x150>
      float angle = _3PI_2 + _2PI * i / 500.0f ;
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc0:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8000e60 <_ZN9BLDCMotor11alignSensorEv+0x2a0>
 8000cc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cc8:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8000e64 <_ZN9BLDCMotor11alignSensorEv+0x2a4>
 8000ccc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cd0:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8000e68 <_ZN9BLDCMotor11alignSensorEv+0x2a8>
 8000cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cd8:	edc7 7a04 	vstr	s15, [r7, #16]
      setPhaseVoltage(voltage_align, 0,  angle);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3318      	adds	r3, #24
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	ed97 1a04 	vldr	s2, [r7, #16]
 8000ce8:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8000e6c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000cec:	ed97 0a08 	vldr	s0, [r7, #32]
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	4798      	blx	r3
	    sensor->update();
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3314      	adds	r3, #20
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4610      	mov	r0, r2
 8000d08:	4798      	blx	r3
    for (int i = 500; i >=0; i-- ) {
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dacf      	bge.n	8000cb6 <_ZN9BLDCMotor11alignSensorEv+0xf6>
      //_delay(2);
    }
    sensor->update();
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	3314      	adds	r3, #20
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4798      	blx	r3
    float end_angle = sensor->getAngle();
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4798      	blx	r3
 8000d42:	ed87 0a06 	vstr	s0, [r7, #24]
    // setPhaseVoltage(0, 0, 0);
    //_delay(200);
    // determine the direction the sensor moved
    float moved =  fabs(mid_angle - end_angle);
 8000d46:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d52:	eeb0 0a67 	vmov.f32	s0, s15
 8000d56:	f7ff fd1d 	bl	8000794 <_ZSt4fabsf>
 8000d5a:	ed87 0a05 	vstr	s0, [r7, #20]
    if (moved<MIN_ANGLE_DETECT_MOVEMENT) { // minimum angle to detect movement
 8000d5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d62:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8000e70 <_ZN9BLDCMotor11alignSensorEv+0x2b0>
 8000d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6e:	d501      	bpl.n	8000d74 <_ZN9BLDCMotor11alignSensorEv+0x1b4>
      //SIMPLEFOC_DEBUG("MOT: Failed to notice movement");
      return 0; // failed calibration
 8000d70:	2300      	movs	r3, #0
 8000d72:	e071      	b.n	8000e58 <_ZN9BLDCMotor11alignSensorEv+0x298>
    } else if (mid_angle < end_angle) {
 8000d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d84:	d504      	bpl.n	8000d90 <_ZN9BLDCMotor11alignSensorEv+0x1d0>
      //SIMPLEFOC_DEBUG("MOT: sensor_direction==CCW");
      sensor_direction = Direction::CCW;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	22ff      	movs	r2, #255	@ 0xff
 8000d8a:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 8000d8e:	e003      	b.n	8000d98 <_ZN9BLDCMotor11alignSensorEv+0x1d8>
    } else{
      //SIMPLEFOC_DEBUG("MOT: sensor_direction==CW");
      sensor_direction = Direction::CW;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
    }
    // check pole pair number
    pp_check_result = !(fabs(moved*pole_pairs - _2PI) > 0.5f); // 0.5f is arbitrary number it can be lower or higher!
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dac:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000e60 <_ZN9BLDCMotor11alignSensorEv+0x2a0>
 8000db0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000db4:	eeb0 0a67 	vmov.f32	s0, s15
 8000db8:	f7ff fcec 	bl	8000794 <_ZSt4fabsf>
 8000dbc:	eef0 7a40 	vmov.f32	s15, s0
 8000dc0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000dc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dcc:	bfcc      	ite	gt
 8000dce:	2301      	movgt	r3, #1
 8000dd0:	2300      	movle	r3, #0
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f083 0301 	eor.w	r3, r3, #1
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
    }

  } //else { SIMPLEFOC_DEBUG("MOT: Skip dir calib."); }

  // zero electric angle not known
  if(!_isset(zero_electric_angle)){
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8000de6:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000e74 <_ZN9BLDCMotor11alignSensorEv+0x2b4>
 8000dea:	eef4 7a47 	vcmp.f32	s15, s14
 8000dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df2:	d130      	bne.n	8000e56 <_ZN9BLDCMotor11alignSensorEv+0x296>
    // align the electrical phases of the motor and sensor
    // set angle -90(270 = 3PI/2) degrees
    setPhaseVoltage(voltage_align, 0,  _3PI_2);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8000e68 <_ZN9BLDCMotor11alignSensorEv+0x2a8>
 8000e00:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8000e6c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e04:	ed97 0a08 	vldr	s0, [r7, #32]
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	4798      	blx	r3
    //_delay(700);
    // read the sensor
    sensor->update();
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3314      	adds	r3, #20
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4798      	blx	r3
    // get the current zero electric angle
    zero_electric_angle = 0;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    zero_electric_angle = electricalAngle();
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fc7e 	bl	8002730 <_ZN8FOCMotor15electricalAngleEv>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    //_delay(20);
    //if(monitor_port){
    //  SIMPLEFOC_DEBUG("MOT: Zero elec. angle: ", zero_electric_angle);
    //}
    // stop everything
    setPhaseVoltage(0, 0, 0);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3318      	adds	r3, #24
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8000e6c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e4a:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8000e6c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e4e:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000e6c <_ZN9BLDCMotor11alignSensorEv+0x2ac>
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	4798      	blx	r3
    //_delay(200);
  } //else { SIMPLEFOC_DEBUG("MOT: Skip offset calib."); }
  return exit_flag;
 8000e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3730      	adds	r7, #48	@ 0x30
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40c90fdb 	.word	0x40c90fdb
 8000e64:	43fa0000 	.word	0x43fa0000
 8000e68:	4096cbe4 	.word	0x4096cbe4
 8000e6c:	00000000 	.word	0x00000000
 8000e70:	3d7ecfa9 	.word	0x3d7ecfa9
 8000e74:	c640e400 	.word	0xc640e400

08000e78 <_ZN9BLDCMotor18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int BLDCMotor::absoluteZeroSearch() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  // sensor precision: this is all ok, as the search happens near the 0-angle, where the precision
  //                    of float is sufficient.
  //SIMPLEFOC_DEBUG("MOT: Index search...");
  // search the absolute zero with small velocity
  float limit_vel = velocity_limit;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e84:	60fb      	str	r3, [r7, #12]
  float limit_volt = voltage_limit;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	60bb      	str	r3, [r7, #8]
  velocity_limit = velocity_index_search;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	661a      	str	r2, [r3, #96]	@ 0x60
  voltage_limit = voltage_sensor_align;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	659a      	str	r2, [r3, #88]	@ 0x58
  shaft_angle = 0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f04f 0200 	mov.w	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  while(sensor->needsSearch() && shaft_angle < _2PI){
 8000ea4:	e00f      	b.n	8000ec6 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x4e>
    angleOpenloop(1.5f*_2PI);
 8000ea6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8000f50 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xd8>
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f001 f805 	bl	8001eba <_ZN9BLDCMotor13angleOpenloopEf>
    // call important for some sensors not to loose count
    // not needed for the search
    sensor->update();
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3314      	adds	r3, #20
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4798      	blx	r3
  while(sensor->needsSearch() && shaft_angle < _2PI){
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	3318      	adds	r3, #24
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4798      	blx	r3
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <_ZN9BLDCMotor18absoluteZeroSearchEv+0x82>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ee8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000f54 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xdc>
 8000eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	d501      	bpl.n	8000efa <_ZN9BLDCMotor18absoluteZeroSearchEv+0x82>
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <_ZN9BLDCMotor18absoluteZeroSearchEv+0x84>
 8000efa:	2300      	movs	r3, #0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1d2      	bne.n	8000ea6 <_ZN9BLDCMotor18absoluteZeroSearchEv+0x2e>
  }
  // disable motor
  setPhaseVoltage(0, 0, 0);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3318      	adds	r3, #24
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8000f58 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 8000f0c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8000f58 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 8000f10:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000f58 <_ZN9BLDCMotor18absoluteZeroSearchEv+0xe0>
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	4798      	blx	r3
  // reinit the limits
  velocity_limit = limit_vel;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	661a      	str	r2, [r3, #96]	@ 0x60
  voltage_limit = limit_volt;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	659a      	str	r2, [r3, #88]	@ 0x58
  // check if the zero found
  //if(monitor_port){
  //  if(sensor->needsSearch()) { SIMPLEFOC_DEBUG("MOT: Error: Not found!"); }
  //  else { SIMPLEFOC_DEBUG("MOT: Success!"); }
 // }
  return !sensor->needsSearch();
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	3318      	adds	r3, #24
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4610      	mov	r0, r2
 8000f38:	4798      	blx	r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	bf0c      	ite	eq
 8000f40:	2301      	moveq	r3, #1
 8000f42:	2300      	movne	r3, #0
 8000f44:	b2db      	uxtb	r3, r3
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	4116cbe4 	.word	0x4116cbe4
 8000f54:	40c90fdb 	.word	0x40c90fdb
 8000f58:	00000000 	.word	0x00000000

08000f5c <_ZN9BLDCMotor7loopFOCEv>:

// Iterative function looping FOC algorithm, setting Uq on the Motor
// The faster it can be run the better
void BLDCMotor::loopFOC() {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  // update sensor - do this even in open-loop mode, as user may be switching between modes and we could lose track
  //                 of full rotations otherwise.
  if (sensor) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <_ZN9BLDCMotor7loopFOCEv+0x28>
	  sensor->update();
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3314      	adds	r3, #20
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4610      	mov	r0, r2
 8000f82:	4798      	blx	r3
  }

  // if open-loop do nothing
  if( controller==MotionControlType::angle_openloop || controller==MotionControlType::velocity_openloop ){
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d028      	beq.n	8000fe0 <_ZN9BLDCMotor7loopFOCEv+0x84>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d023      	beq.n	8000fe0 <_ZN9BLDCMotor7loopFOCEv+0x84>
	  return;
  }
  
  // if disabled do nothing
  if(!enabled){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f993 3064 	ldrsb.w	r3, [r3, #100]	@ 0x64
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d020      	beq.n	8000fe4 <_ZN9BLDCMotor7loopFOCEv+0x88>
  }

  // Needs the update() to be called first
  // This function will not have numerical issues because it uses Sensor::getMechanicalAngle() 
  // which is in range 0-2PI
  electrical_angle = electricalAngle();
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 fbc3 	bl	8002730 <_ZN8FOCMotor15electricalAngleEv>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	edc3 7a04 	vstr	s15, [r3, #16]

  }
  */

  // set the phase voltage - FOC heart function :)
  setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3318      	adds	r3, #24
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	edd2 7a0a 	vldr	s15, [r2, #40]	@ 0x28
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	edd2 6a04 	vldr	s13, [r2, #16]
 8000fce:	eeb0 1a66 	vmov.f32	s2, s13
 8000fd2:	eef0 0a47 	vmov.f32	s1, s14
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	4798      	blx	r3
 8000fde:	e002      	b.n	8000fe6 <_ZN9BLDCMotor7loopFOCEv+0x8a>
	  return;
 8000fe0:	bf00      	nop
 8000fe2:	e000      	b.n	8000fe6 <_ZN9BLDCMotor7loopFOCEv+0x8a>
	  return;
 8000fe4:	bf00      	nop
}
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <_ZN9BLDCMotor4moveEf>:
// Iterative function running outer loop of the FOC algorithm
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void BLDCMotor::move(float new_target) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	ed2d 8b02 	vpush	{d8}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	ed87 0a00 	vstr	s0, [r7]

  // set internal target variable
  if(_isset(new_target)) target = new_target;
 8000ffc:	edd7 7a00 	vldr	s15, [r7]
 8001000:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001004:	eef4 7a47 	vcmp.f32	s15, s14
 8001008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100c:	d002      	beq.n	8001014 <_ZN9BLDCMotor4moveEf+0x28>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	605a      	str	r2, [r3, #4]
  
  // downsampling (optional)
  if(motion_cnt++ < motion_downsample) return;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	f8c2 1130 	str.w	r1, [r2, #304]	@ 0x130
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8001028:	4293      	cmp	r3, r2
 800102a:	bf34      	ite	cc
 800102c:	2301      	movcc	r3, #1
 800102e:	2300      	movcs	r3, #0
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 8380 	bne.w	8001738 <_ZN9BLDCMotor4moveEf+0x74c>
  motion_cnt = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
  // get shaft angle
  // TODO sensor precision: the shaft_angle actually stores the complete position, including full rotations, as a float
  //                        For this reason it is NOT precise when the angles become large.
  //                        Additionally, the way LPF works on angle is a precision issue, and the angle-LPF is a problem
  //                        when switching to a 2-component representation.
  if( controller!=MotionControlType::angle_openloop && controller!=MotionControlType::velocity_openloop ) 
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001046:	2b04      	cmp	r3, #4
 8001048:	d00d      	beq.n	8001066 <_ZN9BLDCMotor4moveEf+0x7a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001050:	2b03      	cmp	r3, #3
 8001052:	d008      	beq.n	8001066 <_ZN9BLDCMotor4moveEf+0x7a>
    shaft_angle = shaftAngle(); // read value even if motor is disabled to keep the monitoring updated but not in openloop mode
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	f001 faf9 	bl	800264e <_ZN8FOCMotor10shaftAngleEv>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	edc3 7a03 	vstr	s15, [r3, #12]
  // get angular velocity  TODO the velocity reading probably also shouldn't happen in open loop modes?
  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fb2b 	bl	80026c4 <_ZN8FOCMotor13shaftVelocityEv>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edc3 7a05 	vstr	s15, [r3, #20]

  // if disabled do nothing
  if(!enabled) return;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f993 3064 	ldrsb.w	r3, [r3, #100]	@ 0x64
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 835c 	beq.w	800173c <_ZN9BLDCMotor4moveEf+0x750>
  
  // calculate the back-emf voltage if KV_rating available U_bemf = vel*(1/KV)
  if (_isset(KV_rating)) voltage_bemf = shaft_velocity/(KV_rating*_SQRT3)/_RPM_TO_RADS;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800108a:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 800108e:	eef4 7a47 	vcmp.f32	s15, s14
 8001092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001096:	d012      	beq.n	80010be <_ZN9BLDCMotor4moveEf+0xd2>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	edd3 6a05 	vldr	s13, [r3, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80010a4:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 80012b0 <_ZN9BLDCMotor4moveEf+0x2c4>
 80010a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010b0:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80012b4 <_ZN9BLDCMotor4moveEf+0x2c8>
 80010b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  // estimate the motor current if phase reistance available and current_sense not available
  if(!current_sense && _isset(phase_resistance)) current.q = (voltage.q - voltage_bemf)/phase_resistance;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d119      	bne.n	80010fc <_ZN9BLDCMotor4moveEf+0x110>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80010ce:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 80010d2:	eef4 7a47 	vcmp.f32	s15, s14
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d00f      	beq.n	80010fc <_ZN9BLDCMotor4moveEf+0x110>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80010e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80010f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

  // upgrade the current based voltage limit
  switch (controller) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8001102:	2b04      	cmp	r3, #4
 8001104:	f200 831f 	bhi.w	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
 8001108:	a201      	add	r2, pc, #4	@ (adr r2, 8001110 <_ZN9BLDCMotor4moveEf+0x124>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001125 	.word	0x08001125
 8001114:	08001511 	.word	0x08001511
 8001118:	080012bd 	.word	0x080012bd
 800111c:	080016e1 	.word	0x080016e1
 8001120:	0800170d 	.word	0x0800170d
    case MotionControlType::torque:
      if(torque_controller == TorqueControlType::voltage){ // if voltage torque control
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 80bb 	bne.w	80012a6 <_ZN9BLDCMotor4moveEf+0x2ba>
        if(!_isset(phase_resistance))  voltage.q = target;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001136:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 800113a:	eef4 7a47 	vcmp.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d104      	bne.n	800114e <_ZN9BLDCMotor4moveEf+0x162>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	629a      	str	r2, [r3, #40]	@ 0x28
 800114c:	e00f      	b.n	800116e <_ZN9BLDCMotor4moveEf+0x182>
        else  voltage.q =  target*phase_resistance + voltage_bemf;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a01 	vldr	s14, [r3, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800115a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        voltage.q = _constrain(voltage.q, -voltage_limit, voltage_limit);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800117a:	eef1 7a67 	vneg.f32	s15, s15
 800117e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d505      	bpl.n	8001194 <_ZN9BLDCMotor4moveEf+0x1a8>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800118e:	eef1 7a67 	vneg.f32	s15, s15
 8001192:	e011      	b.n	80011b8 <_ZN9BLDCMotor4moveEf+0x1cc>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80011a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a8:	dd03      	ble.n	80011b2 <_ZN9BLDCMotor4moveEf+0x1c6>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80011b0:	e002      	b.n	80011b8 <_ZN9BLDCMotor4moveEf+0x1cc>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80011c4:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 80011c8:	eef4 7a47 	vcmp.f32	s15, s14
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d104      	bne.n	80011dc <_ZN9BLDCMotor4moveEf+0x1f0>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -target*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }else{
        current_sp = target; // if current/foc_current torque control
      }
      break;
 80011da:	e2b4      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
        else voltage.d = _constrain( -target*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a01 	vldr	s15, [r3, #4]
 80011e2:	eeb1 7a67 	vneg.f32	s14, s15
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edd3 7a05 	vldr	s15, [r3, #20]
 80011ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001210:	eef1 7a67 	vneg.f32	s15, s15
 8001214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	d505      	bpl.n	800122a <_ZN9BLDCMotor4moveEf+0x23e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001224:	eef1 7a67 	vneg.f32	s15, s15
 8001228:	e039      	b.n	800129e <_ZN9BLDCMotor4moveEf+0x2b2>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001230:	eeb1 7a67 	vneg.f32	s14, s15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	edd3 7a05 	vldr	s15, [r3, #20]
 800123a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800125e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	dd03      	ble.n	8001270 <_ZN9BLDCMotor4moveEf+0x284>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800126e:	e016      	b.n	800129e <_ZN9BLDCMotor4moveEf+0x2b2>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	edd3 7a01 	vldr	s15, [r3, #4]
 8001276:	eeb1 7a67 	vneg.f32	s14, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001288:	ee07 3a90 	vmov	s15, r3
 800128c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800129a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 80012a4:	e24f      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
        current_sp = target; // if current/foc_current torque control
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
      break;
 80012ae:	e24a      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
 80012b0:	3fddb3d7 	.word	0x3fddb3d7
 80012b4:	3dd67750 	.word	0x3dd67750
 80012b8:	c640e400 	.word	0xc640e400
    case MotionControlType::angle:
      // TODO sensor precision: this calculation is not numerically precise. The target value cannot express precise positions when
      //                        the angles are large. This results in not being able to command small changes at high position values.
      //                        to solve this, the delta-angle has to be calculated in a numerically precise way.
      // angle set point
      shaft_angle_sp = target;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	621a      	str	r2, [r3, #32]
      // calculate velocity set point
      shaft_velocity_sp = feed_forward_velocity + P_angle( shaft_angle_sp - shaft_angle );
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	ed93 8a02 	vldr	s16, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f103 02f0 	add.w	r2, r3, #240	@ 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80012dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	4610      	mov	r0, r2
 80012e6:	f001 fcd8 	bl	8002c9a <_ZN13PIDControllerclEf>
 80012ea:	eef0 7a40 	vmov.f32	s15, s0
 80012ee:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edc3 7a07 	vstr	s15, [r3, #28]
      shaft_velocity_sp = _constrain(shaft_velocity_sp,-velocity_limit, velocity_limit);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a07 	vldr	s14, [r3, #28]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001304:	eef1 7a67 	vneg.f32	s15, s15
 8001308:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	d505      	bpl.n	800131e <_ZN9BLDCMotor4moveEf+0x332>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001318:	eef1 7a67 	vneg.f32	s15, s15
 800131c:	e011      	b.n	8001342 <_ZN9BLDCMotor4moveEf+0x356>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	ed93 7a07 	vldr	s14, [r3, #28]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800132a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001332:	dd03      	ble.n	800133c <_ZN9BLDCMotor4moveEf+0x350>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800133a:	e002      	b.n	8001342 <_ZN9BLDCMotor4moveEf+0x356>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	edc3 7a07 	vstr	s15, [r3, #28]
      // calculate the torque command - sensor precision: this calculation is ok, but based on bad value from previous calculation
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if voltage torque control
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ed93 7a07 	vldr	s14, [r3, #28]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	edd3 7a05 	vldr	s15, [r3, #20]
 800135a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135e:	eeb0 0a67 	vmov.f32	s0, s15
 8001362:	4610      	mov	r0, r2
 8001364:	f001 fc99 	bl	8002c9a <_ZN13PIDControllerclEf>
 8001368:	eef0 7a40 	vmov.f32	s15, s0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	edc3 7a06 	vstr	s15, [r3, #24]
      // if torque controlled through voltage
      if(torque_controller == TorqueControlType::voltage){
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001378:	2b00      	cmp	r3, #0
 800137a:	f040 81e1 	bne.w	8001740 <_ZN9BLDCMotor4moveEf+0x754>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001384:	ed1f 7a34 	vldr	s14, [pc, #-208]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001388:	eef4 7a47 	vcmp.f32	s15, s14
 800138c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001390:	d104      	bne.n	800139c <_ZN9BLDCMotor4moveEf+0x3b0>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699a      	ldr	r2, [r3, #24]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	629a      	str	r2, [r3, #40]	@ 0x28
 800139a:	e045      	b.n	8001428 <_ZN9BLDCMotor4moveEf+0x43c>
        else  voltage.q =  _constrain( current_sp*phase_resistance + voltage_bemf , -voltage_limit, voltage_limit);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	ed93 7a06 	vldr	s14, [r3, #24]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80013b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80013bc:	eef1 7a67 	vneg.f32	s15, s15
 80013c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d505      	bpl.n	80013d6 <_ZN9BLDCMotor4moveEf+0x3ea>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80013d0:	eef1 7a67 	vneg.f32	s15, s15
 80013d4:	e025      	b.n	8001422 <_ZN9BLDCMotor4moveEf+0x436>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	ed93 7a06 	vldr	s14, [r3, #24]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80013e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80013ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80013f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	dd03      	ble.n	8001408 <_ZN9BLDCMotor4moveEf+0x41c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001406:	e00c      	b.n	8001422 <_ZN9BLDCMotor4moveEf+0x436>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	ed93 7a06 	vldr	s14, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800142e:	ed1f 7a5e 	vldr	s14, [pc, #-376]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001432:	eef4 7a47 	vcmp.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	d104      	bne.n	8001446 <_ZN9BLDCMotor4moveEf+0x45a>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }
      break;
 8001444:	e17c      	b.n	8001740 <_ZN9BLDCMotor4moveEf+0x754>
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	edd3 7a06 	vldr	s15, [r3, #24]
 800144c:	eeb1 7a67 	vneg.f32	s14, s15
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a05 	vldr	s15, [r3, #20]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	ee07 3a90 	vmov	s15, r3
 8001462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800147a:	eef1 7a67 	vneg.f32	s15, s15
 800147e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d505      	bpl.n	8001494 <_ZN9BLDCMotor4moveEf+0x4a8>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800148e:	eef1 7a67 	vneg.f32	s15, s15
 8001492:	e039      	b.n	8001508 <_ZN9BLDCMotor4moveEf+0x51c>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	edd3 7a06 	vldr	s15, [r3, #24]
 800149a:	eeb1 7a67 	vneg.f32	s14, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80014be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80014c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	dd03      	ble.n	80014da <_ZN9BLDCMotor4moveEf+0x4ee>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80014d8:	e016      	b.n	8001508 <_ZN9BLDCMotor4moveEf+0x51c>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80014e0:	eeb1 7a67 	vneg.f32	s14, s15
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	ee07 3a90 	vmov	s15, r3
 80014f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 800150e:	e117      	b.n	8001740 <_ZN9BLDCMotor4moveEf+0x754>
    case MotionControlType::velocity:
      // velocity set point - sensor precision: this calculation is numerically precise.
      shaft_velocity_sp = target;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	61da      	str	r2, [r3, #28]
      // calculate the torque command
      current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity); // if current/foc_current torque control
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f103 02cc 	add.w	r2, r3, #204	@ 0xcc
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	ed93 7a07 	vldr	s14, [r3, #28]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edd3 7a05 	vldr	s15, [r3, #20]
 800152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152e:	eeb0 0a67 	vmov.f32	s0, s15
 8001532:	4610      	mov	r0, r2
 8001534:	f001 fbb1 	bl	8002c9a <_ZN13PIDControllerclEf>
 8001538:	eef0 7a40 	vmov.f32	s15, s0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edc3 7a06 	vstr	s15, [r3, #24]
      // if torque controlled through voltage control
      if(torque_controller == TorqueControlType::voltage){
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 80fb 	bne.w	8001744 <_ZN9BLDCMotor4moveEf+0x758>
        // use voltage if phase-resistance not provided
        if(!_isset(phase_resistance))  voltage.q = current_sp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001554:	ed1f 7aa8 	vldr	s14, [pc, #-672]	@ 80012b8 <_ZN9BLDCMotor4moveEf+0x2cc>
 8001558:	eef4 7a47 	vcmp.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d104      	bne.n	800156c <_ZN9BLDCMotor4moveEf+0x580>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
 800156a:	e045      	b.n	80015f8 <_ZN9BLDCMotor4moveEf+0x60c>
        else  voltage.q = _constrain( current_sp*phase_resistance + voltage_bemf , -voltage_limit, voltage_limit);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001578:	ee27 7a27 	vmul.f32	s14, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001582:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800158c:	eef1 7a67 	vneg.f32	s15, s15
 8001590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001598:	d505      	bpl.n	80015a6 <_ZN9BLDCMotor4moveEf+0x5ba>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80015a0:	eef1 7a67 	vneg.f32	s15, s15
 80015a4:	e025      	b.n	80015f2 <_ZN9BLDCMotor4moveEf+0x606>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80015b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80015c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	dd03      	ble.n	80015d8 <_ZN9BLDCMotor4moveEf+0x5ec>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80015d6:	e00c      	b.n	80015f2 <_ZN9BLDCMotor4moveEf+0x606>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	ed93 7a06 	vldr	s14, [r3, #24]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80015e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        // set d-component (lag compensation if known inductance)
        if(!_isset(phase_inductance)) voltage.d = 0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80015fe:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001750 <_ZN9BLDCMotor4moveEf+0x764>
 8001602:	eef4 7a47 	vcmp.f32	s15, s14
 8001606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160a:	d104      	bne.n	8001616 <_ZN9BLDCMotor4moveEf+0x62a>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	@ 0x24
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
      }
      break;
 8001614:	e096      	b.n	8001744 <_ZN9BLDCMotor4moveEf+0x758>
        else voltage.d = _constrain( -current_sp*shaft_velocity*pole_pairs*phase_inductance, -voltage_limit, voltage_limit);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	edd3 7a06 	vldr	s15, [r3, #24]
 800161c:	eeb1 7a67 	vneg.f32	s14, s15
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	edd3 7a05 	vldr	s15, [r3, #20]
 8001626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800164a:	eef1 7a67 	vneg.f32	s15, s15
 800164e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d505      	bpl.n	8001664 <_ZN9BLDCMotor4moveEf+0x678>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800165e:	eef1 7a67 	vneg.f32	s15, s15
 8001662:	e039      	b.n	80016d8 <_ZN9BLDCMotor4moveEf+0x6ec>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	edd3 7a06 	vldr	s15, [r3, #24]
 800166a:	eeb1 7a67 	vneg.f32	s14, s15
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 7a05 	vldr	s15, [r3, #20]
 8001674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800168e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	dd03      	ble.n	80016aa <_ZN9BLDCMotor4moveEf+0x6be>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80016a8:	e016      	b.n	80016d8 <_ZN9BLDCMotor4moveEf+0x6ec>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80016b0:	eeb1 7a67 	vneg.f32	s14, s15
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80016d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
      break;
 80016de:	e031      	b.n	8001744 <_ZN9BLDCMotor4moveEf+0x758>
    case MotionControlType::velocity_openloop:
      // velocity control in open loop - sensor precision: this calculation is numerically precise.
      shaft_velocity_sp = target;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	61da      	str	r2, [r3, #28]
      voltage.q = velocityOpenloop(shaft_velocity_sp); // returns the voltage that is set to the motor
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fbda 	bl	8001eac <_ZN9BLDCMotor16velocityOpenloopEf>
 80016f8:	eef0 7a40 	vmov.f32	s15, s0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
      voltage.d = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 800170a:	e01c      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
    case MotionControlType::angle_openloop:
      // angle control in open loop - 
      // TODO sensor precision: this calculation NOT numerically precise, and subject
      //                        to the same problems in small set-point changes at high angles 
      //                        as the closed loop version.
      shaft_angle_sp = target;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	621a      	str	r2, [r3, #32]
      voltage.q = angleOpenloop(shaft_angle_sp); // returns the voltage that is set to the motor
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	edd3 7a08 	vldr	s15, [r3, #32]
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fbcb 	bl	8001eba <_ZN9BLDCMotor13angleOpenloopEf>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
      voltage.d = 0;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
 8001736:	e006      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
  if(motion_cnt++ < motion_downsample) return;
 8001738:	bf00      	nop
 800173a:	e004      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
  if(!enabled) return;
 800173c:	bf00      	nop
 800173e:	e002      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
      break;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <_ZN9BLDCMotor4moveEf+0x75a>
      break;
 8001744:	bf00      	nop
  }
}
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	ecbd 8b02 	vpop	{d8}
 800174e:	bd80      	pop	{r7, pc}
 8001750:	c640e400 	.word	0xc640e400

08001754 <_ZN9BLDCMotor15setPhaseVoltageEfff>:
// Function implementing Space Vector PWM and Sine PWM algorithms
//
// Function using sine approximation
// regular sin + cos ~300us    (no memory usage)
// approx  _sin + _cos ~110us  (400Byte ~ 20% of memory)
void BLDCMotor::setPhaseVoltage(float Uq, float Ud, float angle_el) {
 8001754:	b590      	push	{r4, r7, lr}
 8001756:	b08d      	sub	sp, #52	@ 0x34
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001760:	edc7 0a01 	vstr	s1, [r7, #4]
 8001764:	ed87 1a00 	vstr	s2, [r7]

  float center;
  int sector;
  float _ca,_sa;

  switch (foc_modulation)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800176e:	2b03      	cmp	r3, #3
 8001770:	f000 8111 	beq.w	8001996 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x242>
 8001774:	2b03      	cmp	r3, #3
 8001776:	f300 837a 	bgt.w	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 800177a:	2b01      	cmp	r3, #1
 800177c:	dc03      	bgt.n	8001786 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x32>
 800177e:	2b00      	cmp	r3, #0
 8001780:	f280 827c 	bge.w	8001c7c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x528>
 8001784:	e373      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001786:	2b02      	cmp	r3, #2
 8001788:	f040 8371 	bne.w	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
  {
    case FOCModulationType::Trapezoid_120 :
      // see https://www.youtube.com/watch?v=InzXA7mWBWE Slide 5
      // determine the sector
      sector = 6 * (_normalizeAngle(angle_el + _PI_6 ) / _2PI); // adding PI/6 to align with other modes
 800178c:	edd7 7a00 	vldr	s15, [r7]
 8001790:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8001a88 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x334>
 8001794:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	f001 fa0e 	bl	8002bbc <_Z15_normalizeAnglef>
 80017a0:	eeb0 7a40 	vmov.f32	s14, s0
 80017a4:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8001a8c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x338>
 80017a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ac:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80017b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b8:	ee17 3a90 	vmov	r3, s15
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      // centering the voltages around either
      // modulation_centered == true > driver.voltage_limit/2
      // modulation_centered == false > or Adaptable centering, all phases drawn to 0 when Uq=0
      center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d009      	beq.n	80017dc <_ZN9BLDCMotor15setPhaseVoltageEfff+0x88>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80017ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80017d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017da:	e001      	b.n	80017e0 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x8c>
 80017dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80017e0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

      if(trap_120_map[sector][0]  == _HIGH_IMPEDANCE){
 80017e4:	49aa      	ldr	r1, [pc, #680]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80017e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d141      	bne.n	800187c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x128>
        Ua= center;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017fc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        Ub = trap_120_map[sector][1] * Uq + center;
 8001800:	49a3      	ldr	r1, [pc, #652]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	440b      	add	r3, r1
 800180e:	3304      	adds	r3, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181a:	edd7 7a02 	vldr	s15, [r7, #8]
 800181e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001822:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_120_map[sector][2] * Uq + center;
 8001830:	4997      	ldr	r1, [pc, #604]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001832:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	440b      	add	r3, r1
 800183e:	3308      	adds	r3, #8
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	ee07 3a90 	vmov	s15, r3
 8001846:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800184a:	edd7 7a02 	vldr	s15, [r7, #8]
 800184e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001852:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_OFF, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // disable phase if possible
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3314      	adds	r3, #20
 8001870:	681c      	ldr	r4, [r3, #0]
 8001872:	2301      	movs	r3, #1
 8001874:	2201      	movs	r2, #1
 8001876:	2100      	movs	r1, #0
 8001878:	47a0      	blx	r4
        Ub = trap_120_map[sector][1] * Uq + center;
        Uc = center;
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF);// disable phase if possible
      }

    break;
 800187a:	e2f8      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
      }else if(trap_120_map[sector][1]  == _HIGH_IMPEDANCE){
 800187c:	4984      	ldr	r1, [pc, #528]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 800187e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001880:	4613      	mov	r3, r2
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	3304      	adds	r3, #4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d140      	bne.n	8001914 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x1c0>
        Ua = trap_120_map[sector][0] * Uq + center;
 8001892:	497f      	ldr	r1, [pc, #508]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001894:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = center;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        Uc = trap_120_map[sector][2] * Uq + center;
 80018c8:	4971      	ldr	r1, [pc, #452]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 80018ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3308      	adds	r3, #8
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_OFF, PhaseState::PHASE_ON);// disable phase if possible
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3314      	adds	r3, #20
 8001908:	681c      	ldr	r4, [r3, #0]
 800190a:	2301      	movs	r3, #1
 800190c:	2200      	movs	r2, #0
 800190e:	2101      	movs	r1, #1
 8001910:	47a0      	blx	r4
    break;
 8001912:	e2ac      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
        Ua = trap_120_map[sector][0] * Uq + center;
 8001914:	495e      	ldr	r1, [pc, #376]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001916:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001934:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001938:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_120_map[sector][1] * Uq + center;
 8001942:	4953      	ldr	r1, [pc, #332]	@ (8001a90 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x33c>)
 8001944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	3304      	adds	r3, #4
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001960:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001964:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = center;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001976:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF);// disable phase if possible
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	3314      	adds	r3, #20
 800198a:	681c      	ldr	r4, [r3, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	2201      	movs	r2, #1
 8001990:	2101      	movs	r1, #1
 8001992:	47a0      	blx	r4
    break;
 8001994:	e26b      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>

    case FOCModulationType::Trapezoid_150 :
      // see https://www.youtube.com/watch?v=InzXA7mWBWE Slide 8
      // determine the sector
      sector = 12 * (_normalizeAngle(angle_el + _PI_6 ) / _2PI); // adding PI/6 to align with other modes
 8001996:	edd7 7a00 	vldr	s15, [r7]
 800199a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001a88 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x334>
 800199e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f001 f909 	bl	8002bbc <_Z15_normalizeAnglef>
 80019aa:	eeb0 7a40 	vmov.f32	s14, s0
 80019ae:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8001a8c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x338>
 80019b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019b6:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c2:	ee17 3a90 	vmov	r3, s15
 80019c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      // centering the voltages around either
      // modulation_centered == true > driver.voltage_limit/2
      // modulation_centered == false > or Adaptable centering, all phases drawn to 0 when Uq=0
      center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x292>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 80019d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80019dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	e001      	b.n	80019ea <_ZN9BLDCMotor15setPhaseVoltageEfff+0x296>
 80019e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

      if(trap_150_map[sector][0]  == _HIGH_IMPEDANCE){
 80019ee:	4929      	ldr	r1, [pc, #164]	@ (8001a94 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 80019f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d14a      	bne.n	8001a98 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x344>
        Ua= center;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a06:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001a0a:	4922      	ldr	r1, [pc, #136]	@ (8001a94 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001a0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a0e:	4613      	mov	r3, r2
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	440b      	add	r3, r1
 8001a18:	3304      	adds	r3, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001a3a:	4916      	ldr	r1, [pc, #88]	@ (8001a94 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x340>)
 8001a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	3308      	adds	r3, #8
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_OFF, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // disable phase if possible
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3314      	adds	r3, #20
 8001a7a:	681c      	ldr	r4, [r3, #0]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	2201      	movs	r2, #1
 8001a80:	2100      	movs	r1, #0
 8001a82:	47a0      	blx	r4
        Ub = trap_150_map[sector][1] * Uq + center;
        Uc = trap_150_map[sector][2] * Uq + center;
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // enable all phases
      }

    break;
 8001a84:	e1f3      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001a86:	bf00      	nop
 8001a88:	3f060a92 	.word	0x3f060a92
 8001a8c:	40c90fdb 	.word	0x40c90fdb
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000048 	.word	0x20000048
      }else if(trap_150_map[sector][1]  == _HIGH_IMPEDANCE){
 8001a98:	4976      	ldr	r1, [pc, #472]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	3304      	adds	r3, #4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d140      	bne.n	8001b30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x3dc>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001aae:	4971      	ldr	r1, [pc, #452]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	4413      	add	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	440b      	add	r3, r1
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ace:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = center;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001ae4:	4963      	ldr	r1, [pc, #396]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ae8:	4613      	mov	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	3308      	adds	r3, #8
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b06:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_OFF, PhaseState::PHASE_ON); // disable phase if possible
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3314      	adds	r3, #20
 8001b24:	681c      	ldr	r4, [r3, #0]
 8001b26:	2301      	movs	r3, #1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	47a0      	blx	r4
    break;
 8001b2e:	e19e      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
      }else if(trap_150_map[sector][2]  == _HIGH_IMPEDANCE){
 8001b30:	4950      	ldr	r1, [pc, #320]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b34:	4613      	mov	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3308      	adds	r3, #8
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d140      	bne.n	8001bc8 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x474>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001b46:	494b      	ldr	r1, [pc, #300]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001b74:	493f      	ldr	r1, [pc, #252]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001b76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	3304      	adds	r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = center;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ba8:	f8c3 2168 	str.w	r2, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_OFF); // disable phase if possible
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3314      	adds	r3, #20
 8001bbc:	681c      	ldr	r4, [r3, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	47a0      	blx	r4
    break;
 8001bc6:	e152      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
        Ua = trap_150_map[sector][0] * Uq + center;
 8001bc8:	492a      	ldr	r1, [pc, #168]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub = trap_150_map[sector][1] * Uq + center;
 8001bf6:	491f      	ldr	r1, [pc, #124]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	3304      	adds	r3, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c10:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c18:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc = trap_150_map[sector][2] * Uq + center;
 8001c26:	4913      	ldr	r1, [pc, #76]	@ (8001c74 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x520>)
 8001c28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	3308      	adds	r3, #8
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c48:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        driver->setPhaseState(PhaseState::PHASE_ON, PhaseState::PHASE_ON, PhaseState::PHASE_ON); // enable all phases
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3314      	adds	r3, #20
 8001c66:	681c      	ldr	r4, [r3, #0]
 8001c68:	2301      	movs	r3, #1
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	47a0      	blx	r4
    break;
 8001c70:	e0fd      	b.n	8001e6e <_ZN9BLDCMotor15setPhaseVoltageEfff+0x71a>
 8001c72:	bf00      	nop
 8001c74:	20000048 	.word	0x20000048
 8001c78:	3f5db3d7 	.word	0x3f5db3d7

    case FOCModulationType::SinePWM :
    case FOCModulationType::SpaceVectorPWM :
      // Sinusoidal PWM modulation
      // Inverse Park + Clarke transformation
      _sincos(angle_el, &_sa, &_ca);
 8001c7c:	f107 0218 	add.w	r2, r7, #24
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	ed97 0a00 	vldr	s0, [r7]
 8001c8c:	f000 ff78 	bl	8002b80 <_Z7_sincosfPfS_>

      // Inverse park transform
      Ualpha =  _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 8001c90:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
      Ubeta =  _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 8001cb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

      // Clarke transform
      Ua = Ualpha;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
      Ub = -0.5f * Ualpha + _SQRT3_2 * Ubeta;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001ce4:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001ce8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001cf2:	ed5f 6a1f 	vldr	s13, [pc, #-124]	@ 8001c78 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x524>
 8001cf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
      Uc = -0.5f * Ualpha - _SQRT3_2 * Ubeta;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001d0a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001d0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001d18:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8001c78 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x524>
 8001d1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168

      center = driver->voltage_limit/2;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001d30:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d34:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      if (foc_modulation == FOCModulationType::SpaceVectorPWM){
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d139      	bne.n	8001dbe <_ZN9BLDCMotor15setPhaseVoltageEfff+0x66a>
        // discussed here: https://community.simplefoc.com/t/embedded-world-2023-stm32-cordic-co-processor/3107/165?u=candas1
        // a bit more info here: https://microchipdeveloper.com/mct5001:which-zsm-is-best
        // Midpoint Clamp
        float Umin = std::min(Ua, std::min(Ub, Uc));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4610      	mov	r0, r2
 8001d60:	f000 f8b2 	bl	8001ec8 <_ZSt3minIfERKT_S2_S2_>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4619      	mov	r1, r3
 8001d68:	4620      	mov	r0, r4
 8001d6a:	f000 f8ad 	bl	8001ec8 <_ZSt3minIfERKT_S2_S2_>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
        float Umax = std::max(Ua, std::max(Ub, Uc));
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001d86:	4619      	mov	r1, r3
 8001d88:	4610      	mov	r0, r2
 8001d8a:	f000 f8b6 	bl	8001efa <_ZSt3maxIfERKT_S2_S2_>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4619      	mov	r1, r3
 8001d92:	4620      	mov	r0, r4
 8001d94:	f000 f8b1 	bl	8001efa <_ZSt3maxIfERKT_S2_S2_>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	623b      	str	r3, [r7, #32]
        center -= (Umax+Umin) / 2;
 8001d9e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001da2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001da6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001daa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001dae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dba:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      } 

      if (!modulation_centered) {
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f993 3067 	ldrsb.w	r3, [r3, #103]	@ 0x67
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d133      	bne.n	8001e30 <_ZN9BLDCMotor15setPhaseVoltageEfff+0x6dc>
        float Umin = std::min(Ua, std::min(Ub, Uc));
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f503 74b0 	add.w	r4, r3, #352	@ 0x160
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f503 72b2 	add.w	r2, r3, #356	@ 0x164
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4610      	mov	r0, r2
 8001dde:	f000 f873 	bl	8001ec8 <_ZSt3minIfERKT_S2_S2_>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f000 f86e 	bl	8001ec8 <_ZSt3minIfERKT_S2_S2_>
 8001dec:	4603      	mov	r3, r0
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61fb      	str	r3, [r7, #28]
        Ua -= Umin;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8001df8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub -= Umin;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001e0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc -= Umin;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8001e20:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
        Ua += center;
        Ub += center;
        Uc += center;
      }

      break;
 8001e2e:	e01d      	b.n	8001e6c <_ZN9BLDCMotor15setPhaseVoltageEfff+0x718>
        Ua += center;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	ed93 7a58 	vldr	s14, [r3, #352]	@ 0x160
 8001e36:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	edc3 7a58 	vstr	s15, [r3, #352]	@ 0x160
        Ub += center;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	ed93 7a59 	vldr	s14, [r3, #356]	@ 0x164
 8001e4a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
        Uc += center;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	ed93 7a5a 	vldr	s14, [r3, #360]	@ 0x168
 8001e5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	edc3 7a5a 	vstr	s15, [r3, #360]	@ 0x168
      break;
 8001e6c:	bf00      	nop

  }

  // set the voltages in driver
  driver->setPwm(Ua, Ub, Uc);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f8d3 115c 	ldr.w	r1, [r3, #348]	@ 0x15c
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	edd2 7a58 	vldr	s15, [r2, #352]	@ 0x160
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	ed92 7a59 	vldr	s14, [r2, #356]	@ 0x164
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	edd2 6a5a 	vldr	s13, [r2, #360]	@ 0x168
 8001e92:	eeb0 1a66 	vmov.f32	s2, s13
 8001e96:	eef0 0a47 	vmov.f32	s1, s14
 8001e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9e:	4608      	mov	r0, r1
 8001ea0:	4798      	blx	r3
}
 8001ea2:	bf00      	nop
 8001ea4:	3734      	adds	r7, #52	@ 0x34
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}
 8001eaa:	bf00      	nop

08001eac <_ZN9BLDCMotor16velocityOpenloopEf>:


// Function (iterative) generating open loop movement for target velocity
// - target_velocity - rad/s
// it uses voltage_limit variable
float BLDCMotor::velocityOpenloop(float target_velocity){
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	ed87 0a00 	vstr	s0, [r7]
 8001eb8:	deff      	udf	#255	@ 0xff

08001eba <_ZN9BLDCMotor13angleOpenloopEf>:
}

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float BLDCMotor::angleOpenloop(float target_angle){
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	ed87 0a00 	vstr	s0, [r7]
 8001ec6:	deff      	udf	#255	@ 0xff

08001ec8 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	ed93 7a00 	vldr	s14, [r3]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee6:	d501      	bpl.n	8001eec <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	e000      	b.n	8001eee <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001eec:	687b      	ldr	r3, [r7, #4]
    }
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	d501      	bpl.n	8001f1e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	e000      	b.n	8001f20 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001f1e:	687b      	ldr	r3, [r7, #4]
    }
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <cppInit>:
void doMotor(char* cmd) {
	//command.motor(&motor, cmd);
}

void cppInit()
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	// on pins 12,11,10,9,8
	// pin 12 is used as ground
	//pinMode(12,OUTPUT);
	//pinMode(12,LOW);

	encoder.init();
 8001f30:	4821      	ldr	r0, [pc, #132]	@ (8001fb8 <cppInit+0x8c>)
 8001f32:	f001 f955 	bl	80031e0 <_ZN7Encoder4initEv>
	//encoder.enableInterrupts(doA, doB);

	// link the motor to the sensor
	motor.linkSensor(&encoder);
 8001f36:	4920      	ldr	r1, [pc, #128]	@ (8001fb8 <cppInit+0x8c>)
 8001f38:	4820      	ldr	r0, [pc, #128]	@ (8001fbc <cppInit+0x90>)
 8001f3a:	f000 fb79 	bl	8002630 <_ZN8FOCMotor10linkSensorEP6Sensor>

	// driver config
	// power supply voltage [V]
	driver.voltage_power_supply = 12;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <cppInit+0x94>)
 8001f40:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <cppInit+0x98>)
 8001f42:	609a      	str	r2, [r3, #8]
	driver.init();
 8001f44:	481e      	ldr	r0, [pc, #120]	@ (8001fc0 <cppInit+0x94>)
 8001f46:	f000 ff5f 	bl	8002e08 <_ZN14BLDCDriver3PWM4initEv>
	// link the motor and the driver
	motor.linkDriver(&driver);
 8001f4a:	491d      	ldr	r1, [pc, #116]	@ (8001fc0 <cppInit+0x94>)
 8001f4c:	481b      	ldr	r0, [pc, #108]	@ (8001fbc <cppInit+0x90>)
 8001f4e:	f7fe fc6b 	bl	8000828 <_ZN9BLDCMotor10linkDriverEP10BLDCDriver>

	// aligning voltage [V]
	motor.voltage_sensor_align = 3;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <cppInit+0x90>)
 8001f54:	4a1c      	ldr	r2, [pc, #112]	@ (8001fc8 <cppInit+0x9c>)
 8001f56:	641a      	str	r2, [r3, #64]	@ 0x40

	// set motion control loop to be used
	motor.controller = MotionControlType::angle;
 8001f58:	4b18      	ldr	r3, [pc, #96]	@ (8001fbc <cppInit+0x90>)
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69

	// contoller configuration
	// default parameters in defaults.h

	// velocity PI controller parameters
	motor.PID_velocity.P = 0.2f;
 8001f60:	4b16      	ldr	r3, [pc, #88]	@ (8001fbc <cppInit+0x90>)
 8001f62:	4a1a      	ldr	r2, [pc, #104]	@ (8001fcc <cppInit+0xa0>)
 8001f64:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	motor.PID_velocity.I = 20;
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <cppInit+0x90>)
 8001f6a:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <cppInit+0xa4>)
 8001f6c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	motor.PID_velocity.D = 0;
 8001f70:	4b12      	ldr	r3, [pc, #72]	@ (8001fbc <cppInit+0x90>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	// default voltage_power_supply
	motor.voltage_limit = 6;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <cppInit+0x90>)
 8001f7c:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <cppInit+0xa8>)
 8001f7e:	659a      	str	r2, [r3, #88]	@ 0x58
	// jerk control using voltage voltage ramp
	// default value is 300 volts per sec  ~ 0.3V per millisecond
	motor.PID_velocity.output_ramp = 1000;
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <cppInit+0x90>)
 8001f82:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <cppInit+0xac>)
 8001f84:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

	// velocity low pass filtering time constant
	motor.LPF_velocity.Tf = 0.01f;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	@ (8001fbc <cppInit+0x90>)
 8001f8a:	4a14      	ldr	r2, [pc, #80]	@ (8001fdc <cppInit+0xb0>)
 8001f8c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	// angle P controller
	motor.P_angle.P = 20;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <cppInit+0x90>)
 8001f92:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd0 <cppInit+0xa4>)
 8001f94:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
	//  maximal velocity of the position control
	motor.velocity_limit = 4;
 8001f98:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <cppInit+0x90>)
 8001f9a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001f9e:	661a      	str	r2, [r3, #96]	@ 0x60

	// initialize motor
	motor.init();
 8001fa0:	4806      	ldr	r0, [pc, #24]	@ (8001fbc <cppInit+0x90>)
 8001fa2:	f7fe fc51 	bl	8000848 <_ZN9BLDCMotor4initEv>
	// align encoder and start FOC
	motor.initFOC();
 8001fa6:	4805      	ldr	r0, [pc, #20]	@ (8001fbc <cppInit+0x90>)
 8001fa8:	f7fe fd6a 	bl	8000a80 <_ZN9BLDCMotor7initFOCEv>

	HAL_Delay(1000);
 8001fac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fb0:	f001 f9b4 	bl	800331c <HAL_Delay>
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000384 	.word	0x20000384
 8001fbc:	200001d4 	.word	0x200001d4
 8001fc0:	20000344 	.word	0x20000344
 8001fc4:	41400000 	.word	0x41400000
 8001fc8:	40400000 	.word	0x40400000
 8001fcc:	3e4ccccd 	.word	0x3e4ccccd
 8001fd0:	41a00000 	.word	0x41a00000
 8001fd4:	40c00000 	.word	0x40c00000
 8001fd8:	447a0000 	.word	0x447a0000
 8001fdc:	3c23d70a 	.word	0x3c23d70a

08001fe0 <cppLoop>:

void cppLoop()
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	// main FOC algorithm function
	// the faster you run this function the better
	// Arduino UNO loop  ~1kHz
	// Bluepill loop ~10kHz
	motor.loopFOC();
 8001fe4:	4804      	ldr	r0, [pc, #16]	@ (8001ff8 <cppLoop+0x18>)
 8001fe6:	f7fe ffb9 	bl	8000f5c <_ZN9BLDCMotor7loopFOCEv>

	// Motion control function
	// velocity, position or voltage (defined in motor.controller)
	// this function can be run at much lower frequency than loopFOC() function
	// You can also use motor.move() and set the motor.target in the code
	motor.move();
 8001fea:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8001ffc <cppLoop+0x1c>
 8001fee:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <cppLoop+0x18>)
 8001ff0:	f7fe fffc 	bl	8000fec <_ZN9BLDCMotor4moveEf>
	// function intended to be used with serial plotter to monitor motor variables
	// significantly slowing the execution down!!!!
	// motor.monitor();

	// user communication
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	200001d4 	.word	0x200001d4
 8001ffc:	c640e400 	.word	0xc640e400

08002000 <_Z41__static_initialization_and_destruction_0v>:
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af04      	add	r7, sp, #16
BLDCMotor motor(11);
 8002006:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 8002048 <_Z41__static_initialization_and_destruction_0v+0x48>
 800200a:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8002048 <_Z41__static_initialization_and_destruction_0v+0x48>
 800200e:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002048 <_Z41__static_initialization_and_destruction_0v+0x48>
 8002012:	210b      	movs	r1, #11
 8002014:	480d      	ldr	r0, [pc, #52]	@ (800204c <_Z41__static_initialization_and_destruction_0v+0x4c>)
 8002016:	f7fe fbcd 	bl	80007b4 <_ZN9BLDCMotorC1Eifff>
BLDCDriver3PWM driver(9, 10, 11, 12); // mini v1.1
 800201a:	4b0d      	ldr	r3, [pc, #52]	@ (8002050 <_Z41__static_initialization_and_destruction_0v+0x50>)
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <_Z41__static_initialization_and_destruction_0v+0x50>)
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	230c      	movs	r3, #12
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	230b      	movs	r3, #11
 8002028:	220a      	movs	r2, #10
 800202a:	2109      	movs	r1, #9
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <_Z41__static_initialization_and_destruction_0v+0x54>)
 800202e:	f000 fe89 	bl	8002d44 <_ZN14BLDCDriver3PWMC1Eiiiiii>
Encoder encoder(2, 3, 500);
 8002032:	2300      	movs	r3, #0
 8002034:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002058 <_Z41__static_initialization_and_destruction_0v+0x58>
 8002038:	2203      	movs	r2, #3
 800203a:	2102      	movs	r1, #2
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <_Z41__static_initialization_and_destruction_0v+0x5c>)
 800203e:	f001 f827 	bl	8003090 <_ZN7EncoderC1Eiifi>
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	c640e400 	.word	0xc640e400
 800204c:	200001d4 	.word	0x200001d4
 8002050:	ffffcfc7 	.word	0xffffcfc7
 8002054:	20000344 	.word	0x20000344
 8002058:	43fa0000 	.word	0x43fa0000
 800205c:	20000384 	.word	0x20000384

08002060 <_GLOBAL__sub_I_motor>:
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
 8002064:	f7ff ffcc 	bl	8002000 <_Z41__static_initialization_and_destruction_0v>
 8002068:	bd80      	pop	{r7, pc}

0800206a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800206e:	f001 f8ef 	bl	8003250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002072:	f000 f80b 	bl	800208c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002076:	f000 f8c9 	bl	800220c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800207a:	f000 f897 	bl	80021ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800207e:	f000 f841 	bl	8002104 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  cppInit();
 8002082:	f7ff ff53 	bl	8001f2c <cppInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  cppLoop();
 8002086:	f7ff ffab 	bl	8001fe0 <cppLoop>
 800208a:	e7fc      	b.n	8002086 <main+0x1c>

0800208c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b090      	sub	sp, #64	@ 0x40
 8002090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002092:	f107 0318 	add.w	r3, r7, #24
 8002096:	2228      	movs	r2, #40	@ 0x28
 8002098:	2100      	movs	r1, #0
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fc68 	bl	8005970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ae:	2302      	movs	r3, #2
 80020b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b2:	2301      	movs	r3, #1
 80020b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b6:	2310      	movs	r3, #16
 80020b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020be:	f107 0318 	add.w	r3, r7, #24
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 fba6 	bl	8003814 <HAL_RCC_OscConfig>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80020ce:	f000 f8c1 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020d2:	230f      	movs	r3, #15
 80020d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fba0 	bl	8004830 <HAL_RCC_ClockConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020f6:	f000 f8ad 	bl	8002254 <Error_Handler>
  }
}
 80020fa:	bf00      	nop
 80020fc:	3740      	adds	r7, #64	@ 0x40
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	@ 0x30
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800210a:	f107 030c 	add.w	r3, r7, #12
 800210e:	2224      	movs	r2, #36	@ 0x24
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fc2c 	bl	8005970 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002122:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002124:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002128:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800212a:	4b1f      	ldr	r3, [pc, #124]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002136:	4b1c      	ldr	r3, [pc, #112]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800213c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b1a      	ldr	r3, [pc, #104]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800214a:	2303      	movs	r3, #3
 800214c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002152:	2301      	movs	r3, #1
 8002154:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002162:	2301      	movs	r3, #1
 8002164:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800216e:	f107 030c 	add.w	r3, r7, #12
 8002172:	4619      	mov	r1, r3
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002176:	f002 fd6d 	bl	8004c54 <HAL_TIM_Encoder_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002180:	f000 f868 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	@ (80021a8 <MX_TIM2_Init+0xa4>)
 8002192:	f002 ff3d 	bl	8005010 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800219c:	f000 f85a 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3730      	adds	r7, #48	@ 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	200003e8 	.word	0x200003e8

080021ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021b2:	4a15      	ldr	r2, [pc, #84]	@ (8002208 <MX_USART2_UART_Init+0x5c>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80021b6:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021b8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80021bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	@ (8002204 <MX_USART2_UART_Init+0x58>)
 80021f0:	f002 ff7c 	bl	80050ec <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021fa:	f000 f82b 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000434 	.word	0x20000434
 8002208:	40004400 	.word	0x40004400

0800220c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002212:	4b0f      	ldr	r3, [pc, #60]	@ (8002250 <MX_GPIO_Init+0x44>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <MX_GPIO_Init+0x44>)
 8002218:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800221c:	6153      	str	r3, [r2, #20]
 800221e:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <MX_GPIO_Init+0x44>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <MX_GPIO_Init+0x44>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <MX_GPIO_Init+0x44>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002234:	6153      	str	r3, [r2, #20]
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <MX_GPIO_Init+0x44>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <Error_Handler+0x8>

08002260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	4b0f      	ldr	r3, [pc, #60]	@ (80022a4 <HAL_MspInit+0x44>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	4a0e      	ldr	r2, [pc, #56]	@ (80022a4 <HAL_MspInit+0x44>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6193      	str	r3, [r2, #24]
 8002272:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <HAL_MspInit+0x44>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_MspInit+0x44>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <HAL_MspInit+0x44>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_MspInit+0x44>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c8:	d128      	bne.n	800231c <HAL_TIM_Encoder_MspInit+0x74>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ca:	4b16      	ldr	r3, [pc, #88]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a15      	ldr	r2, [pc, #84]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ec:	6153      	str	r3, [r2, #20]
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <HAL_TIM_Encoder_MspInit+0x7c>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022fa:	2303      	movs	r3, #3
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230a:	2301      	movs	r3, #1
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002318:	f001 f90a 	bl	8003530 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	@ 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000

08002328 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
 800233e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a18      	ldr	r2, [pc, #96]	@ (80023a8 <HAL_UART_MspInit+0x80>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d129      	bne.n	800239e <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <HAL_UART_MspInit+0x84>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a17      	ldr	r2, [pc, #92]	@ (80023ac <HAL_UART_MspInit+0x84>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_UART_MspInit+0x84>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_UART_MspInit+0x84>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_UART_MspInit+0x84>)
 8002368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800236c:	6153      	str	r3, [r2, #20]
 800236e:	4b0f      	ldr	r3, [pc, #60]	@ (80023ac <HAL_UART_MspInit+0x84>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800237a:	f248 0304 	movw	r3, #32772	@ 0x8004
 800237e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238c:	2307      	movs	r3, #7
 800238e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800239a:	f001 f8c9 	bl	8003530 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800239e:	bf00      	nop
 80023a0:	3728      	adds	r7, #40	@ 0x28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40004400 	.word	0x40004400
 80023ac:	40021000 	.word	0x40021000

080023b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b4:	bf00      	nop
 80023b6:	e7fd      	b.n	80023b4 <NMI_Handler+0x4>

080023b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <HardFault_Handler+0x4>

080023c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <MemManage_Handler+0x4>

080023c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002406:	f000 ff69 	bl	80032dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002414:	4b06      	ldr	r3, [pc, #24]	@ (8002430 <SystemInit+0x20>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800241a:	4a05      	ldr	r2, [pc, #20]	@ (8002430 <SystemInit+0x20>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <_ZN8FOCMotorC1Ev>:
//#include "../../communication/SimpleFOCDebug.h"

/**
 * Default constructor - setting all variabels to default values
 */
FOCMotor::FOCMotor()
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	4a73      	ldr	r2, [pc, #460]	@ (800260c <_ZN8FOCMotorC1Ev+0x1d8>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	336c      	adds	r3, #108	@ 0x6c
 8002466:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800246a:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 800246e:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 8002472:	eddf 0a68 	vldr	s1, [pc, #416]	@ 8002614 <_ZN8FOCMotorC1Ev+0x1e0>
 8002476:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 800247a:	4618      	mov	r0, r3
 800247c:	f000 fbdd 	bl	8002c3a <_ZN13PIDControllerC1Efffff>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3390      	adds	r3, #144	@ 0x90
 8002484:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8002488:	eddf 1a61 	vldr	s3, [pc, #388]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 800248c:	ed9f 1a60 	vldr	s2, [pc, #384]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 8002490:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8002614 <_ZN8FOCMotorC1Ev+0x1e0>
 8002494:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fbce 	bl	8002c3a <_ZN13PIDControllerC1Efffff>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	33b4      	adds	r3, #180	@ 0xb4
 80024a2:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8002618 <_ZN8FOCMotorC1Ev+0x1e4>
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 fbac 	bl	8002c04 <_ZN13LowPassFilterC1Ef>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	33c0      	adds	r3, #192	@ 0xc0
 80024b0:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8002618 <_ZN8FOCMotorC1Ev+0x1e4>
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fba5 	bl	8002c04 <_ZN13LowPassFilterC1Ef>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	33cc      	adds	r3, #204	@ 0xcc
 80024be:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80024c2:	eddf 1a56 	vldr	s3, [pc, #344]	@ 800261c <_ZN8FOCMotorC1Ev+0x1e8>
 80024c6:	ed9f 1a52 	vldr	s2, [pc, #328]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 80024ca:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80024ce:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fbb1 	bl	8002c3a <_ZN13PIDControllerC1Efffff>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	33f0      	adds	r3, #240	@ 0xf0
 80024dc:	eeb3 2a04 	vmov.f32	s4, #52	@ 0x41a00000  20.0
 80024e0:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 80024e4:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 80024e8:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 80024ec:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fba2 	bl	8002c3a <_ZN13PIDControllerC1Efffff>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80024fc:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8002618 <_ZN8FOCMotorC1Ev+0x1e4>
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fb7f 	bl	8002c04 <_ZN13LowPassFilterC1Ef>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800250c:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 8002610 <_ZN8FOCMotorC1Ev+0x1dc>
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fb77 	bl	8002c04 <_ZN13LowPassFilterC1Ef>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a3d      	ldr	r2, [pc, #244]	@ (8002620 <_ZN8FOCMotorC1Ev+0x1ec>)
 800252a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 213d 	strb.w	r2, [r3, #317]	@ 0x13d
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2264      	movs	r2, #100	@ 0x64
 8002542:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2209      	movs	r2, #9
 800255a:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2204      	movs	r2, #4
 8002562:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2263      	movs	r2, #99	@ 0x63
 800256a:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
  // maximum angular velocity to be used for positioning 
  velocity_limit = DEF_VEL_LIM;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a2a      	ldr	r2, [pc, #168]	@ (8002624 <_ZN8FOCMotorC1Ev+0x1f0>)
 800257a:	661a      	str	r2, [r3, #96]	@ 0x60
  // maximum voltage to be set to the motor
  voltage_limit = DEF_POWER_SUPPLY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a2a      	ldr	r2, [pc, #168]	@ (8002628 <_ZN8FOCMotorC1Ev+0x1f4>)
 8002580:	659a      	str	r2, [r3, #88]	@ 0x58
  // not set on the begining
  current_limit = DEF_CURRENT_LIM;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c

  // index search velocity
  velocity_index_search = DEF_INDEX_SEARCH_TARGET_VELOCITY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
  // sensor and motor align voltage
  voltage_sensor_align = DEF_VOLTAGE_SENSOR_ALIGN;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a25      	ldr	r2, [pc, #148]	@ (800262c <_ZN8FOCMotorC1Ev+0x1f8>)
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40

  // default modulation is SinePWM
  foc_modulation = FOCModulationType::SinePWM;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

  // default target value
  target = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	605a      	str	r2, [r3, #4]
  voltage.d = 0;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	625a      	str	r2, [r3, #36]	@ 0x24
  voltage.q = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
  // current target values
  current_sp = 0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	619a      	str	r2, [r3, #24]
  current.q = 0;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
  current.d = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  // voltage bemf 
  voltage_bemf = 0;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	635a      	str	r2, [r3, #52]	@ 0x34

  // Initialize phase voltages U alpha and U beta used for inverse Park and Clarke transform
  Ualpha = 0;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38
  Ubeta = 0;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  //monitor_port 
  //monitor_port = nullptr;
  //sensor 
  sensor_offset = 0.0f;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  sensor = nullptr;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
  //current sensor 
  current_sense = nullptr;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
}
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	08005a34 	.word	0x08005a34
 8002610:	00000000 	.word	0x00000000
 8002614:	43960000 	.word	0x43960000
 8002618:	3ba3d70a 	.word	0x3ba3d70a
 800261c:	447a0000 	.word	0x447a0000
 8002620:	c640e400 	.word	0xc640e400
 8002624:	41a00000 	.word	0x41a00000
 8002628:	41400000 	.word	0x41400000
 800262c:	40400000 	.word	0x40400000

08002630 <_ZN8FOCMotor10linkSensorEP6Sensor>:


/**
	Sensor linking method
*/
void FOCMotor::linkSensor(Sensor* _sensor) {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  sensor = _sensor;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_ZN8FOCMotor10shaftAngleEv>:
void FOCMotor::linkCurrentSense(CurrentSense* _current_sense) {
  current_sense = _current_sense;
}

// shaft angle calculation
float FOCMotor::shaftAngle() {
 800264e:	b590      	push	{r4, r7, lr}
 8002650:	ed2d 8b02 	vpush	{d8}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_angle;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002660:	2b00      	cmp	r3, #0
 8002662:	d103      	bne.n	800266c <_ZN8FOCMotor10shaftAngleEv+0x1e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	edd3 7a03 	vldr	s15, [r3, #12]
 800266a:	e024      	b.n	80026b6 <_ZN8FOCMotor10shaftAngleEv+0x68>
  return sensor_direction*LPF_angle(sensor->getAngle()) - sensor_offset;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8002672:	ee07 3a90 	vmov	s15, r3
 8002676:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f503 7490 	add.w	r4, r3, #288	@ 0x120
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3304      	adds	r3, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4610      	mov	r0, r2
 8002694:	4798      	blx	r3
 8002696:	eef0 7a40 	vmov.f32	s15, s0
 800269a:	eeb0 0a67 	vmov.f32	s0, s15
 800269e:	4620      	mov	r0, r4
 80026a0:	f000 fac4 	bl	8002c2c <_ZN13LowPassFilterclEf>
 80026a4:	eef0 7a40 	vmov.f32	s15, s0
 80026a8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 80026b2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80026b6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	ecbd 8b02 	vpop	{d8}
 80026c2:	bd90      	pop	{r4, r7, pc}

080026c4 <_ZN8FOCMotor13shaftVelocityEv>:
// shaft velocity calculation
float FOCMotor::shaftVelocity() {
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	ed2d 8b02 	vpush	{d8}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return shaft_velocity;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <_ZN8FOCMotor13shaftVelocityEv+0x1e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80026e0:	e01f      	b.n	8002722 <_ZN8FOCMotor13shaftVelocityEv+0x5e>
  return sensor_direction*LPF_velocity(sensor->getVelocity());
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f503 748a 	add.w	r4, r3, #276	@ 0x114
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	330c      	adds	r3, #12
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4610      	mov	r0, r2
 800270a:	4798      	blx	r3
 800270c:	eef0 7a40 	vmov.f32	s15, s0
 8002710:	eeb0 0a67 	vmov.f32	s0, s15
 8002714:	4620      	mov	r0, r4
 8002716:	f000 fa89 	bl	8002c2c <_ZN13LowPassFilterclEf>
 800271a:	eef0 7a40 	vmov.f32	s15, s0
 800271e:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8002722:	eeb0 0a67 	vmov.f32	s0, s15
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	ecbd 8b02 	vpop	{d8}
 800272e:	bd90      	pop	{r4, r7, pc}

08002730 <_ZN8FOCMotor15electricalAngleEv>:

float FOCMotor::electricalAngle(){
 8002730:	b580      	push	{r7, lr}
 8002732:	ed2d 8b02 	vpush	{d8}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  // if no sensor linked return previous value ( for open loop )
  if(!sensor) return electrical_angle;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <_ZN8FOCMotor15electricalAngleEv+0x1e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	edd3 7a04 	vldr	s15, [r3, #16]
 800274c:	e025      	b.n	800279a <_ZN8FOCMotor15electricalAngleEv+0x6a>
  return  _normalizeAngle( (float)(sensor_direction * pole_pairs) * sensor->getMechanicalAngle()  - zero_electric_angle );
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f993 313c 	ldrsb.w	r3, [r3, #316]	@ 0x13c
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4610      	mov	r0, r2
 8002778:	4798      	blx	r3
 800277a:	eef0 7a40 	vmov.f32	s15, s0
 800277e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8002788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278c:	eeb0 0a67 	vmov.f32	s0, s15
 8002790:	f000 fa14 	bl	8002bbc <_Z15_normalizeAnglef>
 8002794:	eef0 7a40 	vmov.f32	s15, s0
 8002798:	bf00      	nop
}
 800279a:	eeb0 0a67 	vmov.f32	s0, s15
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	ecbd 8b02 	vpop	{d8}
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZN6Sensor6updateEv>:
#include "../foc_utils.h"
//#include "../time_utils.h"



void Sensor::update() {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    float val = getSensorAngle();
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	331c      	adds	r3, #28
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	ed87 0a03 	vstr	s0, [r7, #12]
    if (val<0) // sensor angles are strictly non-negative. Negative values are used to signal errors.
 80027c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80027c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027cc:	d40c      	bmi.n	80027e8 <_ZN6Sensor6updateEv+0x40>
        return; // TODO signal error, e.g. via a flag and counter
    //angle_prev_ts = _micros();
    float d_angle = val - angle_prev;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80027d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80027d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027dc:	edc7 7a02 	vstr	s15, [r7, #8]
    // if overflow happened track it as full rotation
    //if(abs(d_angle) > (0.8f*_2PI) ) full_rotations += ( d_angle > 0 ) ? -1 : 1;
    angle_prev = val;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	e000      	b.n	80027ea <_ZN6Sensor6updateEv+0x42>
        return; // TODO signal error, e.g. via a flag and counter
 80027e8:	bf00      	nop
}
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZN6Sensor11getVelocityEv>:


 /** get current angular velocity (rad/s) */
float Sensor::getVelocity() {
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
    // calculate sample time
    float Ts = (angle_prev_ts - vel_angle_prev_ts)*1e-6f;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80028c8 <_ZN6Sensor11getVelocityEv+0xd8>
 800280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002812:	edc7 7a03 	vstr	s15, [r7, #12]
    if (Ts < 0.0f) {    // handle micros() overflow - we need to reset vel_angle_prev_ts
 8002816:	edd7 7a03 	vldr	s15, [r7, #12]
 800281a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d50e      	bpl.n	8002842 <_ZN6Sensor11getVelocityEv+0x52>
        vel_angle_prev = angle_prev;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	615a      	str	r2, [r3, #20]
        vel_full_rotations = full_rotations;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	621a      	str	r2, [r3, #32]
        vel_angle_prev_ts = angle_prev_ts;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	619a      	str	r2, [r3, #24]
        return velocity;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	e038      	b.n	80028b4 <_ZN6Sensor11getVelocityEv+0xc4>
    }
    if (Ts < min_elapsed_time) return velocity; // don't update velocity if deltaT is too small
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	edd3 7a01 	vldr	s15, [r3, #4]
 8002848:	ed97 7a03 	vldr	s14, [r7, #12]
 800284c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d502      	bpl.n	800285c <_ZN6Sensor11getVelocityEv+0x6c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	e02b      	b.n	80028b4 <_ZN6Sensor11getVelocityEv+0xc4>

    velocity = ( (float)(full_rotations - vel_full_rotations)*_2PI + (angle_prev - vel_angle_prev) ) / Ts;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80028cc <_ZN6Sensor11getVelocityEv+0xdc>
 8002872:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	edd3 6a03 	vldr	s13, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002882:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002886:	ee77 6a27 	vadd.f32	s13, s14, s15
 800288a:	ed97 7a03 	vldr	s14, [r7, #12]
 800288e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	edc3 7a02 	vstr	s15, [r3, #8]
    vel_angle_prev = angle_prev;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	615a      	str	r2, [r3, #20]
    vel_full_rotations = full_rotations;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	621a      	str	r2, [r3, #32]
    vel_angle_prev_ts = angle_prev_ts;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
    return velocity;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
}
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eeb0 0a67 	vmov.f32	s0, s15
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	358637bd 	.word	0x358637bd
 80028cc:	40c90fdb 	.word	0x40c90fdb

080028d0 <_ZN6Sensor4initEv>:



void Sensor::init() {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
    // initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
    getSensorAngle(); // call once
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	331c      	adds	r3, #28
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
    //delayMicroseconds(1);
    vel_angle_prev = getSensorAngle(); // call again
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	331c      	adds	r3, #28
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	4798      	blx	r3
 80028f0:	eef0 7a40 	vmov.f32	s15, s0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	edc3 7a05 	vstr	s15, [r3, #20]
    //vel_angle_prev_ts = _micros();
    //delay(1);
    getSensorAngle(); // call once
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	331c      	adds	r3, #28
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
    //delayMicroseconds(1);
    angle_prev = getSensorAngle(); // call again
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	331c      	adds	r3, #28
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	4798      	blx	r3
 8002912:	eef0 7a40 	vmov.f32	s15, s0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	edc3 7a03 	vstr	s15, [r3, #12]
    //angle_prev_ts = _micros();
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <_ZN6Sensor18getMechanicalAngleEv>:


float Sensor::getMechanicalAngle() {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    return angle_prev;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	ee07 3a90 	vmov	s15, r3
}
 8002934:	eeb0 0a67 	vmov.f32	s0, s15
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <_ZN6Sensor8getAngleEv>:



float Sensor::getAngle(){
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
    return (float)full_rotations * _2PI + angle_prev;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002958:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002978 <_ZN6Sensor8getAngleEv+0x34>
 800295c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edd3 7a03 	vldr	s15, [r3, #12]
 8002966:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800296a:	eeb0 0a67 	vmov.f32	s0, s15
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40c90fdb 	.word	0x40c90fdb
 800297c:	00000000 	.word	0x00000000

08002980 <_ZN6Sensor15getPreciseAngleEv>:



double Sensor::getPreciseAngle() {
 8002980:	b5b0      	push	{r4, r5, r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    return (double)full_rotations * (double)_2PI + (double)angle_prev;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69db      	ldr	r3, [r3, #28]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fe97 	bl	80006c0 <__aeabi_i2d>
 8002992:	a30f      	add	r3, pc, #60	@ (adr r3, 80029d0 <_ZN6Sensor15getPreciseAngleEv+0x50>)
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f7fd fc16 	bl	80001c8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4614      	mov	r4, r2
 80029a2:	461d      	mov	r5, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fe9b 	bl	80006e4 <__aeabi_f2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4620      	mov	r0, r4
 80029b4:	4629      	mov	r1, r5
 80029b6:	f7fd fd37 	bl	8000428 <__adddf3>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	ec43 2b17 	vmov	d7, r2, r3
}
 80029c2:	eeb0 0a47 	vmov.f32	s0, s14
 80029c6:	eef0 0a67 	vmov.f32	s1, s15
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bdb0      	pop	{r4, r5, r7, pc}
 80029d0:	60000000 	.word	0x60000000
 80029d4:	401921fb 	.word	0x401921fb

080029d8 <_ZN6Sensor16getFullRotationsEv>:



int32_t Sensor::getFullRotations() {
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    return full_rotations;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_ZN6Sensor11needsSearchEv>:



int Sensor::needsSearch() {
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    return 0; // default false
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_ZSt4fmodff>:
  using ::fmod;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a10:	edc7 0a00 	vstr	s1, [r7]
 8002a14:	edd7 0a00 	vldr	s1, [r7]
 8002a18:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a1c:	f002 ff06 	bl	800582c <fmodf>
 8002a20:	eef0 7a40 	vmov.f32	s15, s0
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <_Z4_sinf>:
#include <algorithm>

// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  int32_t t1, t2;
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8002a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a3e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002b14 <_Z4_sinf+0xe4>
 8002a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a4a:	ee17 3a90 	vmov	r3, s15
 8002a4e:	60fb      	str	r3, [r7, #12]
  int frac = i & 0xff;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0a1b      	lsrs	r3, r3, #8
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a62:	d80b      	bhi.n	8002a7c <_Z4_sinf+0x4c>
    t1 = (int32_t)sine_array[i]; t2 = (int32_t)sine_array[i+1];
 8002a64:	4a2c      	ldr	r2, [pc, #176]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3301      	adds	r3, #1
 8002a72:	4a29      	ldr	r2, [pc, #164]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e033      	b.n	8002ae4 <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a80:	d80e      	bhi.n	8002aa0 <_Z4_sinf+0x70>
    t1 = (int32_t)sine_array[128 - i]; t2 = (int32_t)sine_array[127 - i];
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002a88:	4a23      	ldr	r2, [pc, #140]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002a96:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e021      	b.n	8002ae4 <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2bbf      	cmp	r3, #191	@ 0xbf
 8002aa4:	d80e      	bhi.n	8002ac4 <_Z4_sinf+0x94>
    t1 = -(int32_t)sine_array[-128 + i]; t2 = -(int32_t)sine_array[-127 + i];
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	3b80      	subs	r3, #128	@ 0x80
 8002aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	3b7f      	subs	r3, #127	@ 0x7f
 8002ab8:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002abe:	425b      	negs	r3, r3
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e00f      	b.n	8002ae4 <_Z4_sinf+0xb4>
  }
  else {
    t1 = -(int32_t)sine_array[256 - i]; t2 = -(int32_t)sine_array[255 - i];
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002aca:	4a13      	ldr	r2, [pc, #76]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8002ada:	4a0f      	ldr	r2, [pc, #60]	@ (8002b18 <_Z4_sinf+0xe8>)
 8002adc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	fb02 f303 	mul.w	r3, r2, r3
 8002af0:	121a      	asrs	r2, r3, #8
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4413      	add	r3, r2
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002afe:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002b1c <_Z4_sinf+0xec>
 8002b02:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	371c      	adds	r7, #28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	4622f983 	.word	0x4622f983
 8002b18:	200000dc 	.word	0x200000dc
 8002b1c:	38000000 	.word	0x38000000

08002b20 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8002b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b2e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002b78 <_Z4_cosf+0x58>
 8002b32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b36:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002b3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b3e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002b7c <_Z4_cosf+0x5c>
 8002b42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4a:	dd06      	ble.n	8002b5a <_Z4_cosf+0x3a>
 8002b4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b50:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002b7c <_Z4_cosf+0x5c>
 8002b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b58:	e001      	b.n	8002b5e <_Z4_cosf+0x3e>
 8002b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b5e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 8002b62:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b66:	f7ff ff63 	bl	8002a30 <_Z4_sinf>
 8002b6a:	eef0 7a40 	vmov.f32	s15, s0
}
 8002b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	3fc90fdb 	.word	0x3fc90fdb
 8002b7c:	40c90fdb 	.word	0x40c90fdb

08002b80 <_Z7_sincosfPfS_>:


__attribute__((weak)) void _sincos(float a, float* s, float* c){
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b8a:	60b8      	str	r0, [r7, #8]
 8002b8c:	6079      	str	r1, [r7, #4]
  *s = _sin(a);
 8002b8e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002b92:	f7ff ff4d 	bl	8002a30 <_Z4_sinf>
 8002b96:	eef0 7a40 	vmov.f32	s15, s0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	edc3 7a00 	vstr	s15, [r3]
  *c = _cos(a);
 8002ba0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ba4:	f7ff ffbc 	bl	8002b20 <_Z4_cosf>
 8002ba8:	eef0 7a40 	vmov.f32	s15, s0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edc3 7a00 	vstr	s15, [r3]
}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002bc6:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002c00 <_Z15_normalizeAnglef+0x44>
 8002bca:	ed97 0a01 	vldr	s0, [r7, #4]
 8002bce:	f7ff ff1a 	bl	8002a06 <_ZSt4fmodff>
 8002bd2:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8002bd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	db02      	blt.n	8002bea <_Z15_normalizeAnglef+0x2e>
 8002be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be8:	e005      	b.n	8002bf6 <_Z15_normalizeAnglef+0x3a>
 8002bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bee:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002c00 <_Z15_normalizeAnglef+0x44>
 8002bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40c90fdb 	.word	0x40c90fdb

08002c04 <_ZN13LowPassFilterC1Ef>:
#include "lowpass_filter.h"

LowPassFilter::LowPassFilter(float time_constant)
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
{
    //timestamp_prev = _micros();
}
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	ed87 0a00 	vstr	s0, [r7]
 8002c38:	deff      	udf	#255	@ 0xff

08002c3a <_ZN13PIDControllerC1Efffff>:
#include "pid.h"

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002c3a:	b480      	push	{r7}
 8002c3c:	b087      	sub	sp, #28
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6178      	str	r0, [r7, #20]
 8002c42:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c46:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c4a:	ed87 1a02 	vstr	s2, [r7, #8]
 8002c4e:	edc7 1a01 	vstr	s3, [r7, #4]
 8002c52:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	601a      	str	r2, [r3, #0]
    , I(I)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]
    , D(D)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	61da      	str	r2, [r3, #28]
{
    //timestamp_prev = _micros();
}
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <_ZN13PIDControllerclEf>:

// PID controller function
float PIDController::operator() (float error){
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	ed87 0a00 	vstr	s0, [r7]
 8002ca6:	deff      	udf	#255	@ 0xff

08002ca8 <_ZN13PIDController5resetEv>:
    timestamp_prev = timestamp_now;
    return output;
    */
}

void PIDController::reset(){
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
    integral_prev = 0.0f;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	61da      	str	r2, [r3, #28]
    output_prev = 0.0f;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	619a      	str	r2, [r3, #24]
    error_prev = 0.0f;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <_ZN10BLDCDriver4typeEv>:
         * @param sa - phase C state : active / disabled ( high impedance )
        */
        virtual void setPhaseState(PhaseState sa, PhaseState sb, PhaseState sc) = 0;

        /** driver type getter function */
        virtual DriverType type() override { return DriverType::BLDC; };
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	2301      	movs	r3, #1
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <_ZN9FOCDriverC1Ev>:
};

/**
 * FOC driver class
 */
class FOCDriver{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a09      	ldr	r2, [pc, #36]	@ (8002d1c <_ZN9FOCDriverC1Ev+0x30>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	741a      	strb	r2, [r3, #16]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	615a      	str	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	761a      	strb	r2, [r3, #24]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	08005ac4 	.word	0x08005ac4

08002d20 <_ZN10BLDCDriverC1Ev>:
class BLDCDriver: public FOCDriver{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ffde 	bl	8002cec <_ZN9FOCDriverC1Ev>
 8002d30:	4a03      	ldr	r2, [pc, #12]	@ (8002d40 <_ZN10BLDCDriverC1Ev+0x20>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	08005aa4 	.word	0x08005aa4

08002d44 <_ZN14BLDCDriver3PWMC1Eiiiiii>:
#include "BLDCDriver3PWM.h"

BLDCDriver3PWM::BLDCDriver3PWM(int phA, int phB, int phC, int en1, int en2, int en3){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ffe3 	bl	8002d20 <_ZN10BLDCDriverC1Ev>
 8002d5a:	4a11      	ldr	r2, [pc, #68]	@ (8002da0 <_ZN14BLDCDriver3PWMC1Eiiiiii+0x5c>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]
  // Pin initialization
  pwmA = phA;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
  pwmB = phB;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  pwmC = phC;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	631a      	str	r2, [r3, #48]	@ 0x30

  // enable_pin pin
  enableA_pin = en1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	635a      	str	r2, [r3, #52]	@ 0x34
  enableB_pin = en2;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  enableC_pin = en3;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a3a      	ldr	r2, [r7, #32]
 8002d82:	63da      	str	r2, [r3, #60]	@ 0x3c

  // default power-supply value
  voltage_power_supply = DEF_POWER_SUPPLY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a07      	ldr	r2, [pc, #28]	@ (8002da4 <_ZN14BLDCDriver3PWMC1Eiiiiii+0x60>)
 8002d88:	609a      	str	r2, [r3, #8]
  voltage_limit = NOT_SET;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4a06      	ldr	r2, [pc, #24]	@ (8002da8 <_ZN14BLDCDriver3PWMC1Eiiiiii+0x64>)
 8002d8e:	60da      	str	r2, [r3, #12]
  pwm_frequency = NOT_SET;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a06      	ldr	r2, [pc, #24]	@ (8002dac <_ZN14BLDCDriver3PWMC1Eiiiiii+0x68>)
 8002d94:	605a      	str	r2, [r3, #4]

}
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	08005a84 	.word	0x08005a84
 8002da4:	41400000 	.word	0x41400000
 8002da8:	c640e400 	.word	0xc640e400
 8002dac:	ffffcfc7 	.word	0xffffcfc7

08002db0 <_ZN14BLDCDriver3PWM6enableEv>:

// enable motor driver
void  BLDCDriver3PWM::enable(){
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    if ( _isset(enableA_pin) ) digitalWrite(enableA_pin, enable_active_high);
    if ( _isset(enableB_pin) ) digitalWrite(enableB_pin, enable_active_high);
    if ( _isset(enableC_pin) ) digitalWrite(enableC_pin, enable_active_high);
    */
    // set zero to PWM
    setPwm(0,0,0);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	ed9f 1a05 	vldr	s2, [pc, #20]	@ 8002dd8 <_ZN14BLDCDriver3PWM6enableEv+0x28>
 8002dc4:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8002dd8 <_ZN14BLDCDriver3PWM6enableEv+0x28>
 8002dc8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8002dd8 <_ZN14BLDCDriver3PWM6enableEv+0x28>
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	00000000 	.word	0x00000000

08002ddc <_ZN14BLDCDriver3PWM7disableEv>:

// disable motor driver
void BLDCDriver3PWM::disable()
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  // set zero to PWM
  setPwm(0, 0, 0);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3310      	adds	r3, #16
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	ed9f 1a05 	vldr	s2, [pc, #20]	@ 8002e04 <_ZN14BLDCDriver3PWM7disableEv+0x28>
 8002df0:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8002e04 <_ZN14BLDCDriver3PWM7disableEv+0x28>
 8002df4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8002e04 <_ZN14BLDCDriver3PWM7disableEv+0x28>
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
  if ( _isset(enableA_pin) ) digitalWrite(enableA_pin, !enable_active_high);
  if ( _isset(enableB_pin) ) digitalWrite(enableB_pin, !enable_active_high);
  if ( _isset(enableC_pin) ) digitalWrite(enableC_pin, !enable_active_high);
  */

}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	00000000 	.word	0x00000000

08002e08 <_ZN14BLDCDriver3PWM4initEv>:

// init hardware pins
int BLDCDriver3PWM::init() {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	deff      	udf	#255	@ 0xff

08002e12 <_ZN14BLDCDriver3PWM13setPhaseStateE10PhaseStateS0_S0_>:
}



// Set voltage to the pwm pin
void BLDCDriver3PWM::setPhaseState(PhaseState sa, PhaseState sb, PhaseState sc) {
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	4608      	mov	r0, r1
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4603      	mov	r3, r0
 8002e22:	70fb      	strb	r3, [r7, #3]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70bb      	strb	r3, [r7, #2]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	707b      	strb	r3, [r7, #1]
    digitalWrite(enableA_pin, sa == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
    digitalWrite(enableB_pin, sb == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
    digitalWrite(enableC_pin, sc == PhaseState::PHASE_ON ? enable_active_high:!enable_active_high);
  }
  */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <_ZN14BLDCDriver3PWM6setPwmEfff>:

// Set voltage to the pwm pin
void BLDCDriver3PWM::setPwm(float Ua, float Ub, float Uc) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e44:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e48:	ed87 1a00 	vstr	s2, [r7]

  // limit the voltage in driver
  Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002e4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	d502      	bpl.n	8002e60 <_ZN14BLDCDriver3PWM6setPwmEfff+0x28>
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e00d      	b.n	8002e7c <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e66:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	dd02      	ble.n	8002e7a <_ZN14BLDCDriver3PWM6setPwmEfff+0x42>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	e000      	b.n	8002e7c <_ZN14BLDCDriver3PWM6setPwmEfff+0x44>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	60bb      	str	r3, [r7, #8]
  Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	d502      	bpl.n	8002e92 <_ZN14BLDCDriver3PWM6setPwmEfff+0x5a>
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e00d      	b.n	8002eae <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e98:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea4:	dd02      	ble.n	8002eac <_ZN14BLDCDriver3PWM6setPwmEfff+0x74>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	e000      	b.n	8002eae <_ZN14BLDCDriver3PWM6setPwmEfff+0x76>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	607b      	str	r3, [r7, #4]
  Uc = _constrain(Uc, 0.0f, voltage_limit);
 8002eb0:	edd7 7a00 	vldr	s15, [r7]
 8002eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	d502      	bpl.n	8002ec4 <_ZN14BLDCDriver3PWM6setPwmEfff+0x8c>
 8002ebe:	f04f 0300 	mov.w	r3, #0
 8002ec2:	e00d      	b.n	8002ee0 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002eca:	ed97 7a00 	vldr	s14, [r7]
 8002ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed6:	dd02      	ble.n	8002ede <_ZN14BLDCDriver3PWM6setPwmEfff+0xa6>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	e000      	b.n	8002ee0 <_ZN14BLDCDriver3PWM6setPwmEfff+0xa8>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	603b      	str	r3, [r7, #0]
  // calculate duty cycle
  // limited in [0,1]
  dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ee8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002eec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d502      	bpl.n	8002f00 <_ZN14BLDCDriver3PWM6setPwmEfff+0xc8>
 8002efa:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8003010 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8002efe:	e017      	b.n	8002f30 <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f06:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1a:	dd02      	ble.n	8002f22 <_ZN14BLDCDriver3PWM6setPwmEfff+0xea>
 8002f1c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002f20:	e006      	b.n	8002f30 <_ZN14BLDCDriver3PWM6setPwmEfff+0xf8>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f28:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	edc3 7a07 	vstr	s15, [r3, #28]
  dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f3c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f4c:	d502      	bpl.n	8002f54 <_ZN14BLDCDriver3PWM6setPwmEfff+0x11c>
 8002f4e:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8003010 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8002f52:	e017      	b.n	8002f84 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f5a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6e:	dd02      	ble.n	8002f76 <_ZN14BLDCDriver3PWM6setPwmEfff+0x13e>
 8002f70:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002f74:	e006      	b.n	8002f84 <_ZN14BLDCDriver3PWM6setPwmEfff+0x14c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f7c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	edc3 7a08 	vstr	s15, [r3, #32]
  dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f90:	edd7 6a00 	vldr	s13, [r7]
 8002f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	d502      	bpl.n	8002fa8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x170>
 8002fa2:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003010 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1d8>
 8002fa6:	e017      	b.n	8002fd8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fae:	edd7 6a00 	vldr	s13, [r7]
 8002fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	dd02      	ble.n	8002fca <_ZN14BLDCDriver3PWM6setPwmEfff+0x192>
 8002fc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002fc8:	e006      	b.n	8002fd8 <_ZN14BLDCDriver3PWM6setPwmEfff+0x1a0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fd0:	edd7 6a00 	vldr	s13, [r7]
 8002fd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

  // hardware specific writing
  // hardware specific function - depending on driver and mcu
  _writeDutyCycle3PWM(dc_a, dc_b, dc_c, params);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	edd3 7a07 	vldr	s15, [r3, #28]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	ed93 7a08 	vldr	s14, [r3, #32]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	eeb0 1a66 	vmov.f32	s2, s13
 8002ffa:	eef0 0a47 	vmov.f32	s1, s14
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	f000 f807 	bl	8003014 <_Z19_writeDutyCycle3PWMfffPv>
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	00000000 	.word	0x00000000

08003014 <_Z19_writeDutyCycle3PWMfffPv>:
}

// function setting the pwm duty cycle to the hardware
// - BLDC motor - 3PWM setting
// - hardware speciffic
__attribute__((weak)) void _writeDutyCycle3PWM(float dc_a,  float dc_b, float dc_c, void* params){
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	ed87 0a03 	vstr	s0, [r7, #12]
 800301e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003022:	ed87 1a01 	vstr	s2, [r7, #4]
 8003026:	6038      	str	r0, [r7, #0]
  // transform duty cycle from [0,1] to [0,255]
  //analogWrite(((GenericDriverParams*)params)->pins[0], 255.0f*dc_a);
  //analogWrite(((GenericDriverParams*)params)->pins[1], 255.0f*dc_b);
  //analogWrite(((GenericDriverParams*)params)->pins[2], 255.0f*dc_c);
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <_ZN6SensorC1Ev>:
 * The Sensor base class provides an implementation of getVelocity(), and takes care of counting full
 * revolutions in a precise way, but if you wish you can additionally override these methods to provide more
 * optimal implementations for your hardware.
 * 
 */
class Sensor
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	4a12      	ldr	r2, [pc, #72]	@ (8003088 <_ZN6SensorC1Ev+0x54>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a11      	ldr	r2, [pc, #68]	@ (800308c <_ZN6SensorC1Ev+0x58>)
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	615a      	str	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	621a      	str	r2, [r3, #32]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4618      	mov	r0, r3
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	08005a58 	.word	0x08005a58
 800308c:	38d1b717 	.word	0x38d1b717

08003090 <_ZN7EncoderC1Eiifi>:
  - encA, encB    - encoder A and B pins
  - cpr           - counts per rotation number (cpm=ppm*4)
  - index pin     - (optional input)
*/

Encoder::Encoder(int _encA, int _encB , float _ppr, int _index){
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6178      	str	r0, [r7, #20]
 8003098:	6139      	str	r1, [r7, #16]
 800309a:	60fa      	str	r2, [r7, #12]
 800309c:	ed87 0a02 	vstr	s0, [r7, #8]
 80030a0:	607b      	str	r3, [r7, #4]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ffc5 	bl	8003034 <_ZN6SensorC1Ev>
 80030aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <_ZN7EncoderC1Eiifi+0x90>)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  // Encoder measurement structure init
  // hardware pins
  pinA = _encA;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24
  pinB = _encB;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28
  // counter setup
  pulse_counter = 0;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	639a      	str	r2, [r3, #56]	@ 0x38
  pulse_timestamp = 0;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2200      	movs	r2, #0
 80030ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  cpr = _ppr;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	635a      	str	r2, [r3, #52]	@ 0x34
  A_active = 0;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40
  B_active = 0;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
  I_active = 0;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2200      	movs	r2, #0
 80030e6:	649a      	str	r2, [r3, #72]	@ 0x48
  // index pin
  index_pin = _index; // its 0 if not used
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  // velocity calculation variables
  prev_Th = 0;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	651a      	str	r2, [r3, #80]	@ 0x50
  pulse_per_second = 0;
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	655a      	str	r2, [r3, #84]	@ 0x54
  prev_pulse_counter = 0;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	659a      	str	r2, [r3, #88]	@ 0x58
  //prev_timestamp_us = _micros();

  // extern pullup as default
  pullup = Pullup::USE_EXTERN;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  // enable quadrature encoder by default
  quadrature = Quadrature::ON;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	08005adc 	.word	0x08005adc

08003124 <_ZN7Encoder6updateEv>:
  */
}


// Sensor update function. Safely copy volatile interrupt variables into Sensor base class state variables.
void Encoder::update() {
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
	encoder_cnt = TIM2->CNT;
 800312c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	661a      	str	r2, [r3, #96]	@ 0x60
  interrupts();
  // TODO: numerical precision issue here if the pulse_counter overflows the angle will be lost
  full_rotations = copy_pulse_counter / (int)cpr;
  angle_prev = _2PI * ((copy_pulse_counter) % ((int)cpr)) / ((float)cpr);
  */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <_ZN7Encoder14getSensorAngleEv>:

/*
	Shaft angle calculation
*/
float Encoder::getSensorAngle(){
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return _2PI * (pulse_counter) / ((float)cpr);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003158:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800317c <_ZN7Encoder14getSensorAngleEv+0x38>
 800315c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003166:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800316a:	eef0 7a66 	vmov.f32	s15, s13
}
 800316e:	eeb0 0a67 	vmov.f32	s0, s15
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	40c90fdb 	.word	0x40c90fdb

08003180 <_ZN7Encoder11getVelocityEv>:

/*
  Shaft velocity calculation
  function using mixed time and frequency measurement technique
*/
float Encoder::getVelocity(){
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	deff      	udf	#255	@ 0xff

0800318a <_ZN7Encoder11needsSearchEv>:
  */
}

// getter for index pin
// return -1 if no index
int Encoder::needsSearch(){
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  return hasIndex() && !index_found;
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f813 	bl	80031be <_ZN7Encoder8hasIndexEv>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <_ZN7Encoder11needsSearchEv+0x2a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <_ZN7Encoder11needsSearchEv+0x2a>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <_ZN7Encoder11needsSearchEv+0x2c>
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_ZN7Encoder8hasIndexEv>:

// private function used to determine if encoder has index
int Encoder::hasIndex(){
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  return index_pin != 0;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf14      	ite	ne
 80031ce:	2301      	movne	r3, #1
 80031d0:	2300      	moveq	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <_ZN7Encoder4initEv>:


// encoder initialisation of the hardware pins
// and calculation variables
void Encoder::init(){
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 80031e8:	213c      	movs	r1, #60	@ 0x3c
 80031ea:	4803      	ldr	r0, [pc, #12]	@ (80031f8 <_ZN7Encoder4initEv+0x18>)
 80031ec:	f001 fdd8 	bl	8004da0 <HAL_TIM_Encoder_Start>
  if(quadrature == Quadrature::ON) cpr = 4*cpr;

  // we don't call Sensor::init() here because init is handled in Encoder class.

   */
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	200003e8 	.word	0x200003e8

080031fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80031fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003234 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003200:	f7ff f906 	bl	8002410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003204:	480c      	ldr	r0, [pc, #48]	@ (8003238 <LoopForever+0x6>)
  ldr r1, =_edata
 8003206:	490d      	ldr	r1, [pc, #52]	@ (800323c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003208:	4a0d      	ldr	r2, [pc, #52]	@ (8003240 <LoopForever+0xe>)
  movs r3, #0
 800320a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800320c:	e002      	b.n	8003214 <LoopCopyDataInit>

0800320e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800320e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003212:	3304      	adds	r3, #4

08003214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003218:	d3f9      	bcc.n	800320e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800321a:	4a0a      	ldr	r2, [pc, #40]	@ (8003244 <LoopForever+0x12>)
  ldr r4, =_ebss
 800321c:	4c0a      	ldr	r4, [pc, #40]	@ (8003248 <LoopForever+0x16>)
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003220:	e001      	b.n	8003226 <LoopFillZerobss>

08003222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003224:	3204      	adds	r2, #4

08003226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003228:	d3fb      	bcc.n	8003222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800322a:	f002 fbaf 	bl	800598c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800322e:	f7fe ff1c 	bl	800206a <main>

08003232 <LoopForever>:

LoopForever:
    b LoopForever
 8003232:	e7fe      	b.n	8003232 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003234:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800323c:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8003240:	08005b34 	.word	0x08005b34
  ldr r2, =_sbss
 8003244:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8003248:	200005f8 	.word	0x200005f8

0800324c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800324c:	e7fe      	b.n	800324c <ADC1_2_IRQHandler>
	...

08003250 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003254:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <HAL_Init+0x28>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a07      	ldr	r2, [pc, #28]	@ (8003278 <HAL_Init+0x28>)
 800325a:	f043 0310 	orr.w	r3, r3, #16
 800325e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003260:	2003      	movs	r0, #3
 8003262:	f000 f931 	bl	80034c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003266:	2000      	movs	r0, #0
 8003268:	f000 f808 	bl	800327c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800326c:	f7fe fff8 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40022000 	.word	0x40022000

0800327c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003284:	4b12      	ldr	r3, [pc, #72]	@ (80032d0 <HAL_InitTick+0x54>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b12      	ldr	r3, [pc, #72]	@ (80032d4 <HAL_InitTick+0x58>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003292:	fbb3 f3f1 	udiv	r3, r3, r1
 8003296:	fbb2 f3f3 	udiv	r3, r2, r3
 800329a:	4618      	mov	r0, r3
 800329c:	f000 f93b 	bl	8003516 <HAL_SYSTICK_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00e      	b.n	80032c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b0f      	cmp	r3, #15
 80032ae:	d80a      	bhi.n	80032c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032b0:	2200      	movs	r2, #0
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b8:	f000 f911 	bl	80034de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032bc:	4a06      	ldr	r2, [pc, #24]	@ (80032d8 <HAL_InitTick+0x5c>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200000d8 	.word	0x200000d8
 80032d4:	20000164 	.word	0x20000164
 80032d8:	20000160 	.word	0x20000160

080032dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032e0:	4b06      	ldr	r3, [pc, #24]	@ (80032fc <HAL_IncTick+0x20>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_IncTick+0x24>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	4a04      	ldr	r2, [pc, #16]	@ (8003300 <HAL_IncTick+0x24>)
 80032ee:	6013      	str	r3, [r2, #0]
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20000164 	.word	0x20000164
 8003300:	200004bc 	.word	0x200004bc

08003304 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return uwTick;  
 8003308:	4b03      	ldr	r3, [pc, #12]	@ (8003318 <HAL_GetTick+0x14>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	200004bc 	.word	0x200004bc

0800331c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003324:	f7ff ffee 	bl	8003304 <HAL_GetTick>
 8003328:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d005      	beq.n	8003342 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003336:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <HAL_Delay+0x44>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4413      	add	r3, r2
 8003340:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003342:	bf00      	nop
 8003344:	f7ff ffde 	bl	8003304 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	429a      	cmp	r2, r3
 8003352:	d8f7      	bhi.n	8003344 <HAL_Delay+0x28>
  {
  }
}
 8003354:	bf00      	nop
 8003356:	bf00      	nop
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000164 	.word	0x20000164

08003364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800338c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003396:	4a04      	ldr	r2, [pc, #16]	@ (80033a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	60d3      	str	r3, [r2, #12]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b0:	4b04      	ldr	r3, [pc, #16]	@ (80033c4 <__NVIC_GetPriorityGrouping+0x18>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f003 0307 	and.w	r3, r3, #7
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	6039      	str	r1, [r7, #0]
 80033d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	db0a      	blt.n	80033f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	490c      	ldr	r1, [pc, #48]	@ (8003414 <__NVIC_SetPriority+0x4c>)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	440b      	add	r3, r1
 80033ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033f0:	e00a      	b.n	8003408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	4908      	ldr	r1, [pc, #32]	@ (8003418 <__NVIC_SetPriority+0x50>)
 80033f8:	79fb      	ldrb	r3, [r7, #7]
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	3b04      	subs	r3, #4
 8003400:	0112      	lsls	r2, r2, #4
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	440b      	add	r3, r1
 8003406:	761a      	strb	r2, [r3, #24]
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr
 8003414:	e000e100 	.word	0xe000e100
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	@ 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f1c3 0307 	rsb	r3, r3, #7
 8003436:	2b04      	cmp	r3, #4
 8003438:	bf28      	it	cs
 800343a:	2304      	movcs	r3, #4
 800343c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3304      	adds	r3, #4
 8003442:	2b06      	cmp	r3, #6
 8003444:	d902      	bls.n	800344c <NVIC_EncodePriority+0x30>
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3b03      	subs	r3, #3
 800344a:	e000      	b.n	800344e <NVIC_EncodePriority+0x32>
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	401a      	ands	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003464:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	43d9      	mvns	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	4313      	orrs	r3, r2
         );
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	@ 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3b01      	subs	r3, #1
 8003490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003494:	d301      	bcc.n	800349a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003496:	2301      	movs	r3, #1
 8003498:	e00f      	b.n	80034ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349a:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <SysTick_Config+0x40>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a2:	210f      	movs	r1, #15
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034a8:	f7ff ff8e 	bl	80033c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ac:	4b05      	ldr	r3, [pc, #20]	@ (80034c4 <SysTick_Config+0x40>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b2:	4b04      	ldr	r3, [pc, #16]	@ (80034c4 <SysTick_Config+0x40>)
 80034b4:	2207      	movs	r2, #7
 80034b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	e000e010 	.word	0xe000e010

080034c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ff47 	bl	8003364 <__NVIC_SetPriorityGrouping>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034de:	b580      	push	{r7, lr}
 80034e0:	b086      	sub	sp, #24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	4603      	mov	r3, r0
 80034e6:	60b9      	str	r1, [r7, #8]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034f0:	f7ff ff5c 	bl	80033ac <__NVIC_GetPriorityGrouping>
 80034f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	6978      	ldr	r0, [r7, #20]
 80034fc:	f7ff ff8e 	bl	800341c <NVIC_EncodePriority>
 8003500:	4602      	mov	r2, r0
 8003502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff ff5d 	bl	80033c8 <__NVIC_SetPriority>
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff ffb0 	bl	8003484 <SysTick_Config>
 8003524:	4603      	mov	r3, r0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353e:	e14e      	b.n	80037de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	4013      	ands	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8140 	beq.w	80037d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	2b01      	cmp	r3, #1
 8003562:	d005      	beq.n	8003570 <HAL_GPIO_Init+0x40>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d130      	bne.n	80035d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a6:	2201      	movs	r2, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f003 0201 	and.w	r2, r3, #1
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d017      	beq.n	800360e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d123      	bne.n	8003662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	08da      	lsrs	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3208      	adds	r2, #8
 8003622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	220f      	movs	r2, #15
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	08da      	lsrs	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3208      	adds	r2, #8
 800365c:	6939      	ldr	r1, [r7, #16]
 800365e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	2203      	movs	r2, #3
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0203 	and.w	r2, r3, #3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 809a 	beq.w	80037d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <HAL_GPIO_Init+0x2cc>)
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_GPIO_Init+0x2cc>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	6193      	str	r3, [r2, #24]
 80036b0:	4b52      	ldr	r3, [pc, #328]	@ (80037fc <HAL_GPIO_Init+0x2cc>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	60bb      	str	r3, [r7, #8]
 80036ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036bc:	4a50      	ldr	r2, [pc, #320]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	220f      	movs	r2, #15
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036e6:	d013      	beq.n	8003710 <HAL_GPIO_Init+0x1e0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a46      	ldr	r2, [pc, #280]	@ (8003804 <HAL_GPIO_Init+0x2d4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00d      	beq.n	800370c <HAL_GPIO_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a45      	ldr	r2, [pc, #276]	@ (8003808 <HAL_GPIO_Init+0x2d8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d007      	beq.n	8003708 <HAL_GPIO_Init+0x1d8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a44      	ldr	r2, [pc, #272]	@ (800380c <HAL_GPIO_Init+0x2dc>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_GPIO_Init+0x1d4>
 8003700:	2303      	movs	r3, #3
 8003702:	e006      	b.n	8003712 <HAL_GPIO_Init+0x1e2>
 8003704:	2305      	movs	r3, #5
 8003706:	e004      	b.n	8003712 <HAL_GPIO_Init+0x1e2>
 8003708:	2302      	movs	r3, #2
 800370a:	e002      	b.n	8003712 <HAL_GPIO_Init+0x1e2>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <HAL_GPIO_Init+0x1e2>
 8003710:	2300      	movs	r3, #0
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	f002 0203 	and.w	r2, r2, #3
 8003718:	0092      	lsls	r2, r2, #2
 800371a:	4093      	lsls	r3, r2
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003722:	4937      	ldr	r1, [pc, #220]	@ (8003800 <HAL_GPIO_Init+0x2d0>)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	3302      	adds	r3, #2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003730:	4b37      	ldr	r3, [pc, #220]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43db      	mvns	r3, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4013      	ands	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d003      	beq.n	8003754 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003754:	4a2e      	ldr	r2, [pc, #184]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800375a:	4b2d      	ldr	r3, [pc, #180]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	43db      	mvns	r3, r3
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4013      	ands	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800377e:	4a24      	ldr	r2, [pc, #144]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003784:	4b22      	ldr	r3, [pc, #136]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80037a8:	4a19      	ldr	r2, [pc, #100]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ae:	4b18      	ldr	r3, [pc, #96]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	43db      	mvns	r3, r3
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4013      	ands	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80037d2:	4a0f      	ldr	r2, [pc, #60]	@ (8003810 <HAL_GPIO_Init+0x2e0>)
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	3301      	adds	r3, #1
 80037dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f47f aea9 	bne.w	8003540 <HAL_GPIO_Init+0x10>
  }
}
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40021000 	.word	0x40021000
 8003800:	40010000 	.word	0x40010000
 8003804:	48000400 	.word	0x48000400
 8003808:	48000800 	.word	0x48000800
 800380c:	48000c00 	.word	0x48000c00
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800381a:	af00      	add	r7, sp, #0
 800381c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003824:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f000 bff4 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 816d 	beq.w	8003b2a <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003850:	4bb4      	ldr	r3, [pc, #720]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00c      	beq.n	8003876 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800385c:	4bb1      	ldr	r3, [pc, #708]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x104>
 8003868:	4bae      	ldr	r3, [pc, #696]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d150      	bne.n	8003918 <HAL_RCC_OscConfig+0x104>
 8003876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800387a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800388a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b3f      	cmp	r3, #63	@ 0x3f
 8003896:	d802      	bhi.n	800389e <HAL_RCC_OscConfig+0x8a>
 8003898:	4ba2      	ldr	r3, [pc, #648]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	e015      	b.n	80038ca <HAL_RCC_OscConfig+0xb6>
 800389e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038a2:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80038aa:	fa93 f3a3 	rbit	r3, r3
 80038ae:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80038b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038b6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80038ba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80038be:	fa93 f3a3 	rbit	r3, r3
 80038c2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80038c6:	4b97      	ldr	r3, [pc, #604]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80038ce:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80038d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80038de:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80038e2:	fab2 f282 	clz	r2, r2
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	f042 0220 	orr.w	r2, r2, #32
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	f002 021f 	and.w	r2, r2, #31
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f202 	lsl.w	r2, r1, r2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8114 	beq.w	8003b28 <HAL_RCC_OscConfig+0x314>
 8003900:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003904:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 810b 	bne.w	8003b28 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f000 bf85 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x124>
 800392a:	4b7e      	ldr	r3, [pc, #504]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e036      	b.n	80039a6 <HAL_RCC_OscConfig+0x192>
 8003938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10c      	bne.n	8003962 <HAL_RCC_OscConfig+0x14e>
 8003948:	4b76      	ldr	r3, [pc, #472]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a75      	ldr	r2, [pc, #468]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800394e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4b73      	ldr	r3, [pc, #460]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a72      	ldr	r2, [pc, #456]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800395a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e021      	b.n	80039a6 <HAL_RCC_OscConfig+0x192>
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003972:	d10c      	bne.n	800398e <HAL_RCC_OscConfig+0x17a>
 8003974:	4b6b      	ldr	r3, [pc, #428]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6a      	ldr	r2, [pc, #424]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800397a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b68      	ldr	r3, [pc, #416]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a67      	ldr	r2, [pc, #412]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003986:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	e00b      	b.n	80039a6 <HAL_RCC_OscConfig+0x192>
 800398e:	4b65      	ldr	r3, [pc, #404]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a64      	ldr	r2, [pc, #400]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	4b62      	ldr	r3, [pc, #392]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a61      	ldr	r2, [pc, #388]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 80039a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039a4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 80039a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039aa:	f023 020f 	bic.w	r2, r3, #15
 80039ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	495a      	ldr	r1, [pc, #360]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d054      	beq.n	8003a7a <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d0:	f7ff fc98 	bl	8003304 <HAL_GetTick>
 80039d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d8:	e00a      	b.n	80039f0 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039da:	f7ff fc93 	bl	8003304 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	@ 0x64
 80039e8:	d902      	bls.n	80039f0 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	f000 bf19 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
 80039f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80039f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80039fc:	fa93 f3a3 	rbit	r3, r3
 8003a00:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003a04:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a08:	fab3 f383 	clz	r3, r3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003a10:	d802      	bhi.n	8003a18 <HAL_RCC_OscConfig+0x204>
 8003a12:	4b44      	ldr	r3, [pc, #272]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e015      	b.n	8003a44 <HAL_RCC_OscConfig+0x230>
 8003a18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a1c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003a24:	fa93 f3a3 	rbit	r3, r3
 8003a28:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003a2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a30:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003a34:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003a40:	4b38      	ldr	r3, [pc, #224]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003a48:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003a4c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003a50:	fa92 f2a2 	rbit	r2, r2
 8003a54:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003a58:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003a5c:	fab2 f282 	clz	r2, r2
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f042 0220 	orr.w	r2, r2, #32
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f002 021f 	and.w	r2, r2, #31
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0b0      	beq.n	80039da <HAL_RCC_OscConfig+0x1c6>
 8003a78:	e057      	b.n	8003b2a <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7ff fc43 	bl	8003304 <HAL_GetTick>
 8003a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7ff fc3e 	bl	8003304 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	@ 0x64
 8003a92:	d902      	bls.n	8003a9a <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	f000 bec4 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
 8003a9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003a9e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003aae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	fab3 f383 	clz	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003aba:	d802      	bhi.n	8003ac2 <HAL_RCC_OscConfig+0x2ae>
 8003abc:	4b19      	ldr	r3, [pc, #100]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x2da>
 8003ac2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ac6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003ace:	fa93 f3a3 	rbit	r3, r3
 8003ad2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ad6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ada:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003ade:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003aea:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <HAL_RCC_OscConfig+0x310>)
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003af2:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003af6:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003afa:	fa92 f2a2 	rbit	r2, r2
 8003afe:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003b02:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003b06:	fab2 f282 	clz	r2, r2
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	f042 0220 	orr.w	r2, r2, #32
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	f002 021f 	and.w	r2, r2, #31
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1b0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x270>
 8003b22:	e002      	b.n	8003b2a <HAL_RCC_OscConfig+0x316>
 8003b24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 816c 	beq.w	8003e18 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b40:	4bcc      	ldr	r3, [pc, #816]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00b      	beq.n	8003b64 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b4c:	4bc9      	ldr	r3, [pc, #804]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d16d      	bne.n	8003c34 <HAL_RCC_OscConfig+0x420>
 8003b58:	4bc6      	ldr	r3, [pc, #792]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d167      	bne.n	8003c34 <HAL_RCC_OscConfig+0x420>
 8003b64:	2302      	movs	r3, #2
 8003b66:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003b6e:	fa93 f3a3 	rbit	r3, r3
 8003b72:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8003b76:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7a:	fab3 f383 	clz	r3, r3
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b82:	d802      	bhi.n	8003b8a <HAL_RCC_OscConfig+0x376>
 8003b84:	4bbb      	ldr	r3, [pc, #748]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	e013      	b.n	8003bb2 <HAL_RCC_OscConfig+0x39e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b90:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003b94:	fa93 f3a3 	rbit	r3, r3
 8003b98:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003ba2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003ba6:	fa93 f3a3 	rbit	r3, r3
 8003baa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003bae:	4bb1      	ldr	r3, [pc, #708]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003bb8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003bbc:	fa92 f2a2 	rbit	r2, r2
 8003bc0:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003bc4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003bc8:	fab2 f282 	clz	r2, r2
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	f042 0220 	orr.w	r2, r2, #32
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	2101      	movs	r1, #1
 8003bda:	fa01 f202 	lsl.w	r2, r1, r2
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCC_OscConfig+0x3e6>
 8003be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d002      	beq.n	8003bfa <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f000 be14 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfa:	4b9e      	ldr	r3, [pc, #632]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c06:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	21f8      	movs	r1, #248	@ 0xf8
 8003c10:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c14:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003c18:	fa91 f1a1 	rbit	r1, r1
 8003c1c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003c20:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003c24:	fab1 f181 	clz	r1, r1
 8003c28:	b2c9      	uxtb	r1, r1
 8003c2a:	408b      	lsls	r3, r1
 8003c2c:	4991      	ldr	r1, [pc, #580]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c32:	e0f1      	b.n	8003e18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8083 	beq.w	8003d4c <HAL_RCC_OscConfig+0x538>
 8003c46:	2301      	movs	r3, #1
 8003c48:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003c58:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5c:	fab3 f383 	clz	r3, r3
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c66:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2301      	movs	r3, #1
 8003c70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7ff fb47 	bl	8003304 <HAL_GetTick>
 8003c76:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	e00a      	b.n	8003c92 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c7c:	f7ff fb42 	bl	8003304 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d902      	bls.n	8003c92 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	f000 bdc8 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
 8003c92:	2302      	movs	r3, #2
 8003c94:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c98:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003ca4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca8:	fab3 f383 	clz	r3, r3
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b3f      	cmp	r3, #63	@ 0x3f
 8003cb0:	d802      	bhi.n	8003cb8 <HAL_RCC_OscConfig+0x4a4>
 8003cb2:	4b70      	ldr	r3, [pc, #448]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	e013      	b.n	8003ce0 <HAL_RCC_OscConfig+0x4cc>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003cc2:	fa93 f3a3 	rbit	r3, r3
 8003cc6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003cca:	2302      	movs	r3, #2
 8003ccc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003cd0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003cdc:	4b65      	ldr	r3, [pc, #404]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003ce6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003cea:	fa92 f2a2 	rbit	r2, r2
 8003cee:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003cf2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003cf6:	fab2 f282 	clz	r2, r2
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	f042 0220 	orr.w	r2, r2, #32
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	f002 021f 	and.w	r2, r2, #31
 8003d06:	2101      	movs	r1, #1
 8003d08:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0b4      	beq.n	8003c7c <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d12:	4b58      	ldr	r3, [pc, #352]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	21f8      	movs	r1, #248	@ 0xf8
 8003d28:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003d30:	fa91 f1a1 	rbit	r1, r1
 8003d34:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003d38:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003d3c:	fab1 f181 	clz	r1, r1
 8003d40:	b2c9      	uxtb	r1, r1
 8003d42:	408b      	lsls	r3, r1
 8003d44:	494b      	ldr	r1, [pc, #300]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
 8003d4a:	e065      	b.n	8003e18 <HAL_RCC_OscConfig+0x604>
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003d5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	461a      	mov	r2, r3
 8003d74:	2300      	movs	r3, #0
 8003d76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7ff fac4 	bl	8003304 <HAL_GetTick>
 8003d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d82:	f7ff fabf 	bl	8003304 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d902      	bls.n	8003d98 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	f000 bd45 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003db6:	d802      	bhi.n	8003dbe <HAL_RCC_OscConfig+0x5aa>
 8003db8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e013      	b.n	8003de6 <HAL_RCC_OscConfig+0x5d2>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003dc8:	fa93 f3a3 	rbit	r3, r3
 8003dcc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003dd6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003de2:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <HAL_RCC_OscConfig+0x660>)
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	2202      	movs	r2, #2
 8003de8:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003dec:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003df0:	fa92 f2a2 	rbit	r2, r2
 8003df4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003df8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003dfc:	fab2 f282 	clz	r2, r2
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	f042 0220 	orr.w	r2, r2, #32
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	f002 021f 	and.w	r2, r2, #31
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1b4      	bne.n	8003d82 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8115 	beq.w	8004058 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d07e      	beq.n	8003f3c <HAL_RCC_OscConfig+0x728>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e44:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e54:	fab3 f383 	clz	r3, r3
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <HAL_RCC_OscConfig+0x664>)
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	461a      	mov	r2, r3
 8003e64:	2301      	movs	r3, #1
 8003e66:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e68:	f7ff fa4c 	bl	8003304 <HAL_GetTick>
 8003e6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e70:	e00f      	b.n	8003e92 <HAL_RCC_OscConfig+0x67e>
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7ff fa42 	bl	8003304 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d902      	bls.n	8003e92 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	f000 bcc8 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
 8003e92:	2302      	movs	r3, #2
 8003e94:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ea4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003eac:	2202      	movs	r2, #2
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	fa93 f2a3 	rbit	r2, r3
 8003ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	fa93 f2a3 	rbit	r2, r3
 8003ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003eea:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eec:	4bb0      	ldr	r3, [pc, #704]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8003eee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003ef8:	2102      	movs	r1, #2
 8003efa:	6019      	str	r1, [r3, #0]
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f1a3 	rbit	r1, r3
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003f12:	6019      	str	r1, [r3, #0]
  return result;
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2101      	movs	r1, #1
 8003f30:	fa01 f303 	lsl.w	r3, r1, r3
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0a0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x668>
 8003f3a:	e08d      	b.n	8004058 <HAL_RCC_OscConfig+0x844>
 8003f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f40:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	fa93 f2a3 	rbit	r2, r3
 8003f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f5e:	601a      	str	r2, [r3, #0]
  return result;
 8003f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f64:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003f68:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	4b90      	ldr	r3, [pc, #576]	@ (80041b4 <HAL_RCC_OscConfig+0x9a0>)
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7e:	f7ff f9c1 	bl	8003304 <HAL_GetTick>
 8003f82:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f88:	f7ff f9bc 	bl	8003304 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d902      	bls.n	8003f9e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	f000 bc42 	b.w	8004822 <HAL_RCC_OscConfig+0x100e>
 8003f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003faa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	fa93 f2a3 	rbit	r2, r3
 8003fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fbc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fca:	2202      	movs	r2, #2
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	fa93 f2a3 	rbit	r2, r3
 8003fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003fee:	2202      	movs	r2, #2
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	fa93 f2a3 	rbit	r2, r3
 8004000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004004:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004008:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400a:	4b69      	ldr	r3, [pc, #420]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 800400c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800400e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004012:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004016:	2102      	movs	r1, #2
 8004018:	6019      	str	r1, [r3, #0]
 800401a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	fa93 f1a3 	rbit	r1, r3
 8004028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004030:	6019      	str	r1, [r3, #0]
  return result;
 8004032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004036:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	fab3 f383 	clz	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d197      	bne.n	8003f88 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004058:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 819e 	beq.w	80043aa <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004074:	4b4e      	ldr	r3, [pc, #312]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d116      	bne.n	80040ae <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004080:	4b4b      	ldr	r3, [pc, #300]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	4a4a      	ldr	r2, [pc, #296]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800408a:	61d3      	str	r3, [r2, #28]
 800408c:	4b48      	ldr	r3, [pc, #288]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80040a6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b42      	ldr	r3, [pc, #264]	@ (80041b8 <HAL_RCC_OscConfig+0x9a4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d11a      	bne.n	80040f0 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b3f      	ldr	r3, [pc, #252]	@ (80041b8 <HAL_RCC_OscConfig+0x9a4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a3e      	ldr	r2, [pc, #248]	@ (80041b8 <HAL_RCC_OscConfig+0x9a4>)
 80040c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c6:	f7ff f91d 	bl	8003304 <HAL_GetTick>
 80040ca:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ce:	e009      	b.n	80040e4 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7ff f918 	bl	8003304 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	@ 0x64
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e39e      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b34      	ldr	r3, [pc, #208]	@ (80041b8 <HAL_RCC_OscConfig+0x9a4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0ef      	beq.n	80040d0 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <HAL_RCC_OscConfig+0x8fa>
 8004100:	4b2b      	ldr	r3, [pc, #172]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4a2a      	ldr	r2, [pc, #168]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6213      	str	r3, [r2, #32]
 800410c:	e035      	b.n	800417a <HAL_RCC_OscConfig+0x966>
 800410e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004112:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RCC_OscConfig+0x924>
 800411e:	4b24      	ldr	r3, [pc, #144]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	4a23      	ldr	r2, [pc, #140]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004124:	f023 0301 	bic.w	r3, r3, #1
 8004128:	6213      	str	r3, [r2, #32]
 800412a:	4b21      	ldr	r3, [pc, #132]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	4a20      	ldr	r2, [pc, #128]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	6213      	str	r3, [r2, #32]
 8004136:	e020      	b.n	800417a <HAL_RCC_OscConfig+0x966>
 8004138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800413c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	2b05      	cmp	r3, #5
 8004146:	d10c      	bne.n	8004162 <HAL_RCC_OscConfig+0x94e>
 8004148:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	4a18      	ldr	r2, [pc, #96]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 800414e:	f043 0304 	orr.w	r3, r3, #4
 8004152:	6213      	str	r3, [r2, #32]
 8004154:	4b16      	ldr	r3, [pc, #88]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	4a15      	ldr	r2, [pc, #84]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	6213      	str	r3, [r2, #32]
 8004160:	e00b      	b.n	800417a <HAL_RCC_OscConfig+0x966>
 8004162:	4b13      	ldr	r3, [pc, #76]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	6213      	str	r3, [r2, #32]
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4a0f      	ldr	r2, [pc, #60]	@ (80041b0 <HAL_RCC_OscConfig+0x99c>)
 8004174:	f023 0304 	bic.w	r3, r3, #4
 8004178:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800417a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800417e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8087 	beq.w	800429a <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418c:	f7ff f8ba 	bl	8003304 <HAL_GetTick>
 8004190:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004194:	e012      	b.n	80041bc <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7ff f8b5 	bl	8003304 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d908      	bls.n	80041bc <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e339      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
 80041ae:	bf00      	nop
 80041b0:	40021000 	.word	0x40021000
 80041b4:	10908120 	.word	0x10908120
 80041b8:	40007000 	.word	0x40007000
 80041bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041c4:	2202      	movs	r2, #2
 80041c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	fa93 f2a3 	rbit	r2, r3
 80041d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041e8:	2202      	movs	r2, #2
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	fa93 f2a3 	rbit	r2, r3
 80041fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041fe:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004202:	601a      	str	r2, [r3, #0]
  return result;
 8004204:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004208:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800420c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <HAL_RCC_OscConfig+0xa10>
 800421e:	4b98      	ldr	r3, [pc, #608]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	e013      	b.n	800424c <HAL_RCC_OscConfig+0xa38>
 8004224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004228:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800422c:	2202      	movs	r2, #2
 800422e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004234:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	fa93 f2a3 	rbit	r2, r3
 800423e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004242:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	4b8d      	ldr	r3, [pc, #564]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004250:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004254:	2102      	movs	r1, #2
 8004256:	6011      	str	r1, [r2, #0]
 8004258:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800425c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	fa92 f1a2 	rbit	r1, r2
 8004266:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800426a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800426e:	6011      	str	r1, [r2, #0]
  return result;
 8004270:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004274:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004278:	6812      	ldr	r2, [r2, #0]
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f002 021f 	and.w	r2, r2, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	f43f af7f 	beq.w	8004196 <HAL_RCC_OscConfig+0x982>
 8004298:	e07d      	b.n	8004396 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800429a:	f7ff f833 	bl	8003304 <HAL_GetTick>
 800429e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7ff f82e 	bl	8003304 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e2b2      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
 80042bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042c0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80042c4:	2202      	movs	r2, #2
 80042c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042cc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	fa93 f2a3 	rbit	r2, r3
 80042d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042da:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042e8:	2202      	movs	r2, #2
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042f0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004302:	601a      	str	r2, [r3, #0]
  return result;
 8004304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004308:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800430c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_RCC_OscConfig+0xb10>
 800431e:	4b58      	ldr	r3, [pc, #352]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	e013      	b.n	800434c <HAL_RCC_OscConfig+0xb38>
 8004324:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004328:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800432c:	2202      	movs	r2, #2
 800432e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004334:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	fa93 f2a3 	rbit	r2, r3
 800433e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004342:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004346:	601a      	str	r2, [r3, #0]
 8004348:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004350:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004354:	2102      	movs	r1, #2
 8004356:	6011      	str	r1, [r2, #0]
 8004358:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800435c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	fa92 f1a2 	rbit	r1, r2
 8004366:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800436a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800436e:	6011      	str	r1, [r2, #0]
  return result;
 8004370:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004374:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	fab2 f282 	clz	r2, r2
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	f002 021f 	and.w	r2, r2, #31
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d186      	bne.n	80042a4 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004396:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800439a:	2b01      	cmp	r3, #1
 800439c:	d105      	bne.n	80043aa <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b38      	ldr	r3, [pc, #224]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	4a37      	ldr	r2, [pc, #220]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8232 	beq.w	8004820 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043bc:	4b30      	ldr	r3, [pc, #192]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	f000 8201 	beq.w	80047cc <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	f040 8157 	bne.w	800468a <HAL_RCC_OscConfig+0xe76>
 80043dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ee:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	fa93 f2a3 	rbit	r2, r3
 80043f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043fc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004400:	601a      	str	r2, [r3, #0]
  return result;
 8004402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004406:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800440a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440c:	fab3 f383 	clz	r3, r3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004416:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	461a      	mov	r2, r3
 800441e:	2300      	movs	r3, #0
 8004420:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fe ff6f 	bl	8003304 <HAL_GetTick>
 8004426:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800442a:	e009      	b.n	8004440 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fe ff6a 	bl	8003304 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e1f0      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
 8004440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004444:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800444c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004452:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	fa93 f2a3 	rbit	r2, r3
 800445c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004460:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004464:	601a      	str	r2, [r3, #0]
  return result;
 8004466:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800446a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800446e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004470:	fab3 f383 	clz	r3, r3
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b3f      	cmp	r3, #63	@ 0x3f
 8004478:	d804      	bhi.n	8004484 <HAL_RCC_OscConfig+0xc70>
 800447a:	4b01      	ldr	r3, [pc, #4]	@ (8004480 <HAL_RCC_OscConfig+0xc6c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	e029      	b.n	80044d4 <HAL_RCC_OscConfig+0xcc0>
 8004480:	40021000 	.word	0x40021000
 8004484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004488:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800448c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004496:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	fa93 f2a3 	rbit	r2, r3
 80044a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ae:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044bc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	fa93 f2a3 	rbit	r2, r3
 80044c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044ca:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	4bc3      	ldr	r3, [pc, #780]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 80044d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044d8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044dc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044e0:	6011      	str	r1, [r2, #0]
 80044e2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044e6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	fa92 f1a2 	rbit	r1, r2
 80044f0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044f4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80044f8:	6011      	str	r1, [r2, #0]
  return result;
 80044fa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80044fe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	fab2 f282 	clz	r2, r2
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	f042 0220 	orr.w	r2, r2, #32
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	f002 021f 	and.w	r2, r2, #31
 8004514:	2101      	movs	r1, #1
 8004516:	fa01 f202 	lsl.w	r2, r1, r2
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d185      	bne.n	800442c <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004520:	4baf      	ldr	r3, [pc, #700]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800452c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004538:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	430b      	orrs	r3, r1
 8004542:	49a7      	ldr	r1, [pc, #668]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	604b      	str	r3, [r1, #4]
 8004548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800454c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004554:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800455a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	fa93 f2a3 	rbit	r2, r3
 8004564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004568:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800456c:	601a      	str	r2, [r3, #0]
  return result;
 800456e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004572:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004576:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004578:	fab3 f383 	clz	r3, r3
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004582:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	461a      	mov	r2, r3
 800458a:	2301      	movs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458e:	f7fe feb9 	bl	8003304 <HAL_GetTick>
 8004592:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004596:	e009      	b.n	80045ac <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004598:	f7fe feb4 	bl	8003304 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e13a      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
 80045ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80045b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	fa93 f2a3 	rbit	r2, r3
 80045c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045cc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80045d0:	601a      	str	r2, [r3, #0]
  return result;
 80045d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045d6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80045da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045dc:	fab3 f383 	clz	r3, r3
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80045e4:	d802      	bhi.n	80045ec <HAL_RCC_OscConfig+0xdd8>
 80045e6:	4b7e      	ldr	r3, [pc, #504]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e027      	b.n	800463c <HAL_RCC_OscConfig+0xe28>
 80045ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045f0:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80045f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045fe:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	fa93 f2a3 	rbit	r2, r3
 8004608:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800460c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004616:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800461a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004624:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	fa93 f2a3 	rbit	r2, r3
 800462e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004632:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	4b69      	ldr	r3, [pc, #420]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004640:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004644:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800464e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004652:	6812      	ldr	r2, [r2, #0]
 8004654:	fa92 f1a2 	rbit	r1, r2
 8004658:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800465c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004660:	6011      	str	r1, [r2, #0]
  return result;
 8004662:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004666:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800466a:	6812      	ldr	r2, [r2, #0]
 800466c:	fab2 f282 	clz	r2, r2
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	f042 0220 	orr.w	r2, r2, #32
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	f002 021f 	and.w	r2, r2, #31
 800467c:	2101      	movs	r1, #1
 800467e:	fa01 f202 	lsl.w	r2, r1, r2
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d087      	beq.n	8004598 <HAL_RCC_OscConfig+0xd84>
 8004688:	e0ca      	b.n	8004820 <HAL_RCC_OscConfig+0x100c>
 800468a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800468e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004692:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004698:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800469c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	fa93 f2a3 	rbit	r2, r3
 80046a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80046ae:	601a      	str	r2, [r3, #0]
  return result;
 80046b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80046b8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	fab3 f383 	clz	r3, r3
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046c4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe fe18 	bl	8003304 <HAL_GetTick>
 80046d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d8:	e009      	b.n	80046ee <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046da:	f7fe fe13 	bl	8003304 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e099      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
 80046ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80046f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004700:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	fa93 f2a3 	rbit	r2, r3
 800470a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800470e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004712:	601a      	str	r2, [r3, #0]
  return result;
 8004714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004718:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800471c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b3f      	cmp	r3, #63	@ 0x3f
 8004726:	d802      	bhi.n	800472e <HAL_RCC_OscConfig+0xf1a>
 8004728:	4b2d      	ldr	r3, [pc, #180]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	e027      	b.n	800477e <HAL_RCC_OscConfig+0xf6a>
 800472e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004732:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004736:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800473a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004740:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	fa93 f2a3 	rbit	r2, r3
 800474a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004758:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800475c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004766:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	fa93 f2a3 	rbit	r2, r3
 8004770:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004774:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <HAL_RCC_OscConfig+0xfcc>)
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004782:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004786:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800478a:	6011      	str	r1, [r2, #0]
 800478c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004790:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	fa92 f1a2 	rbit	r1, r2
 800479a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800479e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80047a2:	6011      	str	r1, [r2, #0]
  return result;
 80047a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80047a8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	fab2 f282 	clz	r2, r2
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	f042 0220 	orr.w	r2, r2, #32
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	f002 021f 	and.w	r2, r2, #31
 80047be:	2101      	movs	r1, #1
 80047c0:	fa01 f202 	lsl.w	r2, r1, r2
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d187      	bne.n	80046da <HAL_RCC_OscConfig+0xec6>
 80047ca:	e029      	b.n	8004820 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69db      	ldr	r3, [r3, #28]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d103      	bne.n	80047e4 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e020      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
 80047e0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047e4:	4b11      	ldr	r3, [pc, #68]	@ (800482c <HAL_RCC_OscConfig+0x1018>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80047ec:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80047f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80047f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	429a      	cmp	r2, r3
 8004802:	d10b      	bne.n	800481c <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004804:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004808:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40021000 	.word	0x40021000

08004830 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b09e      	sub	sp, #120	@ 0x78
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e154      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b89      	ldr	r3, [pc, #548]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d910      	bls.n	8004878 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b86      	ldr	r3, [pc, #536]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 0207 	bic.w	r2, r3, #7
 800485e:	4984      	ldr	r1, [pc, #528]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b82      	ldr	r3, [pc, #520]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e13c      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b7b      	ldr	r3, [pc, #492]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	4978      	ldr	r1, [pc, #480]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80cd 	beq.w	8004a3e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d137      	bne.n	800491c <HAL_RCC_ClockConfig+0xec>
 80048ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80048ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048bc:	fab3 f383 	clz	r3, r3
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80048c4:	d802      	bhi.n	80048cc <HAL_RCC_ClockConfig+0x9c>
 80048c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e00f      	b.n	80048ec <HAL_RCC_ClockConfig+0xbc>
 80048cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048d4:	fa93 f3a3 	rbit	r3, r3
 80048d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80048da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80048de:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048e2:	fa93 f3a3 	rbit	r3, r3
 80048e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048e8:	4b62      	ldr	r3, [pc, #392]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80048f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048f4:	fa92 f2a2 	rbit	r2, r2
 80048f8:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80048fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80048fc:	fab2 f282 	clz	r2, r2
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f042 0220 	orr.w	r2, r2, #32
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f002 021f 	and.w	r2, r2, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f202 	lsl.w	r2, r1, r2
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d171      	bne.n	80049fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0ea      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b02      	cmp	r3, #2
 8004922:	d137      	bne.n	8004994 <HAL_RCC_ClockConfig+0x164>
 8004924:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004928:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004934:	fab3 f383 	clz	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b3f      	cmp	r3, #63	@ 0x3f
 800493c:	d802      	bhi.n	8004944 <HAL_RCC_ClockConfig+0x114>
 800493e:	4b4d      	ldr	r3, [pc, #308]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	e00f      	b.n	8004964 <HAL_RCC_ClockConfig+0x134>
 8004944:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004948:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800494c:	fa93 f3a3 	rbit	r3, r3
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44
 8004952:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004956:	643b      	str	r3, [r7, #64]	@ 0x40
 8004958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800495a:	fa93 f3a3 	rbit	r3, r3
 800495e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004960:	4b44      	ldr	r3, [pc, #272]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004968:	63ba      	str	r2, [r7, #56]	@ 0x38
 800496a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800496c:	fa92 f2a2 	rbit	r2, r2
 8004970:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004972:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004974:	fab2 f282 	clz	r2, r2
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	f042 0220 	orr.w	r2, r2, #32
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	f002 021f 	and.w	r2, r2, #31
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f202 	lsl.w	r2, r1, r2
 800498a:	4013      	ands	r3, r2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d135      	bne.n	80049fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0ae      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
 8004994:	2302      	movs	r3, #2
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80049aa:	d802      	bhi.n	80049b2 <HAL_RCC_ClockConfig+0x182>
 80049ac:	4b31      	ldr	r3, [pc, #196]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	e00d      	b.n	80049ce <HAL_RCC_ClockConfig+0x19e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80049be:	2302      	movs	r3, #2
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	fa93 f3a3 	rbit	r3, r3
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	2202      	movs	r2, #2
 80049d0:	61ba      	str	r2, [r7, #24]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	fa92 f2a2 	rbit	r2, r2
 80049d8:	617a      	str	r2, [r7, #20]
  return result;
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	fab2 f282 	clz	r2, r2
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	f042 0220 	orr.w	r2, r2, #32
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	f002 021f 	and.w	r2, r2, #31
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f202 	lsl.w	r2, r1, r2
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e07a      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f023 0203 	bic.w	r2, r3, #3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	491a      	ldr	r1, [pc, #104]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a0e:	f7fe fc79 	bl	8003304 <HAL_GetTick>
 8004a12:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a16:	f7fe fc75 	bl	8003304 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e062      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2c:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <HAL_RCC_ClockConfig+0x244>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f003 020c 	and.w	r2, r3, #12
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d1eb      	bne.n	8004a16 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d215      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4c:	4b08      	ldr	r3, [pc, #32]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 0207 	bic.w	r2, r3, #7
 8004a54:	4906      	ldr	r1, [pc, #24]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <HAL_RCC_ClockConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d006      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e041      	b.n	8004af2 <HAL_RCC_ClockConfig+0x2c2>
 8004a6e:	bf00      	nop
 8004a70:	40022000 	.word	0x40022000
 8004a74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b1d      	ldr	r3, [pc, #116]	@ (8004afc <HAL_RCC_ClockConfig+0x2cc>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	491a      	ldr	r1, [pc, #104]	@ (8004afc <HAL_RCC_ClockConfig+0x2cc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <HAL_RCC_ClockConfig+0x2cc>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4912      	ldr	r1, [pc, #72]	@ (8004afc <HAL_RCC_ClockConfig+0x2cc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ab6:	f000 f829 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b0f      	ldr	r3, [pc, #60]	@ (8004afc <HAL_RCC_ClockConfig+0x2cc>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ac4:	22f0      	movs	r2, #240	@ 0xf0
 8004ac6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	fa92 f2a2 	rbit	r2, r2
 8004ace:	60fa      	str	r2, [r7, #12]
  return result;
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	fab2 f282 	clz	r2, r2
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	40d3      	lsrs	r3, r2
 8004ada:	4a09      	ldr	r2, [pc, #36]	@ (8004b00 <HAL_RCC_ClockConfig+0x2d0>)
 8004adc:	5cd3      	ldrb	r3, [r2, r3]
 8004ade:	fa21 f303 	lsr.w	r3, r1, r3
 8004ae2:	4a08      	ldr	r2, [pc, #32]	@ (8004b04 <HAL_RCC_ClockConfig+0x2d4>)
 8004ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004ae6:	4b08      	ldr	r3, [pc, #32]	@ (8004b08 <HAL_RCC_ClockConfig+0x2d8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe fbc6 	bl	800327c <HAL_InitTick>
  
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3778      	adds	r7, #120	@ 0x78
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40021000 	.word	0x40021000
 8004b00:	08005a14 	.word	0x08005a14
 8004b04:	200000d8 	.word	0x200000d8
 8004b08:	20000160 	.word	0x20000160

08004b0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b087      	sub	sp, #28
 8004b10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004b26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d002      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x30>
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d003      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x36>
 8004b3a:	e026      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b3c:	4b19      	ldr	r3, [pc, #100]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3e:	613b      	str	r3, [r7, #16]
      break;
 8004b40:	e026      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	0c9b      	lsrs	r3, r3, #18
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	4a17      	ldr	r2, [pc, #92]	@ (8004ba8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b4c:	5cd3      	ldrb	r3, [r2, r3]
 8004b4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004b50:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	4a14      	ldr	r2, [pc, #80]	@ (8004bac <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b5a:	5cd3      	ldrb	r3, [r2, r3]
 8004b5c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d008      	beq.n	8004b7a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004b68:	4a0e      	ldr	r2, [pc, #56]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	fb02 f303 	mul.w	r3, r2, r3
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e004      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b7e:	fb02 f303 	mul.w	r3, r2, r3
 8004b82:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	613b      	str	r3, [r7, #16]
      break;
 8004b88:	e002      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b8c:	613b      	str	r3, [r7, #16]
      break;
 8004b8e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b90:	693b      	ldr	r3, [r7, #16]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	007a1200 	.word	0x007a1200
 8004ba8:	08005b00 	.word	0x08005b00
 8004bac:	08005b10 	.word	0x08005b10
 8004bb0:	003d0900 	.word	0x003d0900

08004bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bb8:	4b03      	ldr	r3, [pc, #12]	@ (8004bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	200000d8 	.word	0x200000d8

08004bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004bd2:	f7ff ffef 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004bd6:	4601      	mov	r1, r0
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004be0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004be4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	fa92 f2a2 	rbit	r2, r2
 8004bec:	603a      	str	r2, [r7, #0]
  return result;
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	40d3      	lsrs	r3, r2
 8004bf8:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004c00:	4618      	mov	r0, r3
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	08005a24 	.word	0x08005a24

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004c16:	f7ff ffcd 	bl	8004bb4 <HAL_RCC_GetHCLKFreq>
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004c24:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004c28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	fa92 f2a2 	rbit	r2, r2
 8004c30:	603a      	str	r2, [r7, #0]
  return result;
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	fab2 f282 	clz	r2, r2
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	40d3      	lsrs	r3, r2
 8004c3c:	4a04      	ldr	r2, [pc, #16]	@ (8004c50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004c3e:	5cd3      	ldrb	r3, [r2, r3]
 8004c40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	08005a24 	.word	0x08005a24

08004c54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e097      	b.n	8004d98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d106      	bne.n	8004c82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7fd fb13 	bl	80022a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2202      	movs	r2, #2
 8004c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004c98:	f023 0307 	bic.w	r3, r3, #7
 8004c9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 f907 	bl	8004ebc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004cf4:	f023 030c 	bic.w	r3, r3, #12
 8004cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	4313      	orrs	r3, r2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	011a      	lsls	r2, r3, #4
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	031b      	lsls	r3, r3, #12
 8004d24:	4313      	orrs	r3, r2
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004d32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	4313      	orrs	r3, r2
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004db0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004db8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d110      	bne.n	8004df2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d102      	bne.n	8004ddc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dd6:	7b7b      	ldrb	r3, [r7, #13]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d001      	beq.n	8004de0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e069      	b.n	8004eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df0:	e031      	b.n	8004e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d110      	bne.n	8004e1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004df8:	7bbb      	ldrb	r3, [r7, #14]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d102      	bne.n	8004e04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004dfe:	7b3b      	ldrb	r3, [r7, #12]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d001      	beq.n	8004e08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e055      	b.n	8004eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e18:	e01d      	b.n	8004e56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d108      	bne.n	8004e32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e26:	7b7b      	ldrb	r3, [r7, #13]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d102      	bne.n	8004e32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e2c:	7b3b      	ldrb	r3, [r7, #12]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d001      	beq.n	8004e36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e03e      	b.n	8004eb4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <HAL_TIM_Encoder_Start+0xc4>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d008      	beq.n	8004e74 <HAL_TIM_Encoder_Start+0xd4>
 8004e62:	e00f      	b.n	8004e84 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 f8a9 	bl	8004fc4 <TIM_CCxChannelCmd>
      break;
 8004e72:	e016      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	2104      	movs	r1, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f8a1 	bl	8004fc4 <TIM_CCxChannelCmd>
      break;
 8004e82:	e00e      	b.n	8004ea2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f899 	bl	8004fc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2201      	movs	r2, #1
 8004e98:	2104      	movs	r1, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f892 	bl	8004fc4 <TIM_CCxChannelCmd>
      break;
 8004ea0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a38      	ldr	r2, [pc, #224]	@ (8004fb0 <TIM_Base_SetConfig+0xf4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d007      	beq.n	8004ee4 <TIM_Base_SetConfig+0x28>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eda:	d003      	beq.n	8004ee4 <TIM_Base_SetConfig+0x28>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a35      	ldr	r2, [pc, #212]	@ (8004fb4 <TIM_Base_SetConfig+0xf8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d108      	bne.n	8004ef6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <TIM_Base_SetConfig+0xf4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <TIM_Base_SetConfig+0x6a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f04:	d00f      	beq.n	8004f26 <TIM_Base_SetConfig+0x6a>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb4 <TIM_Base_SetConfig+0xf8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00b      	beq.n	8004f26 <TIM_Base_SetConfig+0x6a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a29      	ldr	r2, [pc, #164]	@ (8004fb8 <TIM_Base_SetConfig+0xfc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d007      	beq.n	8004f26 <TIM_Base_SetConfig+0x6a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a28      	ldr	r2, [pc, #160]	@ (8004fbc <TIM_Base_SetConfig+0x100>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <TIM_Base_SetConfig+0x6a>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a27      	ldr	r2, [pc, #156]	@ (8004fc0 <TIM_Base_SetConfig+0x104>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d108      	bne.n	8004f38 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <TIM_Base_SetConfig+0xf4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d00b      	beq.n	8004f7c <TIM_Base_SetConfig+0xc0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a14      	ldr	r2, [pc, #80]	@ (8004fb8 <TIM_Base_SetConfig+0xfc>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_Base_SetConfig+0xc0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a13      	ldr	r2, [pc, #76]	@ (8004fbc <TIM_Base_SetConfig+0x100>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_Base_SetConfig+0xc0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a12      	ldr	r2, [pc, #72]	@ (8004fc0 <TIM_Base_SetConfig+0x104>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d103      	bne.n	8004f84 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d105      	bne.n	8004fa2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	611a      	str	r2, [r3, #16]
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	40012c00 	.word	0x40012c00
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1a      	ldr	r2, [r3, #32]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1a      	ldr	r2, [r3, #32]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 031f 	and.w	r3, r3, #31
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e054      	b.n	80050d2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a24      	ldr	r2, [pc, #144]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d108      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005058:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800506a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a17      	ldr	r2, [pc, #92]	@ (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00e      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005090:	d009      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a13      	ldr	r2, [pc, #76]	@ (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a11      	ldr	r2, [pc, #68]	@ (80050e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10c      	bne.n	80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40014000 	.word	0x40014000

080050ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e040      	b.n	8005180 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7fd f90a 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2224      	movs	r2, #36	@ 0x24
 8005118:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0201 	bic.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f95e 	bl	80053f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 f825 	bl	8005188 <UART_SetConfig>
 800513e:	4603      	mov	r3, r0
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e01b      	b.n	8005180 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005166:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f9dd 	bl	8005538 <UART_CheckIdleState>
 800517e:	4603      	mov	r3, r0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	4b8a      	ldr	r3, [pc, #552]	@ (80053dc <UART_SetConfig+0x254>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	6979      	ldr	r1, [r7, #20]
 80051bc:	430b      	orrs	r3, r1
 80051be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a78      	ldr	r2, [pc, #480]	@ (80053e0 <UART_SetConfig+0x258>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d120      	bne.n	8005246 <UART_SetConfig+0xbe>
 8005204:	4b77      	ldr	r3, [pc, #476]	@ (80053e4 <UART_SetConfig+0x25c>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	2b03      	cmp	r3, #3
 800520e:	d817      	bhi.n	8005240 <UART_SetConfig+0xb8>
 8005210:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <UART_SetConfig+0x90>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005229 	.word	0x08005229
 800521c:	08005235 	.word	0x08005235
 8005220:	0800523b 	.word	0x0800523b
 8005224:	0800522f 	.word	0x0800522f
 8005228:	2300      	movs	r3, #0
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e01d      	b.n	800526a <UART_SetConfig+0xe2>
 800522e:	2302      	movs	r3, #2
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e01a      	b.n	800526a <UART_SetConfig+0xe2>
 8005234:	2304      	movs	r3, #4
 8005236:	77fb      	strb	r3, [r7, #31]
 8005238:	e017      	b.n	800526a <UART_SetConfig+0xe2>
 800523a:	2308      	movs	r3, #8
 800523c:	77fb      	strb	r3, [r7, #31]
 800523e:	e014      	b.n	800526a <UART_SetConfig+0xe2>
 8005240:	2310      	movs	r3, #16
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e011      	b.n	800526a <UART_SetConfig+0xe2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a67      	ldr	r2, [pc, #412]	@ (80053e8 <UART_SetConfig+0x260>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d102      	bne.n	8005256 <UART_SetConfig+0xce>
 8005250:	2300      	movs	r3, #0
 8005252:	77fb      	strb	r3, [r7, #31]
 8005254:	e009      	b.n	800526a <UART_SetConfig+0xe2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a64      	ldr	r2, [pc, #400]	@ (80053ec <UART_SetConfig+0x264>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d102      	bne.n	8005266 <UART_SetConfig+0xde>
 8005260:	2300      	movs	r3, #0
 8005262:	77fb      	strb	r3, [r7, #31]
 8005264:	e001      	b.n	800526a <UART_SetConfig+0xe2>
 8005266:	2310      	movs	r3, #16
 8005268:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005272:	d15a      	bne.n	800532a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005274:	7ffb      	ldrb	r3, [r7, #31]
 8005276:	2b08      	cmp	r3, #8
 8005278:	d827      	bhi.n	80052ca <UART_SetConfig+0x142>
 800527a:	a201      	add	r2, pc, #4	@ (adr r2, 8005280 <UART_SetConfig+0xf8>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a5 	.word	0x080052a5
 8005284:	080052ad 	.word	0x080052ad
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052cb 	.word	0x080052cb
 8005290:	080052bb 	.word	0x080052bb
 8005294:	080052cb 	.word	0x080052cb
 8005298:	080052cb 	.word	0x080052cb
 800529c:	080052cb 	.word	0x080052cb
 80052a0:	080052c3 	.word	0x080052c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052a4:	f7ff fc92 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 80052a8:	61b8      	str	r0, [r7, #24]
        break;
 80052aa:	e013      	b.n	80052d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ac:	f7ff fcb0 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 80052b0:	61b8      	str	r0, [r7, #24]
        break;
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052b4:	4b4e      	ldr	r3, [pc, #312]	@ (80053f0 <UART_SetConfig+0x268>)
 80052b6:	61bb      	str	r3, [r7, #24]
        break;
 80052b8:	e00c      	b.n	80052d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ba:	f7ff fc27 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80052be:	61b8      	str	r0, [r7, #24]
        break;
 80052c0:	e008      	b.n	80052d4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052c6:	61bb      	str	r3, [r7, #24]
        break;
 80052c8:	e004      	b.n	80052d4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	77bb      	strb	r3, [r7, #30]
        break;
 80052d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d074      	beq.n	80053c4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	005a      	lsls	r2, r3, #1
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	d916      	bls.n	8005324 <UART_SetConfig+0x19c>
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052fc:	d212      	bcs.n	8005324 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	b29b      	uxth	r3, r3
 8005302:	f023 030f 	bic.w	r3, r3, #15
 8005306:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	b29b      	uxth	r3, r3
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	b29a      	uxth	r2, r3
 8005314:	89fb      	ldrh	r3, [r7, #14]
 8005316:	4313      	orrs	r3, r2
 8005318:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	89fa      	ldrh	r2, [r7, #14]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	e04f      	b.n	80053c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	77bb      	strb	r3, [r7, #30]
 8005328:	e04c      	b.n	80053c4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800532a:	7ffb      	ldrb	r3, [r7, #31]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d828      	bhi.n	8005382 <UART_SetConfig+0x1fa>
 8005330:	a201      	add	r2, pc, #4	@ (adr r2, 8005338 <UART_SetConfig+0x1b0>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	0800535d 	.word	0x0800535d
 800533c:	08005365 	.word	0x08005365
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005383 	.word	0x08005383
 8005348:	08005373 	.word	0x08005373
 800534c:	08005383 	.word	0x08005383
 8005350:	08005383 	.word	0x08005383
 8005354:	08005383 	.word	0x08005383
 8005358:	0800537b 	.word	0x0800537b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7ff fc36 	bl	8004bcc <HAL_RCC_GetPCLK1Freq>
 8005360:	61b8      	str	r0, [r7, #24]
        break;
 8005362:	e013      	b.n	800538c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7ff fc54 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8005368:	61b8      	str	r0, [r7, #24]
        break;
 800536a:	e00f      	b.n	800538c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800536c:	4b20      	ldr	r3, [pc, #128]	@ (80053f0 <UART_SetConfig+0x268>)
 800536e:	61bb      	str	r3, [r7, #24]
        break;
 8005370:	e00c      	b.n	800538c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005372:	f7ff fbcb 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8005376:	61b8      	str	r0, [r7, #24]
        break;
 8005378:	e008      	b.n	800538c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800537a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537e:	61bb      	str	r3, [r7, #24]
        break;
 8005380:	e004      	b.n	800538c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	77bb      	strb	r3, [r7, #30]
        break;
 800538a:	bf00      	nop
    }

    if (pclk != 0U)
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d018      	beq.n	80053c4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	085a      	lsrs	r2, r3, #1
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	441a      	add	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	2b0f      	cmp	r3, #15
 80053aa:	d909      	bls.n	80053c0 <UART_SetConfig+0x238>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053b2:	d205      	bcs.n	80053c0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	e001      	b.n	80053c4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80053d0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3720      	adds	r7, #32
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	efff69f3 	.word	0xefff69f3
 80053e0:	40013800 	.word	0x40013800
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40004400 	.word	0x40004400
 80053ec:	40004800 	.word	0x40004800
 80053f0:	007a1200 	.word	0x007a1200

080053f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01a      	beq.n	800550a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054f2:	d10a      	bne.n	800550a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00a      	beq.n	800552c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	605a      	str	r2, [r3, #4]
  }
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b098      	sub	sp, #96	@ 0x60
 800553c:	af02      	add	r7, sp, #8
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005548:	f7fd fedc 	bl	8003304 <HAL_GetTick>
 800554c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b08      	cmp	r3, #8
 800555a:	d12e      	bne.n	80055ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800555c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005564:	2200      	movs	r2, #0
 8005566:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f88c 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d021      	beq.n	80055ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800558a:	653b      	str	r3, [r7, #80]	@ 0x50
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005594:	647b      	str	r3, [r7, #68]	@ 0x44
 8005596:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800559a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e6      	bne.n	8005576 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e062      	b.n	8005680 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d149      	bne.n	800565c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d0:	2200      	movs	r2, #0
 80055d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f856 	bl	8005688 <UART_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03c      	beq.n	800565c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	623b      	str	r3, [r7, #32]
   return(result);
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
 8005602:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	e853 3f00 	ldrex	r3, [r3]
 8005622:	60fb      	str	r3, [r7, #12]
   return(result);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005634:	61fa      	str	r2, [r7, #28]
 8005636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	e841 2300 	strex	r3, r2, [r1]
 8005640:	617b      	str	r3, [r7, #20]
   return(result);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1e5      	bne.n	8005614 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e011      	b.n	8005680 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3758      	adds	r7, #88	@ 0x58
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005698:	e04f      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056a0:	d04b      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fd fe2f 	bl	8003304 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d101      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e04e      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d037      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b80      	cmp	r3, #128	@ 0x80
 80056ce:	d034      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b40      	cmp	r3, #64	@ 0x40
 80056d4:	d031      	beq.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69db      	ldr	r3, [r3, #28]
 80056dc:	f003 0308 	and.w	r3, r3, #8
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	d110      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2208      	movs	r2, #8
 80056ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f000 f838 	bl	8005762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2208      	movs	r2, #8
 80056f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e029      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69db      	ldr	r3, [r3, #28]
 800570c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005710:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005714:	d111      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800571e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 f81e 	bl	8005762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2220      	movs	r2, #32
 800572a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e00f      	b.n	800575a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4013      	ands	r3, r2
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	bf0c      	ite	eq
 800574a:	2301      	moveq	r3, #1
 800574c:	2300      	movne	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	429a      	cmp	r2, r3
 8005756:	d0a0      	beq.n	800569a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005762:	b480      	push	{r7}
 8005764:	b095      	sub	sp, #84	@ 0x54
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800577e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	461a      	mov	r2, r3
 8005786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005788:	643b      	str	r3, [r7, #64]	@ 0x40
 800578a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800578e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e6      	bne.n	800576a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3308      	adds	r3, #8
 80057a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f023 0301 	bic.w	r3, r3, #1
 80057b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e5      	bne.n	800579c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d118      	bne.n	800580a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f023 0310 	bic.w	r3, r3, #16
 80057ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f6:	61bb      	str	r3, [r7, #24]
 80057f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6979      	ldr	r1, [r7, #20]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	613b      	str	r3, [r7, #16]
   return(result);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e6      	bne.n	80057d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2220      	movs	r2, #32
 800580e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800581e:	bf00      	nop
 8005820:	3754      	adds	r7, #84	@ 0x54
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
	...

0800582c <fmodf>:
 800582c:	b508      	push	{r3, lr}
 800582e:	ed2d 8b02 	vpush	{d8}
 8005832:	eef0 8a40 	vmov.f32	s17, s0
 8005836:	eeb0 8a60 	vmov.f32	s16, s1
 800583a:	f000 f817 	bl	800586c <__ieee754_fmodf>
 800583e:	eef4 8a48 	vcmp.f32	s17, s16
 8005842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005846:	d60c      	bvs.n	8005862 <fmodf+0x36>
 8005848:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005868 <fmodf+0x3c>
 800584c:	eeb4 8a68 	vcmp.f32	s16, s17
 8005850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005854:	d105      	bne.n	8005862 <fmodf+0x36>
 8005856:	f000 f893 	bl	8005980 <__errno>
 800585a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800585e:	2321      	movs	r3, #33	@ 0x21
 8005860:	6003      	str	r3, [r0, #0]
 8005862:	ecbd 8b02 	vpop	{d8}
 8005866:	bd08      	pop	{r3, pc}
 8005868:	00000000 	.word	0x00000000

0800586c <__ieee754_fmodf>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	ee10 6a90 	vmov	r6, s1
 8005872:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005876:	1e5a      	subs	r2, r3, #1
 8005878:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800587c:	d206      	bcs.n	800588c <__ieee754_fmodf+0x20>
 800587e:	ee10 4a10 	vmov	r4, s0
 8005882:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8005886:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800588a:	d304      	bcc.n	8005896 <__ieee754_fmodf+0x2a>
 800588c:	ee60 0a20 	vmul.f32	s1, s0, s1
 8005890:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8005894:	bd70      	pop	{r4, r5, r6, pc}
 8005896:	4299      	cmp	r1, r3
 8005898:	dbfc      	blt.n	8005894 <__ieee754_fmodf+0x28>
 800589a:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800589e:	d105      	bne.n	80058ac <__ieee754_fmodf+0x40>
 80058a0:	4b32      	ldr	r3, [pc, #200]	@ (800596c <__ieee754_fmodf+0x100>)
 80058a2:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80058a6:	ed93 0a00 	vldr	s0, [r3]
 80058aa:	e7f3      	b.n	8005894 <__ieee754_fmodf+0x28>
 80058ac:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80058b0:	d146      	bne.n	8005940 <__ieee754_fmodf+0xd4>
 80058b2:	020a      	lsls	r2, r1, #8
 80058b4:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	dc3e      	bgt.n	800593a <__ieee754_fmodf+0xce>
 80058bc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80058c0:	bf01      	itttt	eq
 80058c2:	021a      	lsleq	r2, r3, #8
 80058c4:	fab2 f282 	clzeq	r2, r2
 80058c8:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80058cc:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80058d0:	bf16      	itet	ne
 80058d2:	15da      	asrne	r2, r3, #23
 80058d4:	3282      	addeq	r2, #130	@ 0x82
 80058d6:	3a7f      	subne	r2, #127	@ 0x7f
 80058d8:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80058dc:	bfbb      	ittet	lt
 80058de:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80058e2:	1a24      	sublt	r4, r4, r0
 80058e4:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80058e8:	40a1      	lsllt	r1, r4
 80058ea:	bfa8      	it	ge
 80058ec:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80058f0:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80058f4:	bfb5      	itete	lt
 80058f6:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80058fa:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 80058fe:	1aa4      	sublt	r4, r4, r2
 8005900:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8005904:	bfb8      	it	lt
 8005906:	fa03 f404 	lsllt.w	r4, r3, r4
 800590a:	1a80      	subs	r0, r0, r2
 800590c:	1b0b      	subs	r3, r1, r4
 800590e:	b9d0      	cbnz	r0, 8005946 <__ieee754_fmodf+0xda>
 8005910:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8005914:	bf28      	it	cs
 8005916:	460b      	movcs	r3, r1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0c1      	beq.n	80058a0 <__ieee754_fmodf+0x34>
 800591c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005920:	db19      	blt.n	8005956 <__ieee754_fmodf+0xea>
 8005922:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8005926:	db19      	blt.n	800595c <__ieee754_fmodf+0xf0>
 8005928:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800592c:	327f      	adds	r2, #127	@ 0x7f
 800592e:	432b      	orrs	r3, r5
 8005930:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005934:	ee00 3a10 	vmov	s0, r3
 8005938:	e7ac      	b.n	8005894 <__ieee754_fmodf+0x28>
 800593a:	3801      	subs	r0, #1
 800593c:	0052      	lsls	r2, r2, #1
 800593e:	e7bb      	b.n	80058b8 <__ieee754_fmodf+0x4c>
 8005940:	15c8      	asrs	r0, r1, #23
 8005942:	387f      	subs	r0, #127	@ 0x7f
 8005944:	e7ba      	b.n	80058bc <__ieee754_fmodf+0x50>
 8005946:	2b00      	cmp	r3, #0
 8005948:	da02      	bge.n	8005950 <__ieee754_fmodf+0xe4>
 800594a:	0049      	lsls	r1, r1, #1
 800594c:	3801      	subs	r0, #1
 800594e:	e7dd      	b.n	800590c <__ieee754_fmodf+0xa0>
 8005950:	d0a6      	beq.n	80058a0 <__ieee754_fmodf+0x34>
 8005952:	0059      	lsls	r1, r3, #1
 8005954:	e7fa      	b.n	800594c <__ieee754_fmodf+0xe0>
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	3a01      	subs	r2, #1
 800595a:	e7df      	b.n	800591c <__ieee754_fmodf+0xb0>
 800595c:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8005960:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8005964:	3282      	adds	r2, #130	@ 0x82
 8005966:	4113      	asrs	r3, r2
 8005968:	432b      	orrs	r3, r5
 800596a:	e7e3      	b.n	8005934 <__ieee754_fmodf+0xc8>
 800596c:	08005b20 	.word	0x08005b20

08005970 <memset>:
 8005970:	4402      	add	r2, r0
 8005972:	4603      	mov	r3, r0
 8005974:	4293      	cmp	r3, r2
 8005976:	d100      	bne.n	800597a <memset+0xa>
 8005978:	4770      	bx	lr
 800597a:	f803 1b01 	strb.w	r1, [r3], #1
 800597e:	e7f9      	b.n	8005974 <memset+0x4>

08005980 <__errno>:
 8005980:	4b01      	ldr	r3, [pc, #4]	@ (8005988 <__errno+0x8>)
 8005982:	6818      	ldr	r0, [r3, #0]
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	20000168 	.word	0x20000168

0800598c <__libc_init_array>:
 800598c:	b570      	push	{r4, r5, r6, lr}
 800598e:	4d0d      	ldr	r5, [pc, #52]	@ (80059c4 <__libc_init_array+0x38>)
 8005990:	4c0d      	ldr	r4, [pc, #52]	@ (80059c8 <__libc_init_array+0x3c>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	2600      	movs	r6, #0
 8005998:	42a6      	cmp	r6, r4
 800599a:	d109      	bne.n	80059b0 <__libc_init_array+0x24>
 800599c:	4d0b      	ldr	r5, [pc, #44]	@ (80059cc <__libc_init_array+0x40>)
 800599e:	4c0c      	ldr	r4, [pc, #48]	@ (80059d0 <__libc_init_array+0x44>)
 80059a0:	f000 f818 	bl	80059d4 <_init>
 80059a4:	1b64      	subs	r4, r4, r5
 80059a6:	10a4      	asrs	r4, r4, #2
 80059a8:	2600      	movs	r6, #0
 80059aa:	42a6      	cmp	r6, r4
 80059ac:	d105      	bne.n	80059ba <__libc_init_array+0x2e>
 80059ae:	bd70      	pop	{r4, r5, r6, pc}
 80059b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b4:	4798      	blx	r3
 80059b6:	3601      	adds	r6, #1
 80059b8:	e7ee      	b.n	8005998 <__libc_init_array+0xc>
 80059ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80059be:	4798      	blx	r3
 80059c0:	3601      	adds	r6, #1
 80059c2:	e7f2      	b.n	80059aa <__libc_init_array+0x1e>
 80059c4:	08005b28 	.word	0x08005b28
 80059c8:	08005b28 	.word	0x08005b28
 80059cc:	08005b28 	.word	0x08005b28
 80059d0:	08005b30 	.word	0x08005b30

080059d4 <_init>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr

080059e0 <_fini>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr
